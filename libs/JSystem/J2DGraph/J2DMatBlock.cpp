// 
// Generated By: dol2asm
// Translation Unit: J2DMatBlock
// 

#include "dolphin/types.h"

// 
// Types:
// 

struct J2DColorBlock {
	/* 802EB394 */ void initialize();
	/* 802EB424 */ void setGX();
};

struct J2DTexMtx {
	/* 802E9C90 */ void load(u32);
	/* 802E9CC4 */ void calc();
};

struct J2DTexGenBlock {
	/* 802EB510 */ void initialize();
	/* 802EB570 */ void setGX();
	/* 802EB620 */ ~J2DTexGenBlock();
	/* 802EB6A4 */ void setTexMtx(u32, J2DTexMtx&);
	/* 802EB7E0 */ void getTexMtx(u32, J2DTexMtx&);
};

struct _GXTexMapID {
};

struct J2DTevStageInfo {
};

struct J2DTevStage {
	/* 802F1940 */ J2DTevStage();
	/* 802F19A8 */ void setTevStageInfo(J2DTevStageInfo const&);
};

struct JUtility {
	struct TColor {
		/* 80193960 */ TColor();
	};

};

struct J2DTevOrder {
	/* 802F1B70 */ J2DTevOrder();
};

struct J2DGXColorS10 {
	/* 802F1B90 */ J2DGXColorS10();
};

struct J2DTevSwapModeInfo {
};

struct ResTIMG {
};

struct _GXTlut {
};

struct ResTLUT {
};

struct JUTPalette {
	/* 802DE890 */ void storeTLUT(_GXTlut, ResTLUT*);
};

struct JUTTexture {
	/* 802DE234 */ ~JUTTexture();
	/* 802DE2A8 */ void storeTIMG(ResTIMG const*, u8);
	/* 802DE44C */ void storeTIMG(ResTIMG const*, JUTPalette*);
	/* 802DE5B0 */ void attachPalette(JUTPalette*);
	/* 802DE840 */ void load(_GXTexMapID);
};

struct JUTFont {
};

struct J2DTevSwapModeTable {
	/* 802F1934 */ J2DTevSwapModeTable();
};

struct J2DIndTevStage {
	/* 802EA044 */ void load(u8);
	/* 802F18A0 */ J2DIndTevStage();
};

struct ResFONT {
};

struct J2DTevBlock {
	/* 802EA12C */ bool getTevSwapModeTable(u32);
	/* 802EA134 */ bool getTevStage(u32);
	/* 802EA13C */ bool getTevColor(u32);
	/* 802EA144 */ bool getTevOrder(u32);
	/* 802EA14C */ bool getTevKAlphaSel(u32);
	/* 802EA154 */ bool getTevKColorSel(u32);
	/* 802EA15C */ bool getTevKColor(u32);
	/* 802EA164 */ void getFontNo() const;
	/* 802EA170 */ void getTexNo(u32) const;
	/* 802EA17C */ bool getTevStageNum() const;
	/* 802EA184 */ bool getIndTevStage(u32);
	/* 802EB184 */ ~J2DTevBlock();
	/* 802EB1D0 */ void setGX();
	/* 802EB1D4 */ void setTevKColor(u32, JUtility::TColor);
	/* 802EB1D8 */ void setTevColor(u32, J2DGXColorS10);
	/* 802EB1DC */ void setTexNo(u32, u16);
	/* 802EB87C */ bool getTexture(u32);
	/* 802EB884 */ bool getPalette(u32);
	/* 802F2A40 */ void initialize();
	/* 802F2A44 */ void loadTexture(_GXTexMapID, u32);
	/* 802F2A48 */ void setFontNo(u16);
	/* 802F2A4C */ void setTevOrder(u32, J2DTevOrder);
	/* 802F2A50 */ void setTevKColorSel(u32, u8);
	/* 802F2A54 */ void setTevKAlphaSel(u32, u8);
	/* 802F2A58 */ void setTevStageNum(u8);
	/* 802F2A5C */ void setTevStage(u32, J2DTevStage);
	/* 802F2A60 */ void setTevSwapModeInfo(u32, J2DTevSwapModeInfo);
	/* 802F2A64 */ void setTevSwapModeTable(u32, J2DTevSwapModeTable);
	/* 802F2A68 */ void setIndTevStage(u32, J2DIndTevStage);
	/* 802F2A6C */ bool insertTexture(u32, JUTTexture*);
	/* 802F2A74 */ bool insertTexture(u32, ResTIMG const*, JUTPalette*);
	/* 802F2A7C */ bool insertTexture(u32, ResTIMG const*);
	/* 802F2A84 */ bool setTexture(u32, JUTTexture*);
	/* 802F2A8C */ bool setTexture(u32, ResTIMG const*);
	/* 802F2A94 */ bool removeTexture(u32);
	/* 802F2A9C */ bool setFont(JUTFont*);
	/* 802F2AA4 */ bool setFont(ResFONT*);
	/* 802F2AAC */ bool setPalette(u32, ResTLUT const*);
	/* 802F2AB4 */ bool prepareTexture(u8);
	/* 802F2ABC */ bool getFont();
	/* 802F2AC4 */ void shiftDeleteFlag(u8, bool);
	/* 802F2AC8 */ void setUndeleteFlag(u8);
	/* 802F2ACC */ void setFontUndeleteFlag();
};

struct J2DTevBlock1 {
	/* 802EB88C */ J2DTevBlock1();
	/* 802EB998 */ ~J2DTevBlock1();
	/* 802EBA50 */ void initialize();
	/* 802EBC0C */ void prepareTexture(u8);
	/* 802F29A8 */ void insertTexture(u32, ResTIMG const*);
	/* 802EBCC0 */ void insertTexture(u32, ResTIMG const*, JUTPalette*);
	/* 802EBDE4 */ void insertTexture(u32, JUTTexture*);
	/* 802EBE8C */ void setTexture(u32, ResTIMG const*);
	/* 802EC01C */ void setTexture(u32, JUTTexture*);
	/* 802EC0A8 */ void removeTexture(u32);
	/* 802EC124 */ void setFont(ResFONT*);
	/* 802EC1D8 */ void setFont(JUTFont*);
	/* 802EC258 */ void setPalette(u32, ResTLUT const*);
	/* 802EC318 */ void shiftDeleteFlag(u8, bool);
	/* 802EC328 */ void setGX();
	/* 802EC570 */ void loadTexture(_GXTexMapID, u32);
	/* 802F27A0 */ void getType();
	/* 802F27AC */ bool getMaxStage();
	/* 802F27B4 */ void setTexNo(u32, u16);
	/* 802F27C4 */ void getTexNo(u32) const;
	/* 802F27D4 */ void setFontNo(u16);
	/* 802F27DC */ void getFontNo() const;
	/* 802F27E4 */ void setTevOrder(u32, J2DTevOrder);
	/* 802F2808 */ void getTevOrder(u32);
	/* 802F281C */ void setTevColor(u32, J2DGXColorS10);
	/* 802F2848 */ void getTevColor(u32);
	/* 802F285C */ void setTevKColor(u32, JUtility::TColor);
	/* 802F2888 */ void getTevKColor(u32);
	/* 802F289C */ void setTevKColorSel(u32, u8);
	/* 802F28A8 */ void getTevKColorSel(u32);
	/* 802F28B4 */ void setTevKAlphaSel(u32, u8);
	/* 802F28C0 */ void getTevKAlphaSel(u32);
	/* 802F28CC */ void setTevStageNum(u8);
	/* 802F28D0 */ bool getTevStageNum() const;
	/* 802F28D8 */ void setTevStage(u32, J2DTevStage);
	/* 802F2914 */ void getTevStage(u32);
	/* 802F2928 */ void setTevSwapModeInfo(u32, J2DTevSwapModeInfo);
	/* 802F2960 */ void setTevSwapModeTable(u32, J2DTevSwapModeTable);
	/* 802F2970 */ void getTevSwapModeTable(u32);
	/* 802F2980 */ void setIndTevStage(u32, J2DIndTevStage);
	/* 802F2994 */ void getIndTevStage(u32);
	/* 802F29D8 */ void getTexture(u32);
	/* 802F29F8 */ void getPalette(u32);
	/* 802F2A18 */ void getFont();
	/* 802F2A20 */ void setUndeleteFlag(u8);
	/* 802F2A30 */ void setFontUndeleteFlag();
};

struct J2DTevBlock2 {
	/* 802EC5B8 */ J2DTevBlock2();
	/* 802EC6C8 */ ~J2DTevBlock2();
	/* 802EC7A0 */ void initialize();
	/* 802ECA18 */ void prepareTexture(u8);
	/* 802F2708 */ void insertTexture(u32, ResTIMG const*);
	/* 802ECAE8 */ void insertTexture(u32, ResTIMG const*, JUTPalette*);
	/* 802ECDE8 */ void insertTexture(u32, JUTTexture*);
	/* 802ECF48 */ void setTexture(u32, ResTIMG const*);
	/* 802ED16C */ void setTexture(u32, JUTTexture*);
	/* 802ED21C */ void removeTexture(u32);
	/* 802ED3A4 */ void setFont(JUTFont*);
	/* 802ED2F0 */ void setFont(ResFONT*);
	/* 802ED424 */ void setPalette(u32, ResTLUT const*);
	/* 802ED4FC */ void shiftDeleteFlag(u8, bool);
	/* 802ED584 */ void setGX();
	/* 802ED874 */ void loadTexture(_GXTexMapID, u32);
	/* 802F24FC */ void getType();
	/* 802F2508 */ s32 getMaxStage();
	/* 802F2510 */ void setTexNo(u32, u16);
	/* 802F2520 */ void getTexNo(u32) const;
	/* 802F2530 */ void setFontNo(u16);
	/* 802F2538 */ void getFontNo() const;
	/* 802F2540 */ void setTevOrder(u32, J2DTevOrder);
	/* 802F2564 */ void getTevOrder(u32);
	/* 802F2578 */ void setTevColor(u32, J2DGXColorS10);
	/* 802F25A4 */ void getTevColor(u32);
	/* 802F25B8 */ void setTevKColor(u32, JUtility::TColor);
	/* 802F25E4 */ void getTevKColor(u32);
	/* 802F25F8 */ void setTevKColorSel(u32, u8);
	/* 802F2604 */ void getTevKColorSel(u32);
	/* 802F2610 */ void setTevKAlphaSel(u32, u8);
	/* 802F261C */ void getTevKAlphaSel(u32);
	/* 802F2628 */ void setTevStageNum(u8);
	/* 802F2630 */ void getTevStageNum() const;
	/* 802F2638 */ void setTevStage(u32, J2DTevStage);
	/* 802F2674 */ void getTevStage(u32);
	/* 802F2688 */ void setTevSwapModeInfo(u32, J2DTevSwapModeInfo);
	/* 802F26C0 */ void setTevSwapModeTable(u32, J2DTevSwapModeTable);
	/* 802F26D0 */ void getTevSwapModeTable(u32);
	/* 802F26E0 */ void setIndTevStage(u32, J2DIndTevStage);
	/* 802F26F4 */ void getIndTevStage(u32);
	/* 802F2738 */ void getTexture(u32);
	/* 802F2758 */ void getPalette(u32);
	/* 802F2778 */ void getFont();
	/* 802F2780 */ void setUndeleteFlag(u8);
	/* 802F2790 */ void setFontUndeleteFlag();
};

struct J2DTevBlock4 {
	/* 802ED8BC */ J2DTevBlock4();
	/* 802ED9E4 */ ~J2DTevBlock4();
	/* 802EDAC4 */ void initialize();
	/* 802EDD34 */ void prepareTexture(u8);
	/* 802EDE04 */ void insertTexture(u32, ResTIMG const*, JUTPalette*);
	/* 802EE1D4 */ void insertTexture(u32, JUTTexture*);
	/* 802F2464 */ void insertTexture(u32, ResTIMG const*);
	/* 802EE364 */ void setTexture(u32, ResTIMG const*);
	/* 802EE5F0 */ void setTexture(u32, JUTTexture*);
	/* 802EE6A0 */ void removeTexture(u32);
	/* 802EE798 */ void setFont(ResFONT*);
	/* 802EE84C */ void setFont(JUTFont*);
	/* 802EE8CC */ void setPalette(u32, ResTLUT const*);
	/* 802EE9A4 */ void shiftDeleteFlag(u8, bool);
	/* 802EEA2C */ void setGX();
	/* 802EED1C */ void loadTexture(_GXTexMapID, u32);
	/* 802F2258 */ void getType();
	/* 802F2264 */ s32 getMaxStage();
	/* 802F226C */ void setTexNo(u32, u16);
	/* 802F227C */ void getTexNo(u32) const;
	/* 802F228C */ void setFontNo(u16);
	/* 802F2294 */ void getFontNo() const;
	/* 802F229C */ void setTevOrder(u32, J2DTevOrder);
	/* 802F22C0 */ void getTevOrder(u32);
	/* 802F22D4 */ void setTevColor(u32, J2DGXColorS10);
	/* 802F2300 */ void getTevColor(u32);
	/* 802F2314 */ void setTevKColor(u32, JUtility::TColor);
	/* 802F2340 */ void getTevKColor(u32);
	/* 802F2354 */ void setTevKColorSel(u32, u8);
	/* 802F2360 */ void getTevKColorSel(u32);
	/* 802F236C */ void setTevKAlphaSel(u32, u8);
	/* 802F2378 */ void getTevKAlphaSel(u32);
	/* 802F2384 */ void setTevStageNum(u8);
	/* 802F238C */ void getTevStageNum() const;
	/* 802F2394 */ void setTevStage(u32, J2DTevStage);
	/* 802F23D0 */ void getTevStage(u32);
	/* 802F23E4 */ void setTevSwapModeInfo(u32, J2DTevSwapModeInfo);
	/* 802F241C */ void setTevSwapModeTable(u32, J2DTevSwapModeTable);
	/* 802F242C */ void getTevSwapModeTable(u32);
	/* 802F243C */ void setIndTevStage(u32, J2DIndTevStage);
	/* 802F2450 */ void getIndTevStage(u32);
	/* 802F2494 */ void getTexture(u32);
	/* 802F24B4 */ void getPalette(u32);
	/* 802F24D4 */ void getFont();
	/* 802F24DC */ void setUndeleteFlag(u8);
	/* 802F24EC */ void setFontUndeleteFlag();
};

struct J2DTevBlock8 {
	/* 802EED64 */ J2DTevBlock8();
	/* 802EEE8C */ ~J2DTevBlock8();
	/* 802EEF6C */ void initialize();
	/* 802EF1E0 */ void prepareTexture(u8);
	/* 802EF2B0 */ void insertTexture(u32, ResTIMG const*, JUTPalette*);
	/* 802F21C4 */ void insertTexture(u32, ResTIMG const*);
	/* 802EF67C */ void insertTexture(u32, JUTTexture*);
	/* 802EF80C */ void setTexture(u32, ResTIMG const*);
	/* 802EFA98 */ void setTexture(u32, JUTTexture*);
	/* 802EFB48 */ void removeTexture(u32);
	/* 802EFC40 */ void setFont(ResFONT*);
	/* 802EFCEC */ void setFont(JUTFont*);
	/* 802EFD68 */ void setPalette(u32, ResTLUT const*);
	/* 802EFE40 */ void shiftDeleteFlag(u8, bool);
	/* 802EFEAC */ void setGX();
	/* 802F019C */ void loadTexture(_GXTexMapID, u32);
	/* 802F1FB8 */ void getType();
	/* 802F1FC4 */ s32 getMaxStage();
	/* 802F1FCC */ void setTexNo(u32, u16);
	/* 802F1FDC */ void getTexNo(u32) const;
	/* 802F1FEC */ void setFontNo(u16);
	/* 802F1FF4 */ void getFontNo() const;
	/* 802F1FFC */ void setTevOrder(u32, J2DTevOrder);
	/* 802F2020 */ void getTevOrder(u32);
	/* 802F2034 */ void setTevColor(u32, J2DGXColorS10);
	/* 802F2060 */ void getTevColor(u32);
	/* 802F2074 */ void setTevKColor(u32, JUtility::TColor);
	/* 802F20A0 */ void getTevKColor(u32);
	/* 802F20B4 */ void setTevKColorSel(u32, u8);
	/* 802F20C0 */ void getTevKColorSel(u32);
	/* 802F20CC */ void setTevKAlphaSel(u32, u8);
	/* 802F20D8 */ void getTevKAlphaSel(u32);
	/* 802F20E4 */ void setTevStageNum(u8);
	/* 802F20EC */ void getTevStageNum() const;
	/* 802F20F4 */ void setTevStage(u32, J2DTevStage);
	/* 802F2130 */ void getTevStage(u32);
	/* 802F2144 */ void setTevSwapModeInfo(u32, J2DTevSwapModeInfo);
	/* 802F217C */ void setTevSwapModeTable(u32, J2DTevSwapModeTable);
	/* 802F218C */ void getTevSwapModeTable(u32);
	/* 802F219C */ void setIndTevStage(u32, J2DIndTevStage);
	/* 802F21B0 */ void getIndTevStage(u32);
	/* 802F21F4 */ void getTexture(u32);
	/* 802F2214 */ void getPalette(u32);
	/* 802F2234 */ void getFont();
	/* 802F223C */ void setUndeleteFlag(u8);
	/* 802F224C */ void setFontUndeleteFlag();
};

struct J2DTevBlock16 {
	/* 802F01E4 */ J2DTevBlock16();
	/* 802F030C */ ~J2DTevBlock16();
	/* 802F03EC */ void initialize();
	/* 802F0660 */ void prepareTexture(u8);
	/* 802F1F24 */ void insertTexture(u32, ResTIMG const*);
	/* 802F0730 */ void insertTexture(u32, ResTIMG const*, JUTPalette*);
	/* 802F0AFC */ void insertTexture(u32, JUTTexture*);
	/* 802F0C8C */ void setTexture(u32, ResTIMG const*);
	/* 802F0F18 */ void setTexture(u32, JUTTexture*);
	/* 802F0FC8 */ void removeTexture(u32);
	/* 802F10C0 */ void setFont(ResFONT*);
	/* 802F116C */ void setFont(JUTFont*);
	/* 802F11E8 */ void setPalette(u32, ResTLUT const*);
	/* 802F12C0 */ void shiftDeleteFlag(u8, bool);
	/* 802F132C */ void setGX();
	/* 802F161C */ void loadTexture(_GXTexMapID, u32);
	/* 802F1D18 */ void getType();
	/* 802F1D24 */ s32 getMaxStage();
	/* 802F1D2C */ void setTexNo(u32, u16);
	/* 802F1D3C */ void getTexNo(u32) const;
	/* 802F1D4C */ void setFontNo(u16);
	/* 802F1D54 */ void getFontNo() const;
	/* 802F1D5C */ void setTevOrder(u32, J2DTevOrder);
	/* 802F1D80 */ void getTevOrder(u32);
	/* 802F1D94 */ void setTevColor(u32, J2DGXColorS10);
	/* 802F1DC0 */ void getTevColor(u32);
	/* 802F1DD4 */ void setTevKColor(u32, JUtility::TColor);
	/* 802F1E00 */ void getTevKColor(u32);
	/* 802F1E14 */ void setTevKColorSel(u32, u8);
	/* 802F1E20 */ void getTevKColorSel(u32);
	/* 802F1E2C */ void setTevKAlphaSel(u32, u8);
	/* 802F1E38 */ void getTevKAlphaSel(u32);
	/* 802F1E44 */ void setTevStageNum(u8);
	/* 802F1E4C */ void getTevStageNum() const;
	/* 802F1E54 */ void setTevStage(u32, J2DTevStage);
	/* 802F1E90 */ void getTevStage(u32);
	/* 802F1EA4 */ void setTevSwapModeInfo(u32, J2DTevSwapModeInfo);
	/* 802F1EDC */ void setTevSwapModeTable(u32, J2DTevSwapModeTable);
	/* 802F1EEC */ void getTevSwapModeTable(u32);
	/* 802F1EFC */ void setIndTevStage(u32, J2DIndTevStage);
	/* 802F1F10 */ void getIndTevStage(u32);
	/* 802F1F54 */ void getTexture(u32);
	/* 802F1F74 */ void getPalette(u32);
	/* 802F1F94 */ void getFont();
	/* 802F1F9C */ void setUndeleteFlag(u8);
	/* 802F1FAC */ void setFontUndeleteFlag();
};

struct J2DIndTexCoordScale {
	/* 802EA0CC */ void load(u8);
	/* 802EB290 */ ~J2DIndTexCoordScale();
};

struct J2DIndTexMtx {
	/* 802EA098 */ void load(u8);
	/* 802EB2E4 */ ~J2DIndTexMtx();
};

struct J2DIndTexOrder {
	/* 802EA0FC */ void load(u8);
};

struct J2DIndBlockFull {
	/* 802F1664 */ void initialize();
	/* 802F1730 */ void setGX();
	/* 802F1B94 */ void getType();
	/* 802F1BA0 */ void setIndTexStageNum(u8);
	/* 802F1BA8 */ void getIndTexStageNum() const;
	/* 802F1BB0 */ void setIndTexOrder(u32, J2DIndTexOrder);
	/* 802F1BCC */ void getIndTexOrder(u32);
	/* 802F1BE0 */ void setIndTexMtx(u32, J2DIndTexMtx);
	/* 802F1C38 */ void getIndTexMtx(u32);
	/* 802F1C4C */ void setIndTexCoordScale(u32, J2DIndTexCoordScale);
	/* 802F1C68 */ void getIndTexCoordScale(u32);
	/* 802F1C7C */ ~J2DIndBlockFull();
};

struct J2DPEBlock {
	/* 802F17FC */ void initialize();
	/* 802F1840 */ void setGX();
};

struct JKRHeap {
};

struct JUTResFont {
	/* 802DEF94 */ JUTResFont(ResFONT const*, JKRHeap*);
};

// 
// Forward References:
// 


extern "C" void initialize__13J2DColorBlockFv(); // 1
extern "C" void setGX__13J2DColorBlockFv(); // 1
extern "C" void initialize__14J2DTexGenBlockFv(); // 1
extern "C" void setGX__14J2DTexGenBlockFv(); // 1
extern "C" void __dt__14J2DTexGenBlockFv(); // 1
extern "C" void setTexMtx__14J2DTexGenBlockFUlR9J2DTexMtx(); // 1
extern "C" void getTexMtx__14J2DTexGenBlockFUlR9J2DTexMtx(); // 1
extern "C" bool getTexture__11J2DTevBlockFUl(); // 1
extern "C" bool getPalette__11J2DTevBlockFUl(); // 1
extern "C" void __ct__12J2DTevBlock1Fv(); // 1
extern "C" void __dt__12J2DTevBlock1Fv(); // 1
extern "C" void initialize__12J2DTevBlock1Fv(); // 1
extern "C" void prepareTexture__12J2DTevBlock1FUc(); // 1
extern "C" void insertTexture__12J2DTevBlock1FUlPC7ResTIMGP10JUTPalette(); // 1
extern "C" void insertTexture__12J2DTevBlock1FUlP10JUTTexture(); // 1
extern "C" void setTexture__12J2DTevBlock1FUlPC7ResTIMG(); // 1
extern "C" void setTexture__12J2DTevBlock1FUlP10JUTTexture(); // 1
extern "C" void removeTexture__12J2DTevBlock1FUl(); // 1
extern "C" void setFont__12J2DTevBlock1FP7ResFONT(); // 1
extern "C" void setFont__12J2DTevBlock1FP7JUTFont(); // 1
extern "C" void setPalette__12J2DTevBlock1FUlPC7ResTLUT(); // 1
extern "C" void shiftDeleteFlag__12J2DTevBlock1FUcb(); // 1
extern "C" void setGX__12J2DTevBlock1Fv(); // 1
extern "C" void loadTexture__12J2DTevBlock1F11_GXTexMapIDUl(); // 1
extern "C" void __ct__12J2DTevBlock2Fv(); // 1
extern "C" void __dt__12J2DTevBlock2Fv(); // 1
extern "C" void initialize__12J2DTevBlock2Fv(); // 1
extern "C" void prepareTexture__12J2DTevBlock2FUc(); // 1
extern "C" void insertTexture__12J2DTevBlock2FUlPC7ResTIMGP10JUTPalette(); // 1
extern "C" void insertTexture__12J2DTevBlock2FUlP10JUTTexture(); // 1
extern "C" void setTexture__12J2DTevBlock2FUlPC7ResTIMG(); // 1
extern "C" void setTexture__12J2DTevBlock2FUlP10JUTTexture(); // 1
extern "C" void removeTexture__12J2DTevBlock2FUl(); // 1
extern "C" void setFont__12J2DTevBlock2FP7ResFONT(); // 1
extern "C" void setFont__12J2DTevBlock2FP7JUTFont(); // 1
extern "C" void setPalette__12J2DTevBlock2FUlPC7ResTLUT(); // 1
extern "C" void shiftDeleteFlag__12J2DTevBlock2FUcb(); // 1
extern "C" void setGX__12J2DTevBlock2Fv(); // 1
extern "C" void loadTexture__12J2DTevBlock2F11_GXTexMapIDUl(); // 1
extern "C" void __ct__12J2DTevBlock4Fv(); // 1
extern "C" void __dt__12J2DTevBlock4Fv(); // 1
extern "C" void initialize__12J2DTevBlock4Fv(); // 1
extern "C" void prepareTexture__12J2DTevBlock4FUc(); // 1
extern "C" void insertTexture__12J2DTevBlock4FUlPC7ResTIMGP10JUTPalette(); // 1
extern "C" void insertTexture__12J2DTevBlock4FUlP10JUTTexture(); // 1
extern "C" void setTexture__12J2DTevBlock4FUlPC7ResTIMG(); // 1
extern "C" void setTexture__12J2DTevBlock4FUlP10JUTTexture(); // 1
extern "C" void removeTexture__12J2DTevBlock4FUl(); // 1
extern "C" void setFont__12J2DTevBlock4FP7ResFONT(); // 1
extern "C" void setFont__12J2DTevBlock4FP7JUTFont(); // 1
extern "C" void setPalette__12J2DTevBlock4FUlPC7ResTLUT(); // 1
extern "C" void shiftDeleteFlag__12J2DTevBlock4FUcb(); // 1
extern "C" void setGX__12J2DTevBlock4Fv(); // 1
extern "C" void loadTexture__12J2DTevBlock4F11_GXTexMapIDUl(); // 1
extern "C" void __ct__12J2DTevBlock8Fv(); // 1
extern "C" void __dt__12J2DTevBlock8Fv(); // 1
extern "C" void initialize__12J2DTevBlock8Fv(); // 1
extern "C" void prepareTexture__12J2DTevBlock8FUc(); // 1
extern "C" void insertTexture__12J2DTevBlock8FUlPC7ResTIMGP10JUTPalette(); // 1
extern "C" void insertTexture__12J2DTevBlock8FUlP10JUTTexture(); // 1
extern "C" void setTexture__12J2DTevBlock8FUlPC7ResTIMG(); // 1
extern "C" void setTexture__12J2DTevBlock8FUlP10JUTTexture(); // 1
extern "C" void removeTexture__12J2DTevBlock8FUl(); // 1
extern "C" void setFont__12J2DTevBlock8FP7ResFONT(); // 1
extern "C" void setFont__12J2DTevBlock8FP7JUTFont(); // 1
extern "C" void setPalette__12J2DTevBlock8FUlPC7ResTLUT(); // 1
extern "C" void shiftDeleteFlag__12J2DTevBlock8FUcb(); // 1
extern "C" void setGX__12J2DTevBlock8Fv(); // 1
extern "C" void loadTexture__12J2DTevBlock8F11_GXTexMapIDUl(); // 1
extern "C" void __ct__13J2DTevBlock16Fv(); // 1
extern "C" void __dt__13J2DTevBlock16Fv(); // 1
extern "C" void initialize__13J2DTevBlock16Fv(); // 1
extern "C" void prepareTexture__13J2DTevBlock16FUc(); // 1
extern "C" void insertTexture__13J2DTevBlock16FUlPC7ResTIMGP10JUTPalette(); // 1
extern "C" void insertTexture__13J2DTevBlock16FUlP10JUTTexture(); // 1
extern "C" void setTexture__13J2DTevBlock16FUlPC7ResTIMG(); // 1
extern "C" void setTexture__13J2DTevBlock16FUlP10JUTTexture(); // 1
extern "C" void removeTexture__13J2DTevBlock16FUl(); // 1
extern "C" void setFont__13J2DTevBlock16FP7ResFONT(); // 1
extern "C" void setFont__13J2DTevBlock16FP7JUTFont(); // 1
extern "C" void setPalette__13J2DTevBlock16FUlPC7ResTLUT(); // 1
extern "C" void shiftDeleteFlag__13J2DTevBlock16FUcb(); // 1
extern "C" void setGX__13J2DTevBlock16Fv(); // 1
extern "C" void loadTexture__13J2DTevBlock16F11_GXTexMapIDUl(); // 1
extern "C" void initialize__15J2DIndBlockFullFv(); // 1
extern "C" void setGX__15J2DIndBlockFullFv(); // 1
extern "C" void initialize__10J2DPEBlockFv(); // 1
extern "C" void setGX__10J2DPEBlockFv(); // 1
extern "C" void __ct__14J2DIndTevStageFv(); // 1
extern "C" void __ct__19J2DTevSwapModeTableFv(); // 1
extern "C" void __ct__11J2DTevStageFv(); // 1
extern "C" void setTevStageInfo__11J2DTevStageFRC15J2DTevStageInfo(); // 1
extern "C" void __ct__11J2DTevOrderFv(); // 1
extern "C" void __ct__13J2DGXColorS10Fv(); // 1
extern "C" void getType__15J2DIndBlockFullFv(); // 1
extern "C" void setIndTexStageNum__15J2DIndBlockFullFUc(); // 1
extern "C" void getIndTexStageNum__15J2DIndBlockFullCFv(); // 1
extern "C" void setIndTexOrder__15J2DIndBlockFullFUl14J2DIndTexOrder(); // 1
extern "C" void getIndTexOrder__15J2DIndBlockFullFUl(); // 1
extern "C" void setIndTexMtx__15J2DIndBlockFullFUl12J2DIndTexMtx(); // 1
extern "C" void getIndTexMtx__15J2DIndBlockFullFUl(); // 1
extern "C" void setIndTexCoordScale__15J2DIndBlockFullFUl19J2DIndTexCoordScale(); // 1
extern "C" void getIndTexCoordScale__15J2DIndBlockFullFUl(); // 1
extern "C" void __dt__15J2DIndBlockFullFv(); // 1
extern "C" void getType__13J2DTevBlock16Fv(); // 1
extern "C" s32 getMaxStage__13J2DTevBlock16Fv(); // 1
extern "C" void setTexNo__13J2DTevBlock16FUlUs(); // 1
extern "C" void getTexNo__13J2DTevBlock16CFUl(); // 1
extern "C" void setFontNo__13J2DTevBlock16FUs(); // 1
extern "C" void getFontNo__13J2DTevBlock16CFv(); // 1
extern "C" void setTevOrder__13J2DTevBlock16FUl11J2DTevOrder(); // 1
extern "C" void getTevOrder__13J2DTevBlock16FUl(); // 1
extern "C" void setTevColor__13J2DTevBlock16FUl13J2DGXColorS10(); // 1
extern "C" void getTevColor__13J2DTevBlock16FUl(); // 1
extern "C" void setTevKColor__13J2DTevBlock16FUlQ28JUtility6TColor(); // 1
extern "C" void getTevKColor__13J2DTevBlock16FUl(); // 1
extern "C" void setTevKColorSel__13J2DTevBlock16FUlUc(); // 1
extern "C" void getTevKColorSel__13J2DTevBlock16FUl(); // 1
extern "C" void setTevKAlphaSel__13J2DTevBlock16FUlUc(); // 1
extern "C" void getTevKAlphaSel__13J2DTevBlock16FUl(); // 1
extern "C" void setTevStageNum__13J2DTevBlock16FUc(); // 1
extern "C" void getTevStageNum__13J2DTevBlock16CFv(); // 1
extern "C" void setTevStage__13J2DTevBlock16FUl11J2DTevStage(); // 1
extern "C" void getTevStage__13J2DTevBlock16FUl(); // 1
extern "C" void setTevSwapModeInfo__13J2DTevBlock16FUl18J2DTevSwapModeInfo(); // 1
extern "C" void setTevSwapModeTable__13J2DTevBlock16FUl19J2DTevSwapModeTable(); // 1
extern "C" void getTevSwapModeTable__13J2DTevBlock16FUl(); // 1
extern "C" void setIndTevStage__13J2DTevBlock16FUl14J2DIndTevStage(); // 1
extern "C" void getIndTevStage__13J2DTevBlock16FUl(); // 1
extern "C" void insertTexture__13J2DTevBlock16FUlPC7ResTIMG(); // 1
extern "C" void getTexture__13J2DTevBlock16FUl(); // 1
extern "C" void getPalette__13J2DTevBlock16FUl(); // 1
extern "C" void getFont__13J2DTevBlock16Fv(); // 1
extern "C" void setUndeleteFlag__13J2DTevBlock16FUc(); // 1
extern "C" void setFontUndeleteFlag__13J2DTevBlock16Fv(); // 1
extern "C" void getType__12J2DTevBlock8Fv(); // 1
extern "C" s32 getMaxStage__12J2DTevBlock8Fv(); // 1
extern "C" void setTexNo__12J2DTevBlock8FUlUs(); // 1
extern "C" void getTexNo__12J2DTevBlock8CFUl(); // 1
extern "C" void setFontNo__12J2DTevBlock8FUs(); // 1
extern "C" void getFontNo__12J2DTevBlock8CFv(); // 1
extern "C" void setTevOrder__12J2DTevBlock8FUl11J2DTevOrder(); // 1
extern "C" void getTevOrder__12J2DTevBlock8FUl(); // 1
extern "C" void setTevColor__12J2DTevBlock8FUl13J2DGXColorS10(); // 1
extern "C" void getTevColor__12J2DTevBlock8FUl(); // 1
extern "C" void setTevKColor__12J2DTevBlock8FUlQ28JUtility6TColor(); // 1
extern "C" void getTevKColor__12J2DTevBlock8FUl(); // 1
extern "C" void setTevKColorSel__12J2DTevBlock8FUlUc(); // 1
extern "C" void getTevKColorSel__12J2DTevBlock8FUl(); // 1
extern "C" void setTevKAlphaSel__12J2DTevBlock8FUlUc(); // 1
extern "C" void getTevKAlphaSel__12J2DTevBlock8FUl(); // 1
extern "C" void setTevStageNum__12J2DTevBlock8FUc(); // 1
extern "C" void getTevStageNum__12J2DTevBlock8CFv(); // 1
extern "C" void setTevStage__12J2DTevBlock8FUl11J2DTevStage(); // 1
extern "C" void getTevStage__12J2DTevBlock8FUl(); // 1
extern "C" void setTevSwapModeInfo__12J2DTevBlock8FUl18J2DTevSwapModeInfo(); // 1
extern "C" void setTevSwapModeTable__12J2DTevBlock8FUl19J2DTevSwapModeTable(); // 1
extern "C" void getTevSwapModeTable__12J2DTevBlock8FUl(); // 1
extern "C" void setIndTevStage__12J2DTevBlock8FUl14J2DIndTevStage(); // 1
extern "C" void getIndTevStage__12J2DTevBlock8FUl(); // 1
extern "C" void insertTexture__12J2DTevBlock8FUlPC7ResTIMG(); // 1
extern "C" void getTexture__12J2DTevBlock8FUl(); // 1
extern "C" void getPalette__12J2DTevBlock8FUl(); // 1
extern "C" void getFont__12J2DTevBlock8Fv(); // 1
extern "C" void setUndeleteFlag__12J2DTevBlock8FUc(); // 1
extern "C" void setFontUndeleteFlag__12J2DTevBlock8Fv(); // 1
extern "C" void getType__12J2DTevBlock4Fv(); // 1
extern "C" s32 getMaxStage__12J2DTevBlock4Fv(); // 1
extern "C" void setTexNo__12J2DTevBlock4FUlUs(); // 1
extern "C" void getTexNo__12J2DTevBlock4CFUl(); // 1
extern "C" void setFontNo__12J2DTevBlock4FUs(); // 1
extern "C" void getFontNo__12J2DTevBlock4CFv(); // 1
extern "C" void setTevOrder__12J2DTevBlock4FUl11J2DTevOrder(); // 1
extern "C" void getTevOrder__12J2DTevBlock4FUl(); // 1
extern "C" void setTevColor__12J2DTevBlock4FUl13J2DGXColorS10(); // 1
extern "C" void getTevColor__12J2DTevBlock4FUl(); // 1
extern "C" void setTevKColor__12J2DTevBlock4FUlQ28JUtility6TColor(); // 1
extern "C" void getTevKColor__12J2DTevBlock4FUl(); // 1
extern "C" void setTevKColorSel__12J2DTevBlock4FUlUc(); // 1
extern "C" void getTevKColorSel__12J2DTevBlock4FUl(); // 1
extern "C" void setTevKAlphaSel__12J2DTevBlock4FUlUc(); // 1
extern "C" void getTevKAlphaSel__12J2DTevBlock4FUl(); // 1
extern "C" void setTevStageNum__12J2DTevBlock4FUc(); // 1
extern "C" void getTevStageNum__12J2DTevBlock4CFv(); // 1
extern "C" void setTevStage__12J2DTevBlock4FUl11J2DTevStage(); // 1
extern "C" void getTevStage__12J2DTevBlock4FUl(); // 1
extern "C" void setTevSwapModeInfo__12J2DTevBlock4FUl18J2DTevSwapModeInfo(); // 1
extern "C" void setTevSwapModeTable__12J2DTevBlock4FUl19J2DTevSwapModeTable(); // 1
extern "C" void getTevSwapModeTable__12J2DTevBlock4FUl(); // 1
extern "C" void setIndTevStage__12J2DTevBlock4FUl14J2DIndTevStage(); // 1
extern "C" void getIndTevStage__12J2DTevBlock4FUl(); // 1
extern "C" void insertTexture__12J2DTevBlock4FUlPC7ResTIMG(); // 1
extern "C" void getTexture__12J2DTevBlock4FUl(); // 1
extern "C" void getPalette__12J2DTevBlock4FUl(); // 1
extern "C" void getFont__12J2DTevBlock4Fv(); // 1
extern "C" void setUndeleteFlag__12J2DTevBlock4FUc(); // 1
extern "C" void setFontUndeleteFlag__12J2DTevBlock4Fv(); // 1
extern "C" void getType__12J2DTevBlock2Fv(); // 1
extern "C" s32 getMaxStage__12J2DTevBlock2Fv(); // 1
extern "C" void setTexNo__12J2DTevBlock2FUlUs(); // 1
extern "C" void getTexNo__12J2DTevBlock2CFUl(); // 1
extern "C" void setFontNo__12J2DTevBlock2FUs(); // 1
extern "C" void getFontNo__12J2DTevBlock2CFv(); // 1
extern "C" void setTevOrder__12J2DTevBlock2FUl11J2DTevOrder(); // 1
extern "C" void getTevOrder__12J2DTevBlock2FUl(); // 1
extern "C" void setTevColor__12J2DTevBlock2FUl13J2DGXColorS10(); // 1
extern "C" void getTevColor__12J2DTevBlock2FUl(); // 1
extern "C" void setTevKColor__12J2DTevBlock2FUlQ28JUtility6TColor(); // 1
extern "C" void getTevKColor__12J2DTevBlock2FUl(); // 1
extern "C" void setTevKColorSel__12J2DTevBlock2FUlUc(); // 1
extern "C" void getTevKColorSel__12J2DTevBlock2FUl(); // 1
extern "C" void setTevKAlphaSel__12J2DTevBlock2FUlUc(); // 1
extern "C" void getTevKAlphaSel__12J2DTevBlock2FUl(); // 1
extern "C" void setTevStageNum__12J2DTevBlock2FUc(); // 1
extern "C" void getTevStageNum__12J2DTevBlock2CFv(); // 1
extern "C" void setTevStage__12J2DTevBlock2FUl11J2DTevStage(); // 1
extern "C" void getTevStage__12J2DTevBlock2FUl(); // 1
extern "C" void setTevSwapModeInfo__12J2DTevBlock2FUl18J2DTevSwapModeInfo(); // 1
extern "C" void setTevSwapModeTable__12J2DTevBlock2FUl19J2DTevSwapModeTable(); // 1
extern "C" void getTevSwapModeTable__12J2DTevBlock2FUl(); // 1
extern "C" void setIndTevStage__12J2DTevBlock2FUl14J2DIndTevStage(); // 1
extern "C" void getIndTevStage__12J2DTevBlock2FUl(); // 1
extern "C" void insertTexture__12J2DTevBlock2FUlPC7ResTIMG(); // 1
extern "C" void getTexture__12J2DTevBlock2FUl(); // 1
extern "C" void getPalette__12J2DTevBlock2FUl(); // 1
extern "C" void getFont__12J2DTevBlock2Fv(); // 1
extern "C" void setUndeleteFlag__12J2DTevBlock2FUc(); // 1
extern "C" void setFontUndeleteFlag__12J2DTevBlock2Fv(); // 1
extern "C" void getType__12J2DTevBlock1Fv(); // 1
extern "C" bool getMaxStage__12J2DTevBlock1Fv(); // 1
extern "C" void setTexNo__12J2DTevBlock1FUlUs(); // 1
extern "C" void getTexNo__12J2DTevBlock1CFUl(); // 1
extern "C" void setFontNo__12J2DTevBlock1FUs(); // 1
extern "C" void getFontNo__12J2DTevBlock1CFv(); // 1
extern "C" void setTevOrder__12J2DTevBlock1FUl11J2DTevOrder(); // 1
extern "C" void getTevOrder__12J2DTevBlock1FUl(); // 1
extern "C" void setTevColor__12J2DTevBlock1FUl13J2DGXColorS10(); // 1
extern "C" void getTevColor__12J2DTevBlock1FUl(); // 1
extern "C" void setTevKColor__12J2DTevBlock1FUlQ28JUtility6TColor(); // 1
extern "C" void getTevKColor__12J2DTevBlock1FUl(); // 1
extern "C" void setTevKColorSel__12J2DTevBlock1FUlUc(); // 1
extern "C" void getTevKColorSel__12J2DTevBlock1FUl(); // 1
extern "C" void setTevKAlphaSel__12J2DTevBlock1FUlUc(); // 1
extern "C" void getTevKAlphaSel__12J2DTevBlock1FUl(); // 1
extern "C" void setTevStageNum__12J2DTevBlock1FUc(); // 1
extern "C" bool getTevStageNum__12J2DTevBlock1CFv(); // 1
extern "C" void setTevStage__12J2DTevBlock1FUl11J2DTevStage(); // 1
extern "C" void getTevStage__12J2DTevBlock1FUl(); // 1
extern "C" void setTevSwapModeInfo__12J2DTevBlock1FUl18J2DTevSwapModeInfo(); // 1
extern "C" void setTevSwapModeTable__12J2DTevBlock1FUl19J2DTevSwapModeTable(); // 1
extern "C" void getTevSwapModeTable__12J2DTevBlock1FUl(); // 1
extern "C" void setIndTevStage__12J2DTevBlock1FUl14J2DIndTevStage(); // 1
extern "C" void getIndTevStage__12J2DTevBlock1FUl(); // 1
extern "C" void insertTexture__12J2DTevBlock1FUlPC7ResTIMG(); // 1
extern "C" void getTexture__12J2DTevBlock1FUl(); // 1
extern "C" void getPalette__12J2DTevBlock1FUl(); // 1
extern "C" void getFont__12J2DTevBlock1Fv(); // 1
extern "C" void setUndeleteFlag__12J2DTevBlock1FUc(); // 1
extern "C" void setFontUndeleteFlag__12J2DTevBlock1Fv(); // 1
extern "C" void initialize__11J2DTevBlockFv(); // 1
extern "C" void loadTexture__11J2DTevBlockF11_GXTexMapIDUl(); // 1
extern "C" void setFontNo__11J2DTevBlockFUs(); // 1
extern "C" void setTevOrder__11J2DTevBlockFUl11J2DTevOrder(); // 1
extern "C" void setTevKColorSel__11J2DTevBlockFUlUc(); // 1
extern "C" void setTevKAlphaSel__11J2DTevBlockFUlUc(); // 1
extern "C" void setTevStageNum__11J2DTevBlockFUc(); // 1
extern "C" void setTevStage__11J2DTevBlockFUl11J2DTevStage(); // 1
extern "C" void setTevSwapModeInfo__11J2DTevBlockFUl18J2DTevSwapModeInfo(); // 1
extern "C" void setTevSwapModeTable__11J2DTevBlockFUl19J2DTevSwapModeTable(); // 1
extern "C" void setIndTevStage__11J2DTevBlockFUl14J2DIndTevStage(); // 1
extern "C" bool insertTexture__11J2DTevBlockFUlP10JUTTexture(); // 1
extern "C" bool insertTexture__11J2DTevBlockFUlPC7ResTIMGP10JUTPalette(); // 1
extern "C" bool insertTexture__11J2DTevBlockFUlPC7ResTIMG(); // 1
extern "C" bool setTexture__11J2DTevBlockFUlP10JUTTexture(); // 1
extern "C" bool setTexture__11J2DTevBlockFUlPC7ResTIMG(); // 1
extern "C" bool removeTexture__11J2DTevBlockFUl(); // 1
extern "C" bool setFont__11J2DTevBlockFP7JUTFont(); // 1
extern "C" bool setFont__11J2DTevBlockFP7ResFONT(); // 1
extern "C" bool setPalette__11J2DTevBlockFUlPC7ResTLUT(); // 1
extern "C" bool prepareTexture__11J2DTevBlockFUc(); // 1
extern "C" bool getFont__11J2DTevBlockFv(); // 1
extern "C" void shiftDeleteFlag__11J2DTevBlockFUcb(); // 1
extern "C" void setUndeleteFlag__11J2DTevBlockFUc(); // 1
extern "C" void setFontUndeleteFlag__11J2DTevBlockFv(); // 1
extern "C" extern void* __vt__15J2DIndBlockFull[14];
extern "C" extern void* __vt__11J2DTevBlock[47];
extern "C" extern void* __vt__14J2DTexGenBlock[3 + 1 /* padding */];

// 
// External References:
// 

void* operator new(u32); // 2
void operator delete(void*); // 2
extern "C" void GXSetTexCoordGen2(); // 1
extern "C" void GXSetNumTexGens(); // 1
extern "C" void GXSetCullMode(); // 1
extern "C" void GXSetChanMatColor(); // 1
extern "C" void GXSetNumChans(); // 1
extern "C" void GXSetChanCtrl(); // 1
extern "C" void GXSetNumIndStages(); // 1
extern "C" void GXSetTevColorIn(); // 1
extern "C" void GXSetTevAlphaIn(); // 1
extern "C" void GXSetTevColorOp(); // 1
extern "C" void GXSetTevAlphaOp(); // 1
extern "C" void GXSetTevColorS10(); // 1
extern "C" void GXSetTevKColor(); // 1
extern "C" void GXSetTevKColorSel(); // 1
extern "C" void GXSetTevKAlphaSel(); // 1
extern "C" void GXSetTevSwapMode(); // 1
extern "C" void GXSetTevSwapModeTable(); // 1
extern "C" void GXSetAlphaCompare(); // 1
extern "C" void GXSetTevOrder(); // 1
extern "C" void GXSetNumTevStages(); // 1
extern "C" void GXSetBlendMode(); // 1
extern "C" void GXSetDither(); // 1
extern "C" void __destroy_arr(); // 1
extern "C" void __construct_array(); // 1
extern "C" void _savegpr_25(); // 1
extern "C" void _savegpr_26(); // 1
extern "C" void _savegpr_27(); // 1
extern "C" void _savegpr_28(); // 1
extern "C" void _savegpr_29(); // 1
extern "C" void _restgpr_25(); // 1
extern "C" void _restgpr_26(); // 1
extern "C" void _restgpr_27(); // 1
extern "C" void _restgpr_28(); // 1
extern "C" void _restgpr_29(); // 1

extern "C" void __ct__Q28JUtility6TColorFv(); // 1
extern "C" void* __nw__FUl(); // 1
extern "C" void __dl__FPv(); // 1
extern "C" void __dt__10JUTTextureFv(); // 1
extern "C" void storeTIMG__10JUTTextureFPC7ResTIMGUc(); // 1
extern "C" void storeTIMG__10JUTTextureFPC7ResTIMGP10JUTPalette(); // 1
extern "C" void attachPalette__10JUTTextureFP10JUTPalette(); // 1
extern "C" void load__10JUTTextureF11_GXTexMapID(); // 1
extern "C" void storeTLUT__10JUTPaletteF7_GXTlutP7ResTLUT(); // 1
extern "C" void __ct__10JUTResFontFPC7ResFONTP7JKRHeap(); // 1
extern "C" void load__9J2DTexMtxFUl(); // 1
extern "C" void calc__9J2DTexMtxFv(); // 1
extern "C" void load__14J2DIndTevStageFUc(); // 1
extern "C" void load__12J2DIndTexMtxFUc(); // 1
extern "C" void load__19J2DIndTexCoordScaleFUc(); // 1
extern "C" void load__14J2DIndTexOrderFUc(); // 1
extern "C" bool getTevSwapModeTable__11J2DTevBlockFUl(); // 1
extern "C" bool getTevStage__11J2DTevBlockFUl(); // 1
extern "C" bool getTevColor__11J2DTevBlockFUl(); // 1
extern "C" bool getTevOrder__11J2DTevBlockFUl(); // 1
extern "C" bool getTevKAlphaSel__11J2DTevBlockFUl(); // 1
extern "C" bool getTevKColorSel__11J2DTevBlockFUl(); // 1
extern "C" bool getTevKColor__11J2DTevBlockFUl(); // 1
extern "C" void getFontNo__11J2DTevBlockCFv(); // 1
extern "C" void getTexNo__11J2DTevBlockCFUl(); // 1
extern "C" bool getTevStageNum__11J2DTevBlockCFv(); // 1
extern "C" bool getIndTevStage__11J2DTevBlockFUl(); // 1
extern "C" void __dt__11J2DTevBlockFv(); // 1
extern "C" void setGX__11J2DTevBlockFv(); // 1
extern "C" void setTevKColor__11J2DTevBlockFUlQ28JUtility6TColor(); // 1
extern "C" void setTevColor__11J2DTevBlockFUl13J2DGXColorS10(); // 1
extern "C" void setTexNo__11J2DTevBlockFUlUs(); // 1
extern "C" void __dt__19J2DIndTexCoordScaleFv(); // 1
extern "C" void __dt__12J2DIndTexMtxFv(); // 1
extern "C" void GXSetTexCoordGen2(); // 1
extern "C" void GXSetNumTexGens(); // 1
extern "C" void GXSetCullMode(); // 1
extern "C" void GXSetChanMatColor(); // 1
extern "C" void GXSetNumChans(); // 1
extern "C" void GXSetChanCtrl(); // 1
extern "C" void GXSetNumIndStages(); // 1
extern "C" void GXSetTevColorIn(); // 1
extern "C" void GXSetTevAlphaIn(); // 1
extern "C" void GXSetTevColorOp(); // 1
extern "C" void GXSetTevAlphaOp(); // 1
extern "C" void GXSetTevColorS10(); // 1
extern "C" void GXSetTevKColor(); // 1
extern "C" void GXSetTevKColorSel(); // 1
extern "C" void GXSetTevKAlphaSel(); // 1
extern "C" void GXSetTevSwapMode(); // 1
extern "C" void GXSetTevSwapModeTable(); // 1
extern "C" void GXSetAlphaCompare(); // 1
extern "C" void GXSetTevOrder(); // 1
extern "C" void GXSetNumTevStages(); // 1
extern "C" void GXSetBlendMode(); // 1
extern "C" void GXSetDither(); // 1
extern "C" void __destroy_arr(); // 1
extern "C" void __construct_array(); // 1
extern "C" void _savegpr_25(); // 1
extern "C" void _savegpr_26(); // 1
extern "C" void _savegpr_27(); // 1
extern "C" void _savegpr_28(); // 1
extern "C" void _savegpr_29(); // 1
extern "C" void _restgpr_25(); // 1
extern "C" void _restgpr_26(); // 1
extern "C" void _restgpr_27(); // 1
extern "C" void _restgpr_28(); // 1
extern "C" void _restgpr_29(); // 1
extern "C" extern u8 const j2dDefaultTexCoordInfo[32];
extern "C" extern u8 const j2dDefaultIndTexMtxInfo[28];
extern "C" extern u8 const j2dDefaultTevStageInfo[20];
extern "C" extern u8 const j2dDefaultIndTevStageInfo[12];
extern "C" extern void* __vt__11J2DIndBlock[14];
extern "C" extern u32 j2dDefaultColInfo;
extern "C" extern u32 j2dDefaultTevOrderInfoNull;
extern "C" extern u16 j2dDefaultIndTexOrderNull[1 + 1 /* padding */];
extern "C" extern u8 j2dDefaultTevColor[8];
extern "C" extern u8 j2dDefaultIndTexCoordScaleInfo[2 + 2 /* padding */];
extern "C" extern u32 j2dDefaultTevKColor;
extern "C" extern u8 j2dDefaultTevSwapMode[4];
extern "C" extern u32 j2dDefaultTevSwapModeTable;
extern "C" extern u32 j2dDefaultBlendInfo;
extern "C" extern u8 data_804561A4[4];
extern "C" extern u32 j2dDefaultColorChanInfo;
extern "C" extern u8 struct_804561AC[4];

// 
// Declarations:
// 

/* 802EB394-802EB424 0090+00 rc=1 efc=1 rfr=False None .text      initialize__13J2DColorBlockFv                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DColorBlock::initialize() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/initialize__13J2DColorBlockFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 803A1C00-803A1C10 0010+00 rc=1 efc=0 rfr=False None .rodata    @1463                                                        */
SECTION_RODATA static u8 const J2DMatBlock__lit_1463[16] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03,
};

/* 802EB424-802EB510 00EC+00 rc=1 efc=1 rfr=False None .text      setGX__13J2DColorBlockFv                                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DColorBlock::setGX() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setGX__13J2DColorBlockFv.s"
}
#pragma pop


/* 802EB510-802EB570 0060+00 rc=1 efc=1 rfr=False None .text      initialize__14J2DTexGenBlockFv                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTexGenBlock::initialize() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/initialize__14J2DTexGenBlockFv.s"
}
#pragma pop


/* 802EB570-802EB620 00B0+00 rc=1 efc=1 rfr=False None .text      setGX__14J2DTexGenBlockFv                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTexGenBlock::setGX() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setGX__14J2DTexGenBlockFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 803CCA90-803CCAC8 0038+00 rc=2 efc=1 rfr=False None .data      __vt__15J2DIndBlockFull                                      */
SECTION_DATA void* __vt__15J2DIndBlockFull[14] = {
	/* 0    */ (void*)NULL /* RTTI */,
	/* 1    */ (void*)NULL,
	/* 2    */ (void*)initialize__15J2DIndBlockFullFv,
	/* 3    */ (void*)setGX__15J2DIndBlockFullFv,
	/* 4    */ (void*)getType__15J2DIndBlockFullFv,
	/* 5    */ (void*)setIndTexStageNum__15J2DIndBlockFullFUc,
	/* 6    */ (void*)getIndTexStageNum__15J2DIndBlockFullCFv,
	/* 7    */ (void*)setIndTexOrder__15J2DIndBlockFullFUl14J2DIndTexOrder,
	/* 8    */ (void*)getIndTexOrder__15J2DIndBlockFullFUl,
	/* 9    */ (void*)setIndTexMtx__15J2DIndBlockFullFUl12J2DIndTexMtx,
	/* 10   */ (void*)getIndTexMtx__15J2DIndBlockFullFUl,
	/* 11   */ (void*)setIndTexCoordScale__15J2DIndBlockFullFUl19J2DIndTexCoordScale,
	/* 12   */ (void*)getIndTexCoordScale__15J2DIndBlockFullFUl,
	/* 13   */ (void*)__dt__15J2DIndBlockFullFv,
};

/* 803CCAC8-803CCB84 00BC+00 rc=2 efc=0 rfr=False None .data      __vt__13J2DTevBlock16                                        */
SECTION_DATA static void* __vt__13J2DTevBlock16[47] = {
	/* 0    */ (void*)NULL /* RTTI */,
	/* 1    */ (void*)NULL,
	/* 2    */ (void*)initialize__13J2DTevBlock16Fv,
	/* 3    */ (void*)setGX__13J2DTevBlock16Fv,
	/* 4    */ (void*)loadTexture__13J2DTevBlock16F11_GXTexMapIDUl,
	/* 5    */ (void*)getType__13J2DTevBlock16Fv,
	/* 6    */ (void*)getMaxStage__13J2DTevBlock16Fv,
	/* 7    */ (void*)setTexNo__13J2DTevBlock16FUlUs,
	/* 8    */ (void*)getTexNo__13J2DTevBlock16CFUl,
	/* 9    */ (void*)setFontNo__13J2DTevBlock16FUs,
	/* 10   */ (void*)getFontNo__13J2DTevBlock16CFv,
	/* 11   */ (void*)setTevOrder__13J2DTevBlock16FUl11J2DTevOrder,
	/* 12   */ (void*)getTevOrder__13J2DTevBlock16FUl,
	/* 13   */ (void*)setTevColor__13J2DTevBlock16FUl13J2DGXColorS10,
	/* 14   */ (void*)getTevColor__13J2DTevBlock16FUl,
	/* 15   */ (void*)setTevKColor__13J2DTevBlock16FUlQ28JUtility6TColor,
	/* 16   */ (void*)getTevKColor__13J2DTevBlock16FUl,
	/* 17   */ (void*)setTevKColorSel__13J2DTevBlock16FUlUc,
	/* 18   */ (void*)getTevKColorSel__13J2DTevBlock16FUl,
	/* 19   */ (void*)setTevKAlphaSel__13J2DTevBlock16FUlUc,
	/* 20   */ (void*)getTevKAlphaSel__13J2DTevBlock16FUl,
	/* 21   */ (void*)setTevStageNum__13J2DTevBlock16FUc,
	/* 22   */ (void*)getTevStageNum__13J2DTevBlock16CFv,
	/* 23   */ (void*)setTevStage__13J2DTevBlock16FUl11J2DTevStage,
	/* 24   */ (void*)getTevStage__13J2DTevBlock16FUl,
	/* 25   */ (void*)setTevSwapModeInfo__13J2DTevBlock16FUl18J2DTevSwapModeInfo,
	/* 26   */ (void*)setTevSwapModeTable__13J2DTevBlock16FUl19J2DTevSwapModeTable,
	/* 27   */ (void*)getTevSwapModeTable__13J2DTevBlock16FUl,
	/* 28   */ (void*)setIndTevStage__13J2DTevBlock16FUl14J2DIndTevStage,
	/* 29   */ (void*)getIndTevStage__13J2DTevBlock16FUl,
	/* 30   */ (void*)insertTexture__13J2DTevBlock16FUlPC7ResTIMG,
	/* 31   */ (void*)insertTexture__13J2DTevBlock16FUlPC7ResTIMGP10JUTPalette,
	/* 32   */ (void*)insertTexture__13J2DTevBlock16FUlP10JUTTexture,
	/* 33   */ (void*)setTexture__13J2DTevBlock16FUlPC7ResTIMG,
	/* 34   */ (void*)setTexture__13J2DTevBlock16FUlP10JUTTexture,
	/* 35   */ (void*)removeTexture__13J2DTevBlock16FUl,
	/* 36   */ (void*)setFont__13J2DTevBlock16FP7ResFONT,
	/* 37   */ (void*)setFont__13J2DTevBlock16FP7JUTFont,
	/* 38   */ (void*)setPalette__13J2DTevBlock16FUlPC7ResTLUT,
	/* 39   */ (void*)prepareTexture__13J2DTevBlock16FUc,
	/* 40   */ (void*)getTexture__13J2DTevBlock16FUl,
	/* 41   */ (void*)getPalette__13J2DTevBlock16FUl,
	/* 42   */ (void*)getFont__13J2DTevBlock16Fv,
	/* 43   */ (void*)shiftDeleteFlag__13J2DTevBlock16FUcb,
	/* 44   */ (void*)setUndeleteFlag__13J2DTevBlock16FUc,
	/* 45   */ (void*)setFontUndeleteFlag__13J2DTevBlock16Fv,
	/* 46   */ (void*)__dt__13J2DTevBlock16Fv,
};

/* 803CCB84-803CCC40 00BC+00 rc=2 efc=0 rfr=False None .data      __vt__12J2DTevBlock8                                         */
SECTION_DATA static void* __vt__12J2DTevBlock8[47] = {
	/* 0    */ (void*)NULL /* RTTI */,
	/* 1    */ (void*)NULL,
	/* 2    */ (void*)initialize__12J2DTevBlock8Fv,
	/* 3    */ (void*)setGX__12J2DTevBlock8Fv,
	/* 4    */ (void*)loadTexture__12J2DTevBlock8F11_GXTexMapIDUl,
	/* 5    */ (void*)getType__12J2DTevBlock8Fv,
	/* 6    */ (void*)getMaxStage__12J2DTevBlock8Fv,
	/* 7    */ (void*)setTexNo__12J2DTevBlock8FUlUs,
	/* 8    */ (void*)getTexNo__12J2DTevBlock8CFUl,
	/* 9    */ (void*)setFontNo__12J2DTevBlock8FUs,
	/* 10   */ (void*)getFontNo__12J2DTevBlock8CFv,
	/* 11   */ (void*)setTevOrder__12J2DTevBlock8FUl11J2DTevOrder,
	/* 12   */ (void*)getTevOrder__12J2DTevBlock8FUl,
	/* 13   */ (void*)setTevColor__12J2DTevBlock8FUl13J2DGXColorS10,
	/* 14   */ (void*)getTevColor__12J2DTevBlock8FUl,
	/* 15   */ (void*)setTevKColor__12J2DTevBlock8FUlQ28JUtility6TColor,
	/* 16   */ (void*)getTevKColor__12J2DTevBlock8FUl,
	/* 17   */ (void*)setTevKColorSel__12J2DTevBlock8FUlUc,
	/* 18   */ (void*)getTevKColorSel__12J2DTevBlock8FUl,
	/* 19   */ (void*)setTevKAlphaSel__12J2DTevBlock8FUlUc,
	/* 20   */ (void*)getTevKAlphaSel__12J2DTevBlock8FUl,
	/* 21   */ (void*)setTevStageNum__12J2DTevBlock8FUc,
	/* 22   */ (void*)getTevStageNum__12J2DTevBlock8CFv,
	/* 23   */ (void*)setTevStage__12J2DTevBlock8FUl11J2DTevStage,
	/* 24   */ (void*)getTevStage__12J2DTevBlock8FUl,
	/* 25   */ (void*)setTevSwapModeInfo__12J2DTevBlock8FUl18J2DTevSwapModeInfo,
	/* 26   */ (void*)setTevSwapModeTable__12J2DTevBlock8FUl19J2DTevSwapModeTable,
	/* 27   */ (void*)getTevSwapModeTable__12J2DTevBlock8FUl,
	/* 28   */ (void*)setIndTevStage__12J2DTevBlock8FUl14J2DIndTevStage,
	/* 29   */ (void*)getIndTevStage__12J2DTevBlock8FUl,
	/* 30   */ (void*)insertTexture__12J2DTevBlock8FUlPC7ResTIMG,
	/* 31   */ (void*)insertTexture__12J2DTevBlock8FUlPC7ResTIMGP10JUTPalette,
	/* 32   */ (void*)insertTexture__12J2DTevBlock8FUlP10JUTTexture,
	/* 33   */ (void*)setTexture__12J2DTevBlock8FUlPC7ResTIMG,
	/* 34   */ (void*)setTexture__12J2DTevBlock8FUlP10JUTTexture,
	/* 35   */ (void*)removeTexture__12J2DTevBlock8FUl,
	/* 36   */ (void*)setFont__12J2DTevBlock8FP7ResFONT,
	/* 37   */ (void*)setFont__12J2DTevBlock8FP7JUTFont,
	/* 38   */ (void*)setPalette__12J2DTevBlock8FUlPC7ResTLUT,
	/* 39   */ (void*)prepareTexture__12J2DTevBlock8FUc,
	/* 40   */ (void*)getTexture__12J2DTevBlock8FUl,
	/* 41   */ (void*)getPalette__12J2DTevBlock8FUl,
	/* 42   */ (void*)getFont__12J2DTevBlock8Fv,
	/* 43   */ (void*)shiftDeleteFlag__12J2DTevBlock8FUcb,
	/* 44   */ (void*)setUndeleteFlag__12J2DTevBlock8FUc,
	/* 45   */ (void*)setFontUndeleteFlag__12J2DTevBlock8Fv,
	/* 46   */ (void*)__dt__12J2DTevBlock8Fv,
};

/* 803CCC40-803CCCFC 00BC+00 rc=2 efc=0 rfr=False None .data      __vt__12J2DTevBlock4                                         */
SECTION_DATA static void* __vt__12J2DTevBlock4[47] = {
	/* 0    */ (void*)NULL /* RTTI */,
	/* 1    */ (void*)NULL,
	/* 2    */ (void*)initialize__12J2DTevBlock4Fv,
	/* 3    */ (void*)setGX__12J2DTevBlock4Fv,
	/* 4    */ (void*)loadTexture__12J2DTevBlock4F11_GXTexMapIDUl,
	/* 5    */ (void*)getType__12J2DTevBlock4Fv,
	/* 6    */ (void*)getMaxStage__12J2DTevBlock4Fv,
	/* 7    */ (void*)setTexNo__12J2DTevBlock4FUlUs,
	/* 8    */ (void*)getTexNo__12J2DTevBlock4CFUl,
	/* 9    */ (void*)setFontNo__12J2DTevBlock4FUs,
	/* 10   */ (void*)getFontNo__12J2DTevBlock4CFv,
	/* 11   */ (void*)setTevOrder__12J2DTevBlock4FUl11J2DTevOrder,
	/* 12   */ (void*)getTevOrder__12J2DTevBlock4FUl,
	/* 13   */ (void*)setTevColor__12J2DTevBlock4FUl13J2DGXColorS10,
	/* 14   */ (void*)getTevColor__12J2DTevBlock4FUl,
	/* 15   */ (void*)setTevKColor__12J2DTevBlock4FUlQ28JUtility6TColor,
	/* 16   */ (void*)getTevKColor__12J2DTevBlock4FUl,
	/* 17   */ (void*)setTevKColorSel__12J2DTevBlock4FUlUc,
	/* 18   */ (void*)getTevKColorSel__12J2DTevBlock4FUl,
	/* 19   */ (void*)setTevKAlphaSel__12J2DTevBlock4FUlUc,
	/* 20   */ (void*)getTevKAlphaSel__12J2DTevBlock4FUl,
	/* 21   */ (void*)setTevStageNum__12J2DTevBlock4FUc,
	/* 22   */ (void*)getTevStageNum__12J2DTevBlock4CFv,
	/* 23   */ (void*)setTevStage__12J2DTevBlock4FUl11J2DTevStage,
	/* 24   */ (void*)getTevStage__12J2DTevBlock4FUl,
	/* 25   */ (void*)setTevSwapModeInfo__12J2DTevBlock4FUl18J2DTevSwapModeInfo,
	/* 26   */ (void*)setTevSwapModeTable__12J2DTevBlock4FUl19J2DTevSwapModeTable,
	/* 27   */ (void*)getTevSwapModeTable__12J2DTevBlock4FUl,
	/* 28   */ (void*)setIndTevStage__12J2DTevBlock4FUl14J2DIndTevStage,
	/* 29   */ (void*)getIndTevStage__12J2DTevBlock4FUl,
	/* 30   */ (void*)insertTexture__12J2DTevBlock4FUlPC7ResTIMG,
	/* 31   */ (void*)insertTexture__12J2DTevBlock4FUlPC7ResTIMGP10JUTPalette,
	/* 32   */ (void*)insertTexture__12J2DTevBlock4FUlP10JUTTexture,
	/* 33   */ (void*)setTexture__12J2DTevBlock4FUlPC7ResTIMG,
	/* 34   */ (void*)setTexture__12J2DTevBlock4FUlP10JUTTexture,
	/* 35   */ (void*)removeTexture__12J2DTevBlock4FUl,
	/* 36   */ (void*)setFont__12J2DTevBlock4FP7ResFONT,
	/* 37   */ (void*)setFont__12J2DTevBlock4FP7JUTFont,
	/* 38   */ (void*)setPalette__12J2DTevBlock4FUlPC7ResTLUT,
	/* 39   */ (void*)prepareTexture__12J2DTevBlock4FUc,
	/* 40   */ (void*)getTexture__12J2DTevBlock4FUl,
	/* 41   */ (void*)getPalette__12J2DTevBlock4FUl,
	/* 42   */ (void*)getFont__12J2DTevBlock4Fv,
	/* 43   */ (void*)shiftDeleteFlag__12J2DTevBlock4FUcb,
	/* 44   */ (void*)setUndeleteFlag__12J2DTevBlock4FUc,
	/* 45   */ (void*)setFontUndeleteFlag__12J2DTevBlock4Fv,
	/* 46   */ (void*)__dt__12J2DTevBlock4Fv,
};

/* 803CCCFC-803CCDB8 00BC+00 rc=2 efc=0 rfr=False None .data      __vt__12J2DTevBlock2                                         */
SECTION_DATA static void* __vt__12J2DTevBlock2[47] = {
	/* 0    */ (void*)NULL /* RTTI */,
	/* 1    */ (void*)NULL,
	/* 2    */ (void*)initialize__12J2DTevBlock2Fv,
	/* 3    */ (void*)setGX__12J2DTevBlock2Fv,
	/* 4    */ (void*)loadTexture__12J2DTevBlock2F11_GXTexMapIDUl,
	/* 5    */ (void*)getType__12J2DTevBlock2Fv,
	/* 6    */ (void*)getMaxStage__12J2DTevBlock2Fv,
	/* 7    */ (void*)setTexNo__12J2DTevBlock2FUlUs,
	/* 8    */ (void*)getTexNo__12J2DTevBlock2CFUl,
	/* 9    */ (void*)setFontNo__12J2DTevBlock2FUs,
	/* 10   */ (void*)getFontNo__12J2DTevBlock2CFv,
	/* 11   */ (void*)setTevOrder__12J2DTevBlock2FUl11J2DTevOrder,
	/* 12   */ (void*)getTevOrder__12J2DTevBlock2FUl,
	/* 13   */ (void*)setTevColor__12J2DTevBlock2FUl13J2DGXColorS10,
	/* 14   */ (void*)getTevColor__12J2DTevBlock2FUl,
	/* 15   */ (void*)setTevKColor__12J2DTevBlock2FUlQ28JUtility6TColor,
	/* 16   */ (void*)getTevKColor__12J2DTevBlock2FUl,
	/* 17   */ (void*)setTevKColorSel__12J2DTevBlock2FUlUc,
	/* 18   */ (void*)getTevKColorSel__12J2DTevBlock2FUl,
	/* 19   */ (void*)setTevKAlphaSel__12J2DTevBlock2FUlUc,
	/* 20   */ (void*)getTevKAlphaSel__12J2DTevBlock2FUl,
	/* 21   */ (void*)setTevStageNum__12J2DTevBlock2FUc,
	/* 22   */ (void*)getTevStageNum__12J2DTevBlock2CFv,
	/* 23   */ (void*)setTevStage__12J2DTevBlock2FUl11J2DTevStage,
	/* 24   */ (void*)getTevStage__12J2DTevBlock2FUl,
	/* 25   */ (void*)setTevSwapModeInfo__12J2DTevBlock2FUl18J2DTevSwapModeInfo,
	/* 26   */ (void*)setTevSwapModeTable__12J2DTevBlock2FUl19J2DTevSwapModeTable,
	/* 27   */ (void*)getTevSwapModeTable__12J2DTevBlock2FUl,
	/* 28   */ (void*)setIndTevStage__12J2DTevBlock2FUl14J2DIndTevStage,
	/* 29   */ (void*)getIndTevStage__12J2DTevBlock2FUl,
	/* 30   */ (void*)insertTexture__12J2DTevBlock2FUlPC7ResTIMG,
	/* 31   */ (void*)insertTexture__12J2DTevBlock2FUlPC7ResTIMGP10JUTPalette,
	/* 32   */ (void*)insertTexture__12J2DTevBlock2FUlP10JUTTexture,
	/* 33   */ (void*)setTexture__12J2DTevBlock2FUlPC7ResTIMG,
	/* 34   */ (void*)setTexture__12J2DTevBlock2FUlP10JUTTexture,
	/* 35   */ (void*)removeTexture__12J2DTevBlock2FUl,
	/* 36   */ (void*)setFont__12J2DTevBlock2FP7ResFONT,
	/* 37   */ (void*)setFont__12J2DTevBlock2FP7JUTFont,
	/* 38   */ (void*)setPalette__12J2DTevBlock2FUlPC7ResTLUT,
	/* 39   */ (void*)prepareTexture__12J2DTevBlock2FUc,
	/* 40   */ (void*)getTexture__12J2DTevBlock2FUl,
	/* 41   */ (void*)getPalette__12J2DTevBlock2FUl,
	/* 42   */ (void*)getFont__12J2DTevBlock2Fv,
	/* 43   */ (void*)shiftDeleteFlag__12J2DTevBlock2FUcb,
	/* 44   */ (void*)setUndeleteFlag__12J2DTevBlock2FUc,
	/* 45   */ (void*)setFontUndeleteFlag__12J2DTevBlock2Fv,
	/* 46   */ (void*)__dt__12J2DTevBlock2Fv,
};

/* 803CCDB8-803CCE74 00BC+00 rc=2 efc=0 rfr=False None .data      __vt__12J2DTevBlock1                                         */
SECTION_DATA static void* __vt__12J2DTevBlock1[47] = {
	/* 0    */ (void*)NULL /* RTTI */,
	/* 1    */ (void*)NULL,
	/* 2    */ (void*)initialize__12J2DTevBlock1Fv,
	/* 3    */ (void*)setGX__12J2DTevBlock1Fv,
	/* 4    */ (void*)loadTexture__12J2DTevBlock1F11_GXTexMapIDUl,
	/* 5    */ (void*)getType__12J2DTevBlock1Fv,
	/* 6    */ (void*)getMaxStage__12J2DTevBlock1Fv,
	/* 7    */ (void*)setTexNo__12J2DTevBlock1FUlUs,
	/* 8    */ (void*)getTexNo__12J2DTevBlock1CFUl,
	/* 9    */ (void*)setFontNo__12J2DTevBlock1FUs,
	/* 10   */ (void*)getFontNo__12J2DTevBlock1CFv,
	/* 11   */ (void*)setTevOrder__12J2DTevBlock1FUl11J2DTevOrder,
	/* 12   */ (void*)getTevOrder__12J2DTevBlock1FUl,
	/* 13   */ (void*)setTevColor__12J2DTevBlock1FUl13J2DGXColorS10,
	/* 14   */ (void*)getTevColor__12J2DTevBlock1FUl,
	/* 15   */ (void*)setTevKColor__12J2DTevBlock1FUlQ28JUtility6TColor,
	/* 16   */ (void*)getTevKColor__12J2DTevBlock1FUl,
	/* 17   */ (void*)setTevKColorSel__12J2DTevBlock1FUlUc,
	/* 18   */ (void*)getTevKColorSel__12J2DTevBlock1FUl,
	/* 19   */ (void*)setTevKAlphaSel__12J2DTevBlock1FUlUc,
	/* 20   */ (void*)getTevKAlphaSel__12J2DTevBlock1FUl,
	/* 21   */ (void*)setTevStageNum__12J2DTevBlock1FUc,
	/* 22   */ (void*)getTevStageNum__12J2DTevBlock1CFv,
	/* 23   */ (void*)setTevStage__12J2DTevBlock1FUl11J2DTevStage,
	/* 24   */ (void*)getTevStage__12J2DTevBlock1FUl,
	/* 25   */ (void*)setTevSwapModeInfo__12J2DTevBlock1FUl18J2DTevSwapModeInfo,
	/* 26   */ (void*)setTevSwapModeTable__12J2DTevBlock1FUl19J2DTevSwapModeTable,
	/* 27   */ (void*)getTevSwapModeTable__12J2DTevBlock1FUl,
	/* 28   */ (void*)setIndTevStage__12J2DTevBlock1FUl14J2DIndTevStage,
	/* 29   */ (void*)getIndTevStage__12J2DTevBlock1FUl,
	/* 30   */ (void*)insertTexture__12J2DTevBlock1FUlPC7ResTIMG,
	/* 31   */ (void*)insertTexture__12J2DTevBlock1FUlPC7ResTIMGP10JUTPalette,
	/* 32   */ (void*)insertTexture__12J2DTevBlock1FUlP10JUTTexture,
	/* 33   */ (void*)setTexture__12J2DTevBlock1FUlPC7ResTIMG,
	/* 34   */ (void*)setTexture__12J2DTevBlock1FUlP10JUTTexture,
	/* 35   */ (void*)removeTexture__12J2DTevBlock1FUl,
	/* 36   */ (void*)setFont__12J2DTevBlock1FP7ResFONT,
	/* 37   */ (void*)setFont__12J2DTevBlock1FP7JUTFont,
	/* 38   */ (void*)setPalette__12J2DTevBlock1FUlPC7ResTLUT,
	/* 39   */ (void*)prepareTexture__12J2DTevBlock1FUc,
	/* 40   */ (void*)getTexture__12J2DTevBlock1FUl,
	/* 41   */ (void*)getPalette__12J2DTevBlock1FUl,
	/* 42   */ (void*)getFont__12J2DTevBlock1Fv,
	/* 43   */ (void*)shiftDeleteFlag__12J2DTevBlock1FUcb,
	/* 44   */ (void*)setUndeleteFlag__12J2DTevBlock1FUc,
	/* 45   */ (void*)setFontUndeleteFlag__12J2DTevBlock1Fv,
	/* 46   */ (void*)__dt__12J2DTevBlock1Fv,
};

/* 803CCE74-803CCF30 00BC+00 rc=11 efc=1 rfr=False None .data      __vt__11J2DTevBlock                                          */
SECTION_DATA void* __vt__11J2DTevBlock[47] = {
	/* 0    */ (void*)NULL /* RTTI */,
	/* 1    */ (void*)NULL,
	/* 2    */ (void*)initialize__11J2DTevBlockFv,
	/* 3    */ (void*)setGX__11J2DTevBlockFv,
	/* 4    */ (void*)loadTexture__11J2DTevBlockF11_GXTexMapIDUl,
	/* 5    */ (void*)NULL,
	/* 6    */ (void*)NULL,
	/* 7    */ (void*)setTexNo__11J2DTevBlockFUlUs,
	/* 8    */ (void*)getTexNo__11J2DTevBlockCFUl,
	/* 9    */ (void*)setFontNo__11J2DTevBlockFUs,
	/* 10   */ (void*)getFontNo__11J2DTevBlockCFv,
	/* 11   */ (void*)setTevOrder__11J2DTevBlockFUl11J2DTevOrder,
	/* 12   */ (void*)getTevOrder__11J2DTevBlockFUl,
	/* 13   */ (void*)setTevColor__11J2DTevBlockFUl13J2DGXColorS10,
	/* 14   */ (void*)getTevColor__11J2DTevBlockFUl,
	/* 15   */ (void*)setTevKColor__11J2DTevBlockFUlQ28JUtility6TColor,
	/* 16   */ (void*)getTevKColor__11J2DTevBlockFUl,
	/* 17   */ (void*)setTevKColorSel__11J2DTevBlockFUlUc,
	/* 18   */ (void*)getTevKColorSel__11J2DTevBlockFUl,
	/* 19   */ (void*)setTevKAlphaSel__11J2DTevBlockFUlUc,
	/* 20   */ (void*)getTevKAlphaSel__11J2DTevBlockFUl,
	/* 21   */ (void*)setTevStageNum__11J2DTevBlockFUc,
	/* 22   */ (void*)getTevStageNum__11J2DTevBlockCFv,
	/* 23   */ (void*)setTevStage__11J2DTevBlockFUl11J2DTevStage,
	/* 24   */ (void*)getTevStage__11J2DTevBlockFUl,
	/* 25   */ (void*)setTevSwapModeInfo__11J2DTevBlockFUl18J2DTevSwapModeInfo,
	/* 26   */ (void*)setTevSwapModeTable__11J2DTevBlockFUl19J2DTevSwapModeTable,
	/* 27   */ (void*)getTevSwapModeTable__11J2DTevBlockFUl,
	/* 28   */ (void*)setIndTevStage__11J2DTevBlockFUl14J2DIndTevStage,
	/* 29   */ (void*)getIndTevStage__11J2DTevBlockFUl,
	/* 30   */ (void*)insertTexture__11J2DTevBlockFUlPC7ResTIMG,
	/* 31   */ (void*)insertTexture__11J2DTevBlockFUlPC7ResTIMGP10JUTPalette,
	/* 32   */ (void*)insertTexture__11J2DTevBlockFUlP10JUTTexture,
	/* 33   */ (void*)setTexture__11J2DTevBlockFUlPC7ResTIMG,
	/* 34   */ (void*)setTexture__11J2DTevBlockFUlP10JUTTexture,
	/* 35   */ (void*)removeTexture__11J2DTevBlockFUl,
	/* 36   */ (void*)setFont__11J2DTevBlockFP7ResFONT,
	/* 37   */ (void*)setFont__11J2DTevBlockFP7JUTFont,
	/* 38   */ (void*)setPalette__11J2DTevBlockFUlPC7ResTLUT,
	/* 39   */ (void*)prepareTexture__11J2DTevBlockFUc,
	/* 40   */ (void*)getTexture__11J2DTevBlockFUl,
	/* 41   */ (void*)getPalette__11J2DTevBlockFUl,
	/* 42   */ (void*)getFont__11J2DTevBlockFv,
	/* 43   */ (void*)shiftDeleteFlag__11J2DTevBlockFUcb,
	/* 44   */ (void*)setUndeleteFlag__11J2DTevBlockFUc,
	/* 45   */ (void*)setFontUndeleteFlag__11J2DTevBlockFv,
	/* 46   */ (void*)__dt__11J2DTevBlockFv,
};

/* 803CCF30-803CCF40 000C+04 rc=2 efc=1 rfr=False None .data      __vt__14J2DTexGenBlock                                       */
SECTION_DATA void* __vt__14J2DTexGenBlock[3 + 1 /* padding */] = {
	/* 0    */ (void*)NULL /* RTTI */,
	/* 1    */ (void*)NULL,
	/* 2    */ (void*)__dt__14J2DTexGenBlockFv,
	/* padding */
	NULL,
};

/* 802EB620-802EB6A4 0084+00 rc=2 efc=1 rfr=False None .text      __dt__14J2DTexGenBlockFv                                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm J2DTexGenBlock::~J2DTexGenBlock() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/__dt__14J2DTexGenBlockFv.s"
}
#pragma pop


/* 802EB6A4-802EB7E0 013C+00 rc=3 efc=3 rfr=False None .text      setTexMtx__14J2DTexGenBlockFUlR9J2DTexMtx                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTexGenBlock::setTexMtx(u32 field_0, J2DTexMtx& field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTexMtx__14J2DTexGenBlockFUlR9J2DTexMtx.s"
}
#pragma pop


/* 802EB7E0-802EB87C 009C+00 rc=1 efc=1 rfr=False None .text      getTexMtx__14J2DTexGenBlockFUlR9J2DTexMtx                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTexGenBlock::getTexMtx(u32 field_0, J2DTexMtx& field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTexMtx__14J2DTexGenBlockFUlR9J2DTexMtx.s"
}
#pragma pop


/* 802EB87C-802EB884 0008+00 rc=1 efc=0 rfr=False None .text      getTexture__11J2DTevBlockFUl                                 */
bool J2DTevBlock::getTexture(u32 field_0) {
	return false;
}


/* 802EB884-802EB88C 0008+00 rc=1 efc=0 rfr=False None .text      getPalette__11J2DTevBlockFUl                                 */
bool J2DTevBlock::getPalette(u32 field_0) {
	return false;
}


/* 802EB88C-802EB998 010C+00 rc=1 efc=1 rfr=False None .text      __ct__12J2DTevBlock1Fv                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm J2DTevBlock1::J2DTevBlock1() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/__ct__12J2DTevBlock1Fv.s"
}
#pragma pop


/* 802EB998-802EBA50 00B8+00 rc=1 efc=0 rfr=False None .text      __dt__12J2DTevBlock1Fv                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm J2DTevBlock1::~J2DTevBlock1() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/__dt__12J2DTevBlock1Fv.s"
}
#pragma pop


/* 802EBA50-802EBC0C 01BC+00 rc=1 efc=0 rfr=False None .text      initialize__12J2DTevBlock1Fv                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock1::initialize() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/initialize__12J2DTevBlock1Fv.s"
}
#pragma pop


/* 802EBC0C-802EBCC0 00B4+00 rc=1 efc=0 rfr=False None .text      prepareTexture__12J2DTevBlock1FUc                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock1::prepareTexture(u8 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/prepareTexture__12J2DTevBlock1FUc.s"
}
#pragma pop


/* 802EBCC0-802EBDE4 0124+00 rc=1 efc=0 rfr=False None .text      insertTexture__12J2DTevBlock1FUlPC7ResTIMGP10JUTPalette      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock1::insertTexture(u32 field_0, ResTIMG const* field_1, JUTPalette* field_2) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/insertTexture__12J2DTevBlock1FUlPC7ResTIMGP10JUTPalette.s"
}
#pragma pop


/* 802EBDE4-802EBE8C 00A8+00 rc=1 efc=0 rfr=False None .text      insertTexture__12J2DTevBlock1FUlP10JUTTexture                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock1::insertTexture(u32 field_0, JUTTexture* field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/insertTexture__12J2DTevBlock1FUlP10JUTTexture.s"
}
#pragma pop


/* 802EBE8C-802EC01C 0190+00 rc=1 efc=0 rfr=False None .text      setTexture__12J2DTevBlock1FUlPC7ResTIMG                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock1::setTexture(u32 field_0, ResTIMG const* field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTexture__12J2DTevBlock1FUlPC7ResTIMG.s"
}
#pragma pop


/* 802EC01C-802EC0A8 008C+00 rc=1 efc=0 rfr=False None .text      setTexture__12J2DTevBlock1FUlP10JUTTexture                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock1::setTexture(u32 field_0, JUTTexture* field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTexture__12J2DTevBlock1FUlP10JUTTexture.s"
}
#pragma pop


/* 802EC0A8-802EC124 007C+00 rc=1 efc=0 rfr=False None .text      removeTexture__12J2DTevBlock1FUl                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock1::removeTexture(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/removeTexture__12J2DTevBlock1FUl.s"
}
#pragma pop


/* 802EC124-802EC1D8 00B4+00 rc=1 efc=0 rfr=False None .text      setFont__12J2DTevBlock1FP7ResFONT                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock1::setFont(ResFONT* field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setFont__12J2DTevBlock1FP7ResFONT.s"
}
#pragma pop


/* 802EC1D8-802EC258 0080+00 rc=1 efc=0 rfr=False None .text      setFont__12J2DTevBlock1FP7JUTFont                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock1::setFont(JUTFont* field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setFont__12J2DTevBlock1FP7JUTFont.s"
}
#pragma pop


/* 802EC258-802EC318 00C0+00 rc=1 efc=0 rfr=False None .text      setPalette__12J2DTevBlock1FUlPC7ResTLUT                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock1::setPalette(u32 field_0, ResTLUT const* field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setPalette__12J2DTevBlock1FUlPC7ResTLUT.s"
}
#pragma pop


/* 802EC318-802EC328 0010+00 rc=1 efc=0 rfr=False None .text      shiftDeleteFlag__12J2DTevBlock1FUcb                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock1::shiftDeleteFlag(u8 field_0, bool field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/shiftDeleteFlag__12J2DTevBlock1FUcb.s"
}
#pragma pop


/* 802EC328-802EC570 0248+00 rc=1 efc=0 rfr=False None .text      setGX__12J2DTevBlock1Fv                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock1::setGX() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setGX__12J2DTevBlock1Fv.s"
}
#pragma pop


/* 802EC570-802EC5B8 0048+00 rc=1 efc=0 rfr=False None .text      loadTexture__12J2DTevBlock1F11_GXTexMapIDUl                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock1::loadTexture(_GXTexMapID field_0, u32 field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/loadTexture__12J2DTevBlock1F11_GXTexMapIDUl.s"
}
#pragma pop


/* 802EC5B8-802EC6C8 0110+00 rc=1 efc=1 rfr=False None .text      __ct__12J2DTevBlock2Fv                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm J2DTevBlock2::J2DTevBlock2() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/__ct__12J2DTevBlock2Fv.s"
}
#pragma pop


/* 802EC6C8-802EC7A0 00D8+00 rc=1 efc=0 rfr=False None .text      __dt__12J2DTevBlock2Fv                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm J2DTevBlock2::~J2DTevBlock2() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/__dt__12J2DTevBlock2Fv.s"
}
#pragma pop


/* 802EC7A0-802ECA18 0278+00 rc=1 efc=0 rfr=False None .text      initialize__12J2DTevBlock2Fv                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock2::initialize() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/initialize__12J2DTevBlock2Fv.s"
}
#pragma pop


/* 802ECA18-802ECAE8 00D0+00 rc=1 efc=0 rfr=False None .text      prepareTexture__12J2DTevBlock2FUc                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock2::prepareTexture(u8 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/prepareTexture__12J2DTevBlock2FUc.s"
}
#pragma pop


/* 802ECAE8-802ECDE8 0300+00 rc=1 efc=0 rfr=False None .text      insertTexture__12J2DTevBlock2FUlPC7ResTIMGP10JUTPalette      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock2::insertTexture(u32 field_0, ResTIMG const* field_1, JUTPalette* field_2) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/insertTexture__12J2DTevBlock2FUlPC7ResTIMGP10JUTPalette.s"
}
#pragma pop


/* 802ECDE8-802ECF48 0160+00 rc=1 efc=0 rfr=False None .text      insertTexture__12J2DTevBlock2FUlP10JUTTexture                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock2::insertTexture(u32 field_0, JUTTexture* field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/insertTexture__12J2DTevBlock2FUlP10JUTTexture.s"
}
#pragma pop


/* 802ECF48-802ED16C 0224+00 rc=1 efc=0 rfr=False None .text      setTexture__12J2DTevBlock2FUlPC7ResTIMG                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock2::setTexture(u32 field_0, ResTIMG const* field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTexture__12J2DTevBlock2FUlPC7ResTIMG.s"
}
#pragma pop


/* 802ED16C-802ED21C 00B0+00 rc=1 efc=0 rfr=False None .text      setTexture__12J2DTevBlock2FUlP10JUTTexture                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock2::setTexture(u32 field_0, JUTTexture* field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTexture__12J2DTevBlock2FUlP10JUTTexture.s"
}
#pragma pop


/* 802ED21C-802ED2F0 00D4+00 rc=1 efc=0 rfr=False None .text      removeTexture__12J2DTevBlock2FUl                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock2::removeTexture(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/removeTexture__12J2DTevBlock2FUl.s"
}
#pragma pop


/* 802ED2F0-802ED3A4 00B4+00 rc=1 efc=0 rfr=False None .text      setFont__12J2DTevBlock2FP7ResFONT                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock2::setFont(ResFONT* field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setFont__12J2DTevBlock2FP7ResFONT.s"
}
#pragma pop


/* 802ED3A4-802ED424 0080+00 rc=1 efc=0 rfr=False None .text      setFont__12J2DTevBlock2FP7JUTFont                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock2::setFont(JUTFont* field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setFont__12J2DTevBlock2FP7JUTFont.s"
}
#pragma pop


/* 802ED424-802ED4FC 00D8+00 rc=1 efc=0 rfr=False None .text      setPalette__12J2DTevBlock2FUlPC7ResTLUT                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock2::setPalette(u32 field_0, ResTLUT const* field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setPalette__12J2DTevBlock2FUlPC7ResTLUT.s"
}
#pragma pop


/* 802ED4FC-802ED584 0088+00 rc=1 efc=0 rfr=False None .text      shiftDeleteFlag__12J2DTevBlock2FUcb                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock2::shiftDeleteFlag(u8 field_0, bool field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/shiftDeleteFlag__12J2DTevBlock2FUcb.s"
}
#pragma pop


/* 802ED584-802ED874 02F0+00 rc=1 efc=0 rfr=False None .text      setGX__12J2DTevBlock2Fv                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock2::setGX() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setGX__12J2DTevBlock2Fv.s"
}
#pragma pop


/* 802ED874-802ED8BC 0048+00 rc=1 efc=0 rfr=False None .text      loadTexture__12J2DTevBlock2F11_GXTexMapIDUl                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock2::loadTexture(_GXTexMapID field_0, u32 field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/loadTexture__12J2DTevBlock2F11_GXTexMapIDUl.s"
}
#pragma pop


/* 802ED8BC-802ED9E4 0128+00 rc=1 efc=1 rfr=False None .text      __ct__12J2DTevBlock4Fv                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm J2DTevBlock4::J2DTevBlock4() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/__ct__12J2DTevBlock4Fv.s"
}
#pragma pop


/* 802ED9E4-802EDAC4 00E0+00 rc=1 efc=0 rfr=False None .text      __dt__12J2DTevBlock4Fv                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm J2DTevBlock4::~J2DTevBlock4() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/__dt__12J2DTevBlock4Fv.s"
}
#pragma pop


/* 802EDAC4-802EDD34 0270+00 rc=1 efc=0 rfr=False None .text      initialize__12J2DTevBlock4Fv                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock4::initialize() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/initialize__12J2DTevBlock4Fv.s"
}
#pragma pop


/* 802EDD34-802EDE04 00D0+00 rc=1 efc=0 rfr=False None .text      prepareTexture__12J2DTevBlock4FUc                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock4::prepareTexture(u8 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/prepareTexture__12J2DTevBlock4FUc.s"
}
#pragma pop


/* 802EDE04-802EE1D4 03D0+00 rc=1 efc=0 rfr=False None .text      insertTexture__12J2DTevBlock4FUlPC7ResTIMGP10JUTPalette      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock4::insertTexture(u32 field_0, ResTIMG const* field_1, JUTPalette* field_2) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/insertTexture__12J2DTevBlock4FUlPC7ResTIMGP10JUTPalette.s"
}
#pragma pop


/* 802EE1D4-802EE364 0190+00 rc=1 efc=0 rfr=False None .text      insertTexture__12J2DTevBlock4FUlP10JUTTexture                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock4::insertTexture(u32 field_0, JUTTexture* field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/insertTexture__12J2DTevBlock4FUlP10JUTTexture.s"
}
#pragma pop


/* 802EE364-802EE5F0 028C+00 rc=1 efc=0 rfr=False None .text      setTexture__12J2DTevBlock4FUlPC7ResTIMG                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock4::setTexture(u32 field_0, ResTIMG const* field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTexture__12J2DTevBlock4FUlPC7ResTIMG.s"
}
#pragma pop


/* 802EE5F0-802EE6A0 00B0+00 rc=1 efc=0 rfr=False None .text      setTexture__12J2DTevBlock4FUlP10JUTTexture                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock4::setTexture(u32 field_0, JUTTexture* field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTexture__12J2DTevBlock4FUlP10JUTTexture.s"
}
#pragma pop


/* 802EE6A0-802EE798 00F8+00 rc=1 efc=0 rfr=False None .text      removeTexture__12J2DTevBlock4FUl                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock4::removeTexture(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/removeTexture__12J2DTevBlock4FUl.s"
}
#pragma pop


/* 802EE798-802EE84C 00B4+00 rc=1 efc=0 rfr=False None .text      setFont__12J2DTevBlock4FP7ResFONT                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock4::setFont(ResFONT* field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setFont__12J2DTevBlock4FP7ResFONT.s"
}
#pragma pop


/* 802EE84C-802EE8CC 0080+00 rc=1 efc=0 rfr=False None .text      setFont__12J2DTevBlock4FP7JUTFont                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock4::setFont(JUTFont* field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setFont__12J2DTevBlock4FP7JUTFont.s"
}
#pragma pop


/* 802EE8CC-802EE9A4 00D8+00 rc=1 efc=0 rfr=False None .text      setPalette__12J2DTevBlock4FUlPC7ResTLUT                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock4::setPalette(u32 field_0, ResTLUT const* field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setPalette__12J2DTevBlock4FUlPC7ResTLUT.s"
}
#pragma pop


/* 802EE9A4-802EEA2C 0088+00 rc=1 efc=0 rfr=False None .text      shiftDeleteFlag__12J2DTevBlock4FUcb                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock4::shiftDeleteFlag(u8 field_0, bool field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/shiftDeleteFlag__12J2DTevBlock4FUcb.s"
}
#pragma pop


/* 802EEA2C-802EED1C 02F0+00 rc=1 efc=0 rfr=False None .text      setGX__12J2DTevBlock4Fv                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock4::setGX() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setGX__12J2DTevBlock4Fv.s"
}
#pragma pop


/* 802EED1C-802EED64 0048+00 rc=1 efc=0 rfr=False None .text      loadTexture__12J2DTevBlock4F11_GXTexMapIDUl                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock4::loadTexture(_GXTexMapID field_0, u32 field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/loadTexture__12J2DTevBlock4F11_GXTexMapIDUl.s"
}
#pragma pop


/* 802EED64-802EEE8C 0128+00 rc=1 efc=1 rfr=False None .text      __ct__12J2DTevBlock8Fv                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm J2DTevBlock8::J2DTevBlock8() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/__ct__12J2DTevBlock8Fv.s"
}
#pragma pop


/* 802EEE8C-802EEF6C 00E0+00 rc=1 efc=0 rfr=False None .text      __dt__12J2DTevBlock8Fv                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm J2DTevBlock8::~J2DTevBlock8() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/__dt__12J2DTevBlock8Fv.s"
}
#pragma pop


/* 802EEF6C-802EF1E0 0274+00 rc=1 efc=0 rfr=False None .text      initialize__12J2DTevBlock8Fv                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock8::initialize() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/initialize__12J2DTevBlock8Fv.s"
}
#pragma pop


/* 802EF1E0-802EF2B0 00D0+00 rc=1 efc=0 rfr=False None .text      prepareTexture__12J2DTevBlock8FUc                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock8::prepareTexture(u8 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/prepareTexture__12J2DTevBlock8FUc.s"
}
#pragma pop


/* 802EF2B0-802EF67C 03CC+00 rc=1 efc=0 rfr=False None .text      insertTexture__12J2DTevBlock8FUlPC7ResTIMGP10JUTPalette      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock8::insertTexture(u32 field_0, ResTIMG const* field_1, JUTPalette* field_2) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/insertTexture__12J2DTevBlock8FUlPC7ResTIMGP10JUTPalette.s"
}
#pragma pop


/* 802EF67C-802EF80C 0190+00 rc=1 efc=0 rfr=False None .text      insertTexture__12J2DTevBlock8FUlP10JUTTexture                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock8::insertTexture(u32 field_0, JUTTexture* field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/insertTexture__12J2DTevBlock8FUlP10JUTTexture.s"
}
#pragma pop


/* 802EF80C-802EFA98 028C+00 rc=1 efc=0 rfr=False None .text      setTexture__12J2DTevBlock8FUlPC7ResTIMG                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock8::setTexture(u32 field_0, ResTIMG const* field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTexture__12J2DTevBlock8FUlPC7ResTIMG.s"
}
#pragma pop


/* 802EFA98-802EFB48 00B0+00 rc=1 efc=0 rfr=False None .text      setTexture__12J2DTevBlock8FUlP10JUTTexture                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock8::setTexture(u32 field_0, JUTTexture* field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTexture__12J2DTevBlock8FUlP10JUTTexture.s"
}
#pragma pop


/* 802EFB48-802EFC40 00F8+00 rc=1 efc=0 rfr=False None .text      removeTexture__12J2DTevBlock8FUl                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock8::removeTexture(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/removeTexture__12J2DTevBlock8FUl.s"
}
#pragma pop


/* 802EFC40-802EFCEC 00AC+00 rc=1 efc=0 rfr=False None .text      setFont__12J2DTevBlock8FP7ResFONT                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock8::setFont(ResFONT* field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setFont__12J2DTevBlock8FP7ResFONT.s"
}
#pragma pop


/* 802EFCEC-802EFD68 007C+00 rc=1 efc=0 rfr=False None .text      setFont__12J2DTevBlock8FP7JUTFont                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock8::setFont(JUTFont* field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setFont__12J2DTevBlock8FP7JUTFont.s"
}
#pragma pop


/* 802EFD68-802EFE40 00D8+00 rc=1 efc=0 rfr=False None .text      setPalette__12J2DTevBlock8FUlPC7ResTLUT                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock8::setPalette(u32 field_0, ResTLUT const* field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setPalette__12J2DTevBlock8FUlPC7ResTLUT.s"
}
#pragma pop


/* 802EFE40-802EFEAC 006C+00 rc=1 efc=0 rfr=False None .text      shiftDeleteFlag__12J2DTevBlock8FUcb                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock8::shiftDeleteFlag(u8 field_0, bool field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/shiftDeleteFlag__12J2DTevBlock8FUcb.s"
}
#pragma pop


/* 802EFEAC-802F019C 02F0+00 rc=1 efc=0 rfr=False None .text      setGX__12J2DTevBlock8Fv                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock8::setGX() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setGX__12J2DTevBlock8Fv.s"
}
#pragma pop


/* 802F019C-802F01E4 0048+00 rc=1 efc=0 rfr=False None .text      loadTexture__12J2DTevBlock8F11_GXTexMapIDUl                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock8::loadTexture(_GXTexMapID field_0, u32 field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/loadTexture__12J2DTevBlock8F11_GXTexMapIDUl.s"
}
#pragma pop


/* 802F01E4-802F030C 0128+00 rc=1 efc=1 rfr=False None .text      __ct__13J2DTevBlock16Fv                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm J2DTevBlock16::J2DTevBlock16() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/__ct__13J2DTevBlock16Fv.s"
}
#pragma pop


/* 802F030C-802F03EC 00E0+00 rc=1 efc=0 rfr=False None .text      __dt__13J2DTevBlock16Fv                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm J2DTevBlock16::~J2DTevBlock16() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/__dt__13J2DTevBlock16Fv.s"
}
#pragma pop


/* 802F03EC-802F0660 0274+00 rc=1 efc=0 rfr=False None .text      initialize__13J2DTevBlock16Fv                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock16::initialize() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/initialize__13J2DTevBlock16Fv.s"
}
#pragma pop


/* 802F0660-802F0730 00D0+00 rc=1 efc=0 rfr=False None .text      prepareTexture__13J2DTevBlock16FUc                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock16::prepareTexture(u8 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/prepareTexture__13J2DTevBlock16FUc.s"
}
#pragma pop


/* 802F0730-802F0AFC 03CC+00 rc=1 efc=0 rfr=False None .text      insertTexture__13J2DTevBlock16FUlPC7ResTIMGP10JUTPalette     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock16::insertTexture(u32 field_0, ResTIMG const* field_1, JUTPalette* field_2) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/insertTexture__13J2DTevBlock16FUlPC7ResTIMGP10JUTPalette.s"
}
#pragma pop


/* 802F0AFC-802F0C8C 0190+00 rc=1 efc=0 rfr=False None .text      insertTexture__13J2DTevBlock16FUlP10JUTTexture               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock16::insertTexture(u32 field_0, JUTTexture* field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/insertTexture__13J2DTevBlock16FUlP10JUTTexture.s"
}
#pragma pop


/* 802F0C8C-802F0F18 028C+00 rc=1 efc=0 rfr=False None .text      setTexture__13J2DTevBlock16FUlPC7ResTIMG                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock16::setTexture(u32 field_0, ResTIMG const* field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTexture__13J2DTevBlock16FUlPC7ResTIMG.s"
}
#pragma pop


/* 802F0F18-802F0FC8 00B0+00 rc=1 efc=0 rfr=False None .text      setTexture__13J2DTevBlock16FUlP10JUTTexture                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock16::setTexture(u32 field_0, JUTTexture* field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTexture__13J2DTevBlock16FUlP10JUTTexture.s"
}
#pragma pop


/* 802F0FC8-802F10C0 00F8+00 rc=1 efc=0 rfr=False None .text      removeTexture__13J2DTevBlock16FUl                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock16::removeTexture(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/removeTexture__13J2DTevBlock16FUl.s"
}
#pragma pop


/* 802F10C0-802F116C 00AC+00 rc=1 efc=0 rfr=False None .text      setFont__13J2DTevBlock16FP7ResFONT                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock16::setFont(ResFONT* field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setFont__13J2DTevBlock16FP7ResFONT.s"
}
#pragma pop


/* 802F116C-802F11E8 007C+00 rc=1 efc=0 rfr=False None .text      setFont__13J2DTevBlock16FP7JUTFont                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock16::setFont(JUTFont* field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setFont__13J2DTevBlock16FP7JUTFont.s"
}
#pragma pop


/* 802F11E8-802F12C0 00D8+00 rc=1 efc=0 rfr=False None .text      setPalette__13J2DTevBlock16FUlPC7ResTLUT                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock16::setPalette(u32 field_0, ResTLUT const* field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setPalette__13J2DTevBlock16FUlPC7ResTLUT.s"
}
#pragma pop


/* 802F12C0-802F132C 006C+00 rc=1 efc=0 rfr=False None .text      shiftDeleteFlag__13J2DTevBlock16FUcb                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock16::shiftDeleteFlag(u8 field_0, bool field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/shiftDeleteFlag__13J2DTevBlock16FUcb.s"
}
#pragma pop


/* 802F132C-802F161C 02F0+00 rc=1 efc=0 rfr=False None .text      setGX__13J2DTevBlock16Fv                                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock16::setGX() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setGX__13J2DTevBlock16Fv.s"
}
#pragma pop


/* 802F161C-802F1664 0048+00 rc=1 efc=0 rfr=False None .text      loadTexture__13J2DTevBlock16F11_GXTexMapIDUl                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock16::loadTexture(_GXTexMapID field_0, u32 field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/loadTexture__13J2DTevBlock16F11_GXTexMapIDUl.s"
}
#pragma pop


/* 802F1664-802F1730 00CC+00 rc=1 efc=0 rfr=False None .text      initialize__15J2DIndBlockFullFv                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DIndBlockFull::initialize() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/initialize__15J2DIndBlockFullFv.s"
}
#pragma pop


/* 802F1730-802F17FC 00CC+00 rc=1 efc=0 rfr=False None .text      setGX__15J2DIndBlockFullFv                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DIndBlockFull::setGX() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setGX__15J2DIndBlockFullFv.s"
}
#pragma pop


/* 802F17FC-802F1840 0044+00 rc=1 efc=1 rfr=False None .text      initialize__10J2DPEBlockFv                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DPEBlock::initialize() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/initialize__10J2DPEBlockFv.s"
}
#pragma pop


/* 802F1840-802F18A0 0060+00 rc=1 efc=1 rfr=False None .text      setGX__10J2DPEBlockFv                                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DPEBlock::setGX() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setGX__10J2DPEBlockFv.s"
}
#pragma pop


/* 802F18A0-802F1934 0094+00 rc=5 efc=0 rfr=False None .text      __ct__14J2DIndTevStageFv                                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm J2DIndTevStage::J2DIndTevStage() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/__ct__14J2DIndTevStageFv.s"
}
#pragma pop


/* 802F1934-802F1940 000C+00 rc=5 efc=0 rfr=False None .text      __ct__19J2DTevSwapModeTableFv                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm J2DTevSwapModeTable::J2DTevSwapModeTable() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/__ct__19J2DTevSwapModeTableFv.s"
}
#pragma pop


/* 802F1940-802F19A8 0068+00 rc=6 efc=1 rfr=False None .text      __ct__11J2DTevStageFv                                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm J2DTevStage::J2DTevStage() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/__ct__11J2DTevStageFv.s"
}
#pragma pop


/* 802F19A8-802F1B70 01C8+00 rc=2 efc=1 rfr=False None .text      setTevStageInfo__11J2DTevStageFRC15J2DTevStageInfo           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevStage::setTevStageInfo(J2DTevStageInfo const& field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTevStageInfo__11J2DTevStageFRC15J2DTevStageInfo.s"
}
#pragma pop


/* 802F1B70-802F1B90 0020+00 rc=5 efc=0 rfr=False None .text      __ct__11J2DTevOrderFv                                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm J2DTevOrder::J2DTevOrder() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/__ct__11J2DTevOrderFv.s"
}
#pragma pop


/* 802F1B90-802F1B94 0004+00 rc=5 efc=0 rfr=False None .text      __ct__13J2DGXColorS10Fv                                      */
J2DGXColorS10::J2DGXColorS10() {
	/* empty function */
}


/* 802F1B94-802F1BA0 000C+00 rc=1 efc=0 rfr=False None .text      getType__15J2DIndBlockFullFv                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DIndBlockFull::getType() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getType__15J2DIndBlockFullFv.s"
}
#pragma pop


/* 802F1BA0-802F1BA8 0008+00 rc=1 efc=0 rfr=False None .text      setIndTexStageNum__15J2DIndBlockFullFUc                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DIndBlockFull::setIndTexStageNum(u8 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setIndTexStageNum__15J2DIndBlockFullFUc.s"
}
#pragma pop


/* 802F1BA8-802F1BB0 0008+00 rc=1 efc=0 rfr=False None .text      getIndTexStageNum__15J2DIndBlockFullCFv                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DIndBlockFull::getIndTexStageNum() const {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getIndTexStageNum__15J2DIndBlockFullCFv.s"
}
#pragma pop


/* 802F1BB0-802F1BCC 001C+00 rc=1 efc=0 rfr=False None .text      setIndTexOrder__15J2DIndBlockFullFUl14J2DIndTexOrder         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DIndBlockFull::setIndTexOrder(u32 field_0, J2DIndTexOrder field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setIndTexOrder__15J2DIndBlockFullFUl14J2DIndTexOrder.s"
}
#pragma pop


/* 802F1BCC-802F1BE0 0014+00 rc=1 efc=0 rfr=False None .text      getIndTexOrder__15J2DIndBlockFullFUl                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DIndBlockFull::getIndTexOrder(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getIndTexOrder__15J2DIndBlockFullFUl.s"
}
#pragma pop


/* 802F1BE0-802F1C38 0058+00 rc=1 efc=0 rfr=False None .text      setIndTexMtx__15J2DIndBlockFullFUl12J2DIndTexMtx             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DIndBlockFull::setIndTexMtx(u32 field_0, J2DIndTexMtx field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setIndTexMtx__15J2DIndBlockFullFUl12J2DIndTexMtx.s"
}
#pragma pop


/* 802F1C38-802F1C4C 0014+00 rc=1 efc=0 rfr=False None .text      getIndTexMtx__15J2DIndBlockFullFUl                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DIndBlockFull::getIndTexMtx(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getIndTexMtx__15J2DIndBlockFullFUl.s"
}
#pragma pop


/* 802F1C4C-802F1C68 001C+00 rc=1 efc=0 rfr=False None .text      setIndTexCoordScale__15J2DIndBlockFullFUl19J2DIndTexCoordScale */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DIndBlockFull::setIndTexCoordScale(u32 field_0, J2DIndTexCoordScale field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setIndTexCoordScale__15J2DIndBlockFullFUl19J2DIndTexCoordScale.s"
}
#pragma pop


/* 802F1C68-802F1C7C 0014+00 rc=1 efc=0 rfr=False None .text      getIndTexCoordScale__15J2DIndBlockFullFUl                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DIndBlockFull::getIndTexCoordScale(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getIndTexCoordScale__15J2DIndBlockFullFUl.s"
}
#pragma pop


/* 802F1C7C-802F1D18 009C+00 rc=1 efc=0 rfr=False None .text      __dt__15J2DIndBlockFullFv                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm J2DIndBlockFull::~J2DIndBlockFull() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/__dt__15J2DIndBlockFullFv.s"
}
#pragma pop


/* 802F1D18-802F1D24 000C+00 rc=1 efc=0 rfr=False None .text      getType__13J2DTevBlock16Fv                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock16::getType() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getType__13J2DTevBlock16Fv.s"
}
#pragma pop


/* 802F1D24-802F1D2C 0008+00 rc=1 efc=0 rfr=False None .text      getMaxStage__13J2DTevBlock16Fv                               */
s32 J2DTevBlock16::getMaxStage() {
	return 16;
}


/* 802F1D2C-802F1D3C 0010+00 rc=1 efc=0 rfr=False None .text      setTexNo__13J2DTevBlock16FUlUs                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock16::setTexNo(u32 field_0, u16 field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTexNo__13J2DTevBlock16FUlUs.s"
}
#pragma pop


/* 802F1D3C-802F1D4C 0010+00 rc=1 efc=0 rfr=False None .text      getTexNo__13J2DTevBlock16CFUl                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock16::getTexNo(u32 field_0) const {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTexNo__13J2DTevBlock16CFUl.s"
}
#pragma pop


/* 802F1D4C-802F1D54 0008+00 rc=1 efc=0 rfr=False None .text      setFontNo__13J2DTevBlock16FUs                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock16::setFontNo(u16 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setFontNo__13J2DTevBlock16FUs.s"
}
#pragma pop


/* 802F1D54-802F1D5C 0008+00 rc=1 efc=0 rfr=False None .text      getFontNo__13J2DTevBlock16CFv                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock16::getFontNo() const {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getFontNo__13J2DTevBlock16CFv.s"
}
#pragma pop


/* 802F1D5C-802F1D80 0024+00 rc=1 efc=0 rfr=False None .text      setTevOrder__13J2DTevBlock16FUl11J2DTevOrder                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock16::setTevOrder(u32 field_0, J2DTevOrder field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTevOrder__13J2DTevBlock16FUl11J2DTevOrder.s"
}
#pragma pop


/* 802F1D80-802F1D94 0014+00 rc=1 efc=0 rfr=False None .text      getTevOrder__13J2DTevBlock16FUl                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock16::getTevOrder(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTevOrder__13J2DTevBlock16FUl.s"
}
#pragma pop


/* 802F1D94-802F1DC0 002C+00 rc=1 efc=0 rfr=False None .text      setTevColor__13J2DTevBlock16FUl13J2DGXColorS10               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock16::setTevColor(u32 field_0, J2DGXColorS10 field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTevColor__13J2DTevBlock16FUl13J2DGXColorS10.s"
}
#pragma pop


/* 802F1DC0-802F1DD4 0014+00 rc=1 efc=0 rfr=False None .text      getTevColor__13J2DTevBlock16FUl                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock16::getTevColor(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTevColor__13J2DTevBlock16FUl.s"
}
#pragma pop


/* 802F1DD4-802F1E00 002C+00 rc=1 efc=0 rfr=False None .text      setTevKColor__13J2DTevBlock16FUlQ28JUtility6TColor           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock16::setTevKColor(u32 field_0, JUtility::TColor field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTevKColor__13J2DTevBlock16FUlQ28JUtility6TColor.s"
}
#pragma pop


/* 802F1E00-802F1E14 0014+00 rc=1 efc=0 rfr=False None .text      getTevKColor__13J2DTevBlock16FUl                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock16::getTevKColor(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTevKColor__13J2DTevBlock16FUl.s"
}
#pragma pop


/* 802F1E14-802F1E20 000C+00 rc=1 efc=0 rfr=False None .text      setTevKColorSel__13J2DTevBlock16FUlUc                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock16::setTevKColorSel(u32 field_0, u8 field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTevKColorSel__13J2DTevBlock16FUlUc.s"
}
#pragma pop


/* 802F1E20-802F1E2C 000C+00 rc=1 efc=0 rfr=False None .text      getTevKColorSel__13J2DTevBlock16FUl                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock16::getTevKColorSel(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTevKColorSel__13J2DTevBlock16FUl.s"
}
#pragma pop


/* 802F1E2C-802F1E38 000C+00 rc=1 efc=0 rfr=False None .text      setTevKAlphaSel__13J2DTevBlock16FUlUc                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock16::setTevKAlphaSel(u32 field_0, u8 field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTevKAlphaSel__13J2DTevBlock16FUlUc.s"
}
#pragma pop


/* 802F1E38-802F1E44 000C+00 rc=1 efc=0 rfr=False None .text      getTevKAlphaSel__13J2DTevBlock16FUl                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock16::getTevKAlphaSel(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTevKAlphaSel__13J2DTevBlock16FUl.s"
}
#pragma pop


/* 802F1E44-802F1E4C 0008+00 rc=1 efc=0 rfr=False None .text      setTevStageNum__13J2DTevBlock16FUc                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock16::setTevStageNum(u8 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTevStageNum__13J2DTevBlock16FUc.s"
}
#pragma pop


/* 802F1E4C-802F1E54 0008+00 rc=1 efc=0 rfr=False None .text      getTevStageNum__13J2DTevBlock16CFv                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock16::getTevStageNum() const {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTevStageNum__13J2DTevBlock16CFv.s"
}
#pragma pop


/* 802F1E54-802F1E90 003C+00 rc=1 efc=0 rfr=False None .text      setTevStage__13J2DTevBlock16FUl11J2DTevStage                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock16::setTevStage(u32 field_0, J2DTevStage field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTevStage__13J2DTevBlock16FUl11J2DTevStage.s"
}
#pragma pop


/* 802F1E90-802F1EA4 0014+00 rc=1 efc=0 rfr=False None .text      getTevStage__13J2DTevBlock16FUl                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock16::getTevStage(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTevStage__13J2DTevBlock16FUl.s"
}
#pragma pop


/* 802F1EA4-802F1EDC 0038+00 rc=1 efc=0 rfr=False None .text      setTevSwapModeInfo__13J2DTevBlock16FUl18J2DTevSwapModeInfo   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock16::setTevSwapModeInfo(u32 field_0, J2DTevSwapModeInfo field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTevSwapModeInfo__13J2DTevBlock16FUl18J2DTevSwapModeInfo.s"
}
#pragma pop


/* 802F1EDC-802F1EEC 0010+00 rc=1 efc=0 rfr=False None .text      setTevSwapModeTable__13J2DTevBlock16FUl19J2DTevSwapModeTable */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock16::setTevSwapModeTable(u32 field_0, J2DTevSwapModeTable field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTevSwapModeTable__13J2DTevBlock16FUl19J2DTevSwapModeTable.s"
}
#pragma pop


/* 802F1EEC-802F1EFC 0010+00 rc=1 efc=0 rfr=False None .text      getTevSwapModeTable__13J2DTevBlock16FUl                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock16::getTevSwapModeTable(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTevSwapModeTable__13J2DTevBlock16FUl.s"
}
#pragma pop


/* 802F1EFC-802F1F10 0014+00 rc=1 efc=0 rfr=False None .text      setIndTevStage__13J2DTevBlock16FUl14J2DIndTevStage           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock16::setIndTevStage(u32 field_0, J2DIndTevStage field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setIndTevStage__13J2DTevBlock16FUl14J2DIndTevStage.s"
}
#pragma pop


/* 802F1F10-802F1F24 0014+00 rc=1 efc=0 rfr=False None .text      getIndTevStage__13J2DTevBlock16FUl                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock16::getIndTevStage(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getIndTevStage__13J2DTevBlock16FUl.s"
}
#pragma pop


/* 802F1F24-802F1F54 0030+00 rc=1 efc=0 rfr=False None .text      insertTexture__13J2DTevBlock16FUlPC7ResTIMG                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock16::insertTexture(u32 field_0, ResTIMG const* field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/insertTexture__13J2DTevBlock16FUlPC7ResTIMG.s"
}
#pragma pop


/* 802F1F54-802F1F74 0020+00 rc=1 efc=0 rfr=False None .text      getTexture__13J2DTevBlock16FUl                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock16::getTexture(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTexture__13J2DTevBlock16FUl.s"
}
#pragma pop


/* 802F1F74-802F1F94 0020+00 rc=1 efc=0 rfr=False None .text      getPalette__13J2DTevBlock16FUl                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock16::getPalette(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getPalette__13J2DTevBlock16FUl.s"
}
#pragma pop


/* 802F1F94-802F1F9C 0008+00 rc=1 efc=0 rfr=False None .text      getFont__13J2DTevBlock16Fv                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock16::getFont() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getFont__13J2DTevBlock16Fv.s"
}
#pragma pop


/* 802F1F9C-802F1FAC 0010+00 rc=1 efc=0 rfr=False None .text      setUndeleteFlag__13J2DTevBlock16FUc                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock16::setUndeleteFlag(u8 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setUndeleteFlag__13J2DTevBlock16FUc.s"
}
#pragma pop


/* 802F1FAC-802F1FB8 000C+00 rc=1 efc=0 rfr=False None .text      setFontUndeleteFlag__13J2DTevBlock16Fv                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock16::setFontUndeleteFlag() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setFontUndeleteFlag__13J2DTevBlock16Fv.s"
}
#pragma pop


/* 802F1FB8-802F1FC4 000C+00 rc=1 efc=0 rfr=False None .text      getType__12J2DTevBlock8Fv                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock8::getType() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getType__12J2DTevBlock8Fv.s"
}
#pragma pop


/* 802F1FC4-802F1FCC 0008+00 rc=1 efc=0 rfr=False None .text      getMaxStage__12J2DTevBlock8Fv                                */
s32 J2DTevBlock8::getMaxStage() {
	return 8;
}


/* 802F1FCC-802F1FDC 0010+00 rc=1 efc=0 rfr=False None .text      setTexNo__12J2DTevBlock8FUlUs                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock8::setTexNo(u32 field_0, u16 field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTexNo__12J2DTevBlock8FUlUs.s"
}
#pragma pop


/* 802F1FDC-802F1FEC 0010+00 rc=1 efc=0 rfr=False None .text      getTexNo__12J2DTevBlock8CFUl                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock8::getTexNo(u32 field_0) const {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTexNo__12J2DTevBlock8CFUl.s"
}
#pragma pop


/* 802F1FEC-802F1FF4 0008+00 rc=1 efc=0 rfr=False None .text      setFontNo__12J2DTevBlock8FUs                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock8::setFontNo(u16 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setFontNo__12J2DTevBlock8FUs.s"
}
#pragma pop


/* 802F1FF4-802F1FFC 0008+00 rc=1 efc=0 rfr=False None .text      getFontNo__12J2DTevBlock8CFv                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock8::getFontNo() const {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getFontNo__12J2DTevBlock8CFv.s"
}
#pragma pop


/* 802F1FFC-802F2020 0024+00 rc=1 efc=0 rfr=False None .text      setTevOrder__12J2DTevBlock8FUl11J2DTevOrder                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock8::setTevOrder(u32 field_0, J2DTevOrder field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTevOrder__12J2DTevBlock8FUl11J2DTevOrder.s"
}
#pragma pop


/* 802F2020-802F2034 0014+00 rc=1 efc=0 rfr=False None .text      getTevOrder__12J2DTevBlock8FUl                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock8::getTevOrder(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTevOrder__12J2DTevBlock8FUl.s"
}
#pragma pop


/* 802F2034-802F2060 002C+00 rc=1 efc=0 rfr=False None .text      setTevColor__12J2DTevBlock8FUl13J2DGXColorS10                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock8::setTevColor(u32 field_0, J2DGXColorS10 field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTevColor__12J2DTevBlock8FUl13J2DGXColorS10.s"
}
#pragma pop


/* 802F2060-802F2074 0014+00 rc=1 efc=0 rfr=False None .text      getTevColor__12J2DTevBlock8FUl                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock8::getTevColor(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTevColor__12J2DTevBlock8FUl.s"
}
#pragma pop


/* 802F2074-802F20A0 002C+00 rc=1 efc=0 rfr=False None .text      setTevKColor__12J2DTevBlock8FUlQ28JUtility6TColor            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock8::setTevKColor(u32 field_0, JUtility::TColor field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTevKColor__12J2DTevBlock8FUlQ28JUtility6TColor.s"
}
#pragma pop


/* 802F20A0-802F20B4 0014+00 rc=1 efc=0 rfr=False None .text      getTevKColor__12J2DTevBlock8FUl                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock8::getTevKColor(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTevKColor__12J2DTevBlock8FUl.s"
}
#pragma pop


/* 802F20B4-802F20C0 000C+00 rc=1 efc=0 rfr=False None .text      setTevKColorSel__12J2DTevBlock8FUlUc                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock8::setTevKColorSel(u32 field_0, u8 field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTevKColorSel__12J2DTevBlock8FUlUc.s"
}
#pragma pop


/* 802F20C0-802F20CC 000C+00 rc=1 efc=0 rfr=False None .text      getTevKColorSel__12J2DTevBlock8FUl                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock8::getTevKColorSel(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTevKColorSel__12J2DTevBlock8FUl.s"
}
#pragma pop


/* 802F20CC-802F20D8 000C+00 rc=1 efc=0 rfr=False None .text      setTevKAlphaSel__12J2DTevBlock8FUlUc                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock8::setTevKAlphaSel(u32 field_0, u8 field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTevKAlphaSel__12J2DTevBlock8FUlUc.s"
}
#pragma pop


/* 802F20D8-802F20E4 000C+00 rc=1 efc=0 rfr=False None .text      getTevKAlphaSel__12J2DTevBlock8FUl                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock8::getTevKAlphaSel(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTevKAlphaSel__12J2DTevBlock8FUl.s"
}
#pragma pop


/* 802F20E4-802F20EC 0008+00 rc=1 efc=0 rfr=False None .text      setTevStageNum__12J2DTevBlock8FUc                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock8::setTevStageNum(u8 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTevStageNum__12J2DTevBlock8FUc.s"
}
#pragma pop


/* 802F20EC-802F20F4 0008+00 rc=1 efc=0 rfr=False None .text      getTevStageNum__12J2DTevBlock8CFv                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock8::getTevStageNum() const {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTevStageNum__12J2DTevBlock8CFv.s"
}
#pragma pop


/* 802F20F4-802F2130 003C+00 rc=1 efc=0 rfr=False None .text      setTevStage__12J2DTevBlock8FUl11J2DTevStage                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock8::setTevStage(u32 field_0, J2DTevStage field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTevStage__12J2DTevBlock8FUl11J2DTevStage.s"
}
#pragma pop


/* 802F2130-802F2144 0014+00 rc=1 efc=0 rfr=False None .text      getTevStage__12J2DTevBlock8FUl                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock8::getTevStage(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTevStage__12J2DTevBlock8FUl.s"
}
#pragma pop


/* 802F2144-802F217C 0038+00 rc=1 efc=0 rfr=False None .text      setTevSwapModeInfo__12J2DTevBlock8FUl18J2DTevSwapModeInfo    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock8::setTevSwapModeInfo(u32 field_0, J2DTevSwapModeInfo field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTevSwapModeInfo__12J2DTevBlock8FUl18J2DTevSwapModeInfo.s"
}
#pragma pop


/* 802F217C-802F218C 0010+00 rc=1 efc=0 rfr=False None .text      setTevSwapModeTable__12J2DTevBlock8FUl19J2DTevSwapModeTable  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock8::setTevSwapModeTable(u32 field_0, J2DTevSwapModeTable field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTevSwapModeTable__12J2DTevBlock8FUl19J2DTevSwapModeTable.s"
}
#pragma pop


/* 802F218C-802F219C 0010+00 rc=1 efc=0 rfr=False None .text      getTevSwapModeTable__12J2DTevBlock8FUl                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock8::getTevSwapModeTable(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTevSwapModeTable__12J2DTevBlock8FUl.s"
}
#pragma pop


/* 802F219C-802F21B0 0014+00 rc=1 efc=0 rfr=False None .text      setIndTevStage__12J2DTevBlock8FUl14J2DIndTevStage            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock8::setIndTevStage(u32 field_0, J2DIndTevStage field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setIndTevStage__12J2DTevBlock8FUl14J2DIndTevStage.s"
}
#pragma pop


/* 802F21B0-802F21C4 0014+00 rc=1 efc=0 rfr=False None .text      getIndTevStage__12J2DTevBlock8FUl                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock8::getIndTevStage(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getIndTevStage__12J2DTevBlock8FUl.s"
}
#pragma pop


/* 802F21C4-802F21F4 0030+00 rc=1 efc=0 rfr=False None .text      insertTexture__12J2DTevBlock8FUlPC7ResTIMG                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock8::insertTexture(u32 field_0, ResTIMG const* field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/insertTexture__12J2DTevBlock8FUlPC7ResTIMG.s"
}
#pragma pop


/* 802F21F4-802F2214 0020+00 rc=1 efc=0 rfr=False None .text      getTexture__12J2DTevBlock8FUl                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock8::getTexture(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTexture__12J2DTevBlock8FUl.s"
}
#pragma pop


/* 802F2214-802F2234 0020+00 rc=1 efc=0 rfr=False None .text      getPalette__12J2DTevBlock8FUl                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock8::getPalette(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getPalette__12J2DTevBlock8FUl.s"
}
#pragma pop


/* 802F2234-802F223C 0008+00 rc=1 efc=0 rfr=False None .text      getFont__12J2DTevBlock8Fv                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock8::getFont() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getFont__12J2DTevBlock8Fv.s"
}
#pragma pop


/* 802F223C-802F224C 0010+00 rc=1 efc=0 rfr=False None .text      setUndeleteFlag__12J2DTevBlock8FUc                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock8::setUndeleteFlag(u8 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setUndeleteFlag__12J2DTevBlock8FUc.s"
}
#pragma pop


/* 802F224C-802F2258 000C+00 rc=1 efc=0 rfr=False None .text      setFontUndeleteFlag__12J2DTevBlock8Fv                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock8::setFontUndeleteFlag() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setFontUndeleteFlag__12J2DTevBlock8Fv.s"
}
#pragma pop


/* 802F2258-802F2264 000C+00 rc=1 efc=0 rfr=False None .text      getType__12J2DTevBlock4Fv                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock4::getType() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getType__12J2DTevBlock4Fv.s"
}
#pragma pop


/* 802F2264-802F226C 0008+00 rc=1 efc=0 rfr=False None .text      getMaxStage__12J2DTevBlock4Fv                                */
s32 J2DTevBlock4::getMaxStage() {
	return 4;
}


/* 802F226C-802F227C 0010+00 rc=1 efc=0 rfr=False None .text      setTexNo__12J2DTevBlock4FUlUs                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock4::setTexNo(u32 field_0, u16 field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTexNo__12J2DTevBlock4FUlUs.s"
}
#pragma pop


/* 802F227C-802F228C 0010+00 rc=1 efc=0 rfr=False None .text      getTexNo__12J2DTevBlock4CFUl                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock4::getTexNo(u32 field_0) const {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTexNo__12J2DTevBlock4CFUl.s"
}
#pragma pop


/* 802F228C-802F2294 0008+00 rc=1 efc=0 rfr=False None .text      setFontNo__12J2DTevBlock4FUs                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock4::setFontNo(u16 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setFontNo__12J2DTevBlock4FUs.s"
}
#pragma pop


/* 802F2294-802F229C 0008+00 rc=1 efc=0 rfr=False None .text      getFontNo__12J2DTevBlock4CFv                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock4::getFontNo() const {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getFontNo__12J2DTevBlock4CFv.s"
}
#pragma pop


/* 802F229C-802F22C0 0024+00 rc=1 efc=0 rfr=False None .text      setTevOrder__12J2DTevBlock4FUl11J2DTevOrder                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock4::setTevOrder(u32 field_0, J2DTevOrder field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTevOrder__12J2DTevBlock4FUl11J2DTevOrder.s"
}
#pragma pop


/* 802F22C0-802F22D4 0014+00 rc=1 efc=0 rfr=False None .text      getTevOrder__12J2DTevBlock4FUl                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock4::getTevOrder(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTevOrder__12J2DTevBlock4FUl.s"
}
#pragma pop


/* 802F22D4-802F2300 002C+00 rc=1 efc=0 rfr=False None .text      setTevColor__12J2DTevBlock4FUl13J2DGXColorS10                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock4::setTevColor(u32 field_0, J2DGXColorS10 field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTevColor__12J2DTevBlock4FUl13J2DGXColorS10.s"
}
#pragma pop


/* 802F2300-802F2314 0014+00 rc=1 efc=0 rfr=False None .text      getTevColor__12J2DTevBlock4FUl                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock4::getTevColor(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTevColor__12J2DTevBlock4FUl.s"
}
#pragma pop


/* 802F2314-802F2340 002C+00 rc=1 efc=0 rfr=False None .text      setTevKColor__12J2DTevBlock4FUlQ28JUtility6TColor            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock4::setTevKColor(u32 field_0, JUtility::TColor field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTevKColor__12J2DTevBlock4FUlQ28JUtility6TColor.s"
}
#pragma pop


/* 802F2340-802F2354 0014+00 rc=1 efc=0 rfr=False None .text      getTevKColor__12J2DTevBlock4FUl                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock4::getTevKColor(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTevKColor__12J2DTevBlock4FUl.s"
}
#pragma pop


/* 802F2354-802F2360 000C+00 rc=1 efc=0 rfr=False None .text      setTevKColorSel__12J2DTevBlock4FUlUc                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock4::setTevKColorSel(u32 field_0, u8 field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTevKColorSel__12J2DTevBlock4FUlUc.s"
}
#pragma pop


/* 802F2360-802F236C 000C+00 rc=1 efc=0 rfr=False None .text      getTevKColorSel__12J2DTevBlock4FUl                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock4::getTevKColorSel(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTevKColorSel__12J2DTevBlock4FUl.s"
}
#pragma pop


/* 802F236C-802F2378 000C+00 rc=1 efc=0 rfr=False None .text      setTevKAlphaSel__12J2DTevBlock4FUlUc                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock4::setTevKAlphaSel(u32 field_0, u8 field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTevKAlphaSel__12J2DTevBlock4FUlUc.s"
}
#pragma pop


/* 802F2378-802F2384 000C+00 rc=1 efc=0 rfr=False None .text      getTevKAlphaSel__12J2DTevBlock4FUl                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock4::getTevKAlphaSel(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTevKAlphaSel__12J2DTevBlock4FUl.s"
}
#pragma pop


/* 802F2384-802F238C 0008+00 rc=1 efc=0 rfr=False None .text      setTevStageNum__12J2DTevBlock4FUc                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock4::setTevStageNum(u8 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTevStageNum__12J2DTevBlock4FUc.s"
}
#pragma pop


/* 802F238C-802F2394 0008+00 rc=1 efc=0 rfr=False None .text      getTevStageNum__12J2DTevBlock4CFv                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock4::getTevStageNum() const {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTevStageNum__12J2DTevBlock4CFv.s"
}
#pragma pop


/* 802F2394-802F23D0 003C+00 rc=1 efc=0 rfr=False None .text      setTevStage__12J2DTevBlock4FUl11J2DTevStage                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock4::setTevStage(u32 field_0, J2DTevStage field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTevStage__12J2DTevBlock4FUl11J2DTevStage.s"
}
#pragma pop


/* 802F23D0-802F23E4 0014+00 rc=1 efc=0 rfr=False None .text      getTevStage__12J2DTevBlock4FUl                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock4::getTevStage(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTevStage__12J2DTevBlock4FUl.s"
}
#pragma pop


/* 802F23E4-802F241C 0038+00 rc=1 efc=0 rfr=False None .text      setTevSwapModeInfo__12J2DTevBlock4FUl18J2DTevSwapModeInfo    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock4::setTevSwapModeInfo(u32 field_0, J2DTevSwapModeInfo field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTevSwapModeInfo__12J2DTevBlock4FUl18J2DTevSwapModeInfo.s"
}
#pragma pop


/* 802F241C-802F242C 0010+00 rc=1 efc=0 rfr=False None .text      setTevSwapModeTable__12J2DTevBlock4FUl19J2DTevSwapModeTable  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock4::setTevSwapModeTable(u32 field_0, J2DTevSwapModeTable field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTevSwapModeTable__12J2DTevBlock4FUl19J2DTevSwapModeTable.s"
}
#pragma pop


/* 802F242C-802F243C 0010+00 rc=1 efc=0 rfr=False None .text      getTevSwapModeTable__12J2DTevBlock4FUl                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock4::getTevSwapModeTable(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTevSwapModeTable__12J2DTevBlock4FUl.s"
}
#pragma pop


/* 802F243C-802F2450 0014+00 rc=1 efc=0 rfr=False None .text      setIndTevStage__12J2DTevBlock4FUl14J2DIndTevStage            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock4::setIndTevStage(u32 field_0, J2DIndTevStage field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setIndTevStage__12J2DTevBlock4FUl14J2DIndTevStage.s"
}
#pragma pop


/* 802F2450-802F2464 0014+00 rc=1 efc=0 rfr=False None .text      getIndTevStage__12J2DTevBlock4FUl                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock4::getIndTevStage(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getIndTevStage__12J2DTevBlock4FUl.s"
}
#pragma pop


/* 802F2464-802F2494 0030+00 rc=1 efc=0 rfr=False None .text      insertTexture__12J2DTevBlock4FUlPC7ResTIMG                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock4::insertTexture(u32 field_0, ResTIMG const* field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/insertTexture__12J2DTevBlock4FUlPC7ResTIMG.s"
}
#pragma pop


/* 802F2494-802F24B4 0020+00 rc=1 efc=0 rfr=False None .text      getTexture__12J2DTevBlock4FUl                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock4::getTexture(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTexture__12J2DTevBlock4FUl.s"
}
#pragma pop


/* 802F24B4-802F24D4 0020+00 rc=1 efc=0 rfr=False None .text      getPalette__12J2DTevBlock4FUl                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock4::getPalette(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getPalette__12J2DTevBlock4FUl.s"
}
#pragma pop


/* 802F24D4-802F24DC 0008+00 rc=1 efc=0 rfr=False None .text      getFont__12J2DTevBlock4Fv                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock4::getFont() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getFont__12J2DTevBlock4Fv.s"
}
#pragma pop


/* 802F24DC-802F24EC 0010+00 rc=1 efc=0 rfr=False None .text      setUndeleteFlag__12J2DTevBlock4FUc                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock4::setUndeleteFlag(u8 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setUndeleteFlag__12J2DTevBlock4FUc.s"
}
#pragma pop


/* 802F24EC-802F24FC 0010+00 rc=1 efc=0 rfr=False None .text      setFontUndeleteFlag__12J2DTevBlock4Fv                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock4::setFontUndeleteFlag() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setFontUndeleteFlag__12J2DTevBlock4Fv.s"
}
#pragma pop


/* 802F24FC-802F2508 000C+00 rc=1 efc=0 rfr=False None .text      getType__12J2DTevBlock2Fv                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock2::getType() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getType__12J2DTevBlock2Fv.s"
}
#pragma pop


/* 802F2508-802F2510 0008+00 rc=1 efc=0 rfr=False None .text      getMaxStage__12J2DTevBlock2Fv                                */
s32 J2DTevBlock2::getMaxStage() {
	return 2;
}


/* 802F2510-802F2520 0010+00 rc=1 efc=0 rfr=False None .text      setTexNo__12J2DTevBlock2FUlUs                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock2::setTexNo(u32 field_0, u16 field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTexNo__12J2DTevBlock2FUlUs.s"
}
#pragma pop


/* 802F2520-802F2530 0010+00 rc=1 efc=0 rfr=False None .text      getTexNo__12J2DTevBlock2CFUl                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock2::getTexNo(u32 field_0) const {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTexNo__12J2DTevBlock2CFUl.s"
}
#pragma pop


/* 802F2530-802F2538 0008+00 rc=1 efc=0 rfr=False None .text      setFontNo__12J2DTevBlock2FUs                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock2::setFontNo(u16 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setFontNo__12J2DTevBlock2FUs.s"
}
#pragma pop


/* 802F2538-802F2540 0008+00 rc=1 efc=0 rfr=False None .text      getFontNo__12J2DTevBlock2CFv                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock2::getFontNo() const {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getFontNo__12J2DTevBlock2CFv.s"
}
#pragma pop


/* 802F2540-802F2564 0024+00 rc=1 efc=0 rfr=False None .text      setTevOrder__12J2DTevBlock2FUl11J2DTevOrder                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock2::setTevOrder(u32 field_0, J2DTevOrder field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTevOrder__12J2DTevBlock2FUl11J2DTevOrder.s"
}
#pragma pop


/* 802F2564-802F2578 0014+00 rc=1 efc=0 rfr=False None .text      getTevOrder__12J2DTevBlock2FUl                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock2::getTevOrder(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTevOrder__12J2DTevBlock2FUl.s"
}
#pragma pop


/* 802F2578-802F25A4 002C+00 rc=1 efc=0 rfr=False None .text      setTevColor__12J2DTevBlock2FUl13J2DGXColorS10                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock2::setTevColor(u32 field_0, J2DGXColorS10 field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTevColor__12J2DTevBlock2FUl13J2DGXColorS10.s"
}
#pragma pop


/* 802F25A4-802F25B8 0014+00 rc=1 efc=0 rfr=False None .text      getTevColor__12J2DTevBlock2FUl                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock2::getTevColor(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTevColor__12J2DTevBlock2FUl.s"
}
#pragma pop


/* 802F25B8-802F25E4 002C+00 rc=1 efc=0 rfr=False None .text      setTevKColor__12J2DTevBlock2FUlQ28JUtility6TColor            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock2::setTevKColor(u32 field_0, JUtility::TColor field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTevKColor__12J2DTevBlock2FUlQ28JUtility6TColor.s"
}
#pragma pop


/* 802F25E4-802F25F8 0014+00 rc=1 efc=0 rfr=False None .text      getTevKColor__12J2DTevBlock2FUl                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock2::getTevKColor(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTevKColor__12J2DTevBlock2FUl.s"
}
#pragma pop


/* 802F25F8-802F2604 000C+00 rc=1 efc=0 rfr=False None .text      setTevKColorSel__12J2DTevBlock2FUlUc                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock2::setTevKColorSel(u32 field_0, u8 field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTevKColorSel__12J2DTevBlock2FUlUc.s"
}
#pragma pop


/* 802F2604-802F2610 000C+00 rc=1 efc=0 rfr=False None .text      getTevKColorSel__12J2DTevBlock2FUl                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock2::getTevKColorSel(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTevKColorSel__12J2DTevBlock2FUl.s"
}
#pragma pop


/* 802F2610-802F261C 000C+00 rc=1 efc=0 rfr=False None .text      setTevKAlphaSel__12J2DTevBlock2FUlUc                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock2::setTevKAlphaSel(u32 field_0, u8 field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTevKAlphaSel__12J2DTevBlock2FUlUc.s"
}
#pragma pop


/* 802F261C-802F2628 000C+00 rc=1 efc=0 rfr=False None .text      getTevKAlphaSel__12J2DTevBlock2FUl                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock2::getTevKAlphaSel(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTevKAlphaSel__12J2DTevBlock2FUl.s"
}
#pragma pop


/* 802F2628-802F2630 0008+00 rc=1 efc=0 rfr=False None .text      setTevStageNum__12J2DTevBlock2FUc                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock2::setTevStageNum(u8 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTevStageNum__12J2DTevBlock2FUc.s"
}
#pragma pop


/* 802F2630-802F2638 0008+00 rc=1 efc=0 rfr=False None .text      getTevStageNum__12J2DTevBlock2CFv                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock2::getTevStageNum() const {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTevStageNum__12J2DTevBlock2CFv.s"
}
#pragma pop


/* 802F2638-802F2674 003C+00 rc=1 efc=0 rfr=False None .text      setTevStage__12J2DTevBlock2FUl11J2DTevStage                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock2::setTevStage(u32 field_0, J2DTevStage field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTevStage__12J2DTevBlock2FUl11J2DTevStage.s"
}
#pragma pop


/* 802F2674-802F2688 0014+00 rc=1 efc=0 rfr=False None .text      getTevStage__12J2DTevBlock2FUl                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock2::getTevStage(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTevStage__12J2DTevBlock2FUl.s"
}
#pragma pop


/* 802F2688-802F26C0 0038+00 rc=1 efc=0 rfr=False None .text      setTevSwapModeInfo__12J2DTevBlock2FUl18J2DTevSwapModeInfo    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock2::setTevSwapModeInfo(u32 field_0, J2DTevSwapModeInfo field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTevSwapModeInfo__12J2DTevBlock2FUl18J2DTevSwapModeInfo.s"
}
#pragma pop


/* 802F26C0-802F26D0 0010+00 rc=1 efc=0 rfr=False None .text      setTevSwapModeTable__12J2DTevBlock2FUl19J2DTevSwapModeTable  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock2::setTevSwapModeTable(u32 field_0, J2DTevSwapModeTable field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTevSwapModeTable__12J2DTevBlock2FUl19J2DTevSwapModeTable.s"
}
#pragma pop


/* 802F26D0-802F26E0 0010+00 rc=1 efc=0 rfr=False None .text      getTevSwapModeTable__12J2DTevBlock2FUl                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock2::getTevSwapModeTable(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTevSwapModeTable__12J2DTevBlock2FUl.s"
}
#pragma pop


/* 802F26E0-802F26F4 0014+00 rc=1 efc=0 rfr=False None .text      setIndTevStage__12J2DTevBlock2FUl14J2DIndTevStage            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock2::setIndTevStage(u32 field_0, J2DIndTevStage field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setIndTevStage__12J2DTevBlock2FUl14J2DIndTevStage.s"
}
#pragma pop


/* 802F26F4-802F2708 0014+00 rc=1 efc=0 rfr=False None .text      getIndTevStage__12J2DTevBlock2FUl                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock2::getIndTevStage(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getIndTevStage__12J2DTevBlock2FUl.s"
}
#pragma pop


/* 802F2708-802F2738 0030+00 rc=1 efc=0 rfr=False None .text      insertTexture__12J2DTevBlock2FUlPC7ResTIMG                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock2::insertTexture(u32 field_0, ResTIMG const* field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/insertTexture__12J2DTevBlock2FUlPC7ResTIMG.s"
}
#pragma pop


/* 802F2738-802F2758 0020+00 rc=1 efc=0 rfr=False None .text      getTexture__12J2DTevBlock2FUl                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock2::getTexture(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTexture__12J2DTevBlock2FUl.s"
}
#pragma pop


/* 802F2758-802F2778 0020+00 rc=1 efc=0 rfr=False None .text      getPalette__12J2DTevBlock2FUl                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock2::getPalette(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getPalette__12J2DTevBlock2FUl.s"
}
#pragma pop


/* 802F2778-802F2780 0008+00 rc=1 efc=0 rfr=False None .text      getFont__12J2DTevBlock2Fv                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock2::getFont() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getFont__12J2DTevBlock2Fv.s"
}
#pragma pop


/* 802F2780-802F2790 0010+00 rc=1 efc=0 rfr=False None .text      setUndeleteFlag__12J2DTevBlock2FUc                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock2::setUndeleteFlag(u8 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setUndeleteFlag__12J2DTevBlock2FUc.s"
}
#pragma pop


/* 802F2790-802F27A0 0010+00 rc=1 efc=0 rfr=False None .text      setFontUndeleteFlag__12J2DTevBlock2Fv                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock2::setFontUndeleteFlag() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setFontUndeleteFlag__12J2DTevBlock2Fv.s"
}
#pragma pop


/* 802F27A0-802F27AC 000C+00 rc=1 efc=0 rfr=False None .text      getType__12J2DTevBlock1Fv                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock1::getType() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getType__12J2DTevBlock1Fv.s"
}
#pragma pop


/* 802F27AC-802F27B4 0008+00 rc=1 efc=0 rfr=False None .text      getMaxStage__12J2DTevBlock1Fv                                */
bool J2DTevBlock1::getMaxStage() {
	return true;
}


/* 802F27B4-802F27C4 0010+00 rc=1 efc=0 rfr=False None .text      setTexNo__12J2DTevBlock1FUlUs                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock1::setTexNo(u32 field_0, u16 field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTexNo__12J2DTevBlock1FUlUs.s"
}
#pragma pop


/* 802F27C4-802F27D4 0010+00 rc=1 efc=0 rfr=False None .text      getTexNo__12J2DTevBlock1CFUl                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock1::getTexNo(u32 field_0) const {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTexNo__12J2DTevBlock1CFUl.s"
}
#pragma pop


/* 802F27D4-802F27DC 0008+00 rc=1 efc=0 rfr=False None .text      setFontNo__12J2DTevBlock1FUs                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock1::setFontNo(u16 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setFontNo__12J2DTevBlock1FUs.s"
}
#pragma pop


/* 802F27DC-802F27E4 0008+00 rc=1 efc=0 rfr=False None .text      getFontNo__12J2DTevBlock1CFv                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock1::getFontNo() const {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getFontNo__12J2DTevBlock1CFv.s"
}
#pragma pop


/* 802F27E4-802F2808 0024+00 rc=1 efc=0 rfr=False None .text      setTevOrder__12J2DTevBlock1FUl11J2DTevOrder                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock1::setTevOrder(u32 field_0, J2DTevOrder field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTevOrder__12J2DTevBlock1FUl11J2DTevOrder.s"
}
#pragma pop


/* 802F2808-802F281C 0014+00 rc=1 efc=0 rfr=False None .text      getTevOrder__12J2DTevBlock1FUl                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock1::getTevOrder(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTevOrder__12J2DTevBlock1FUl.s"
}
#pragma pop


/* 802F281C-802F2848 002C+00 rc=1 efc=0 rfr=False None .text      setTevColor__12J2DTevBlock1FUl13J2DGXColorS10                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock1::setTevColor(u32 field_0, J2DGXColorS10 field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTevColor__12J2DTevBlock1FUl13J2DGXColorS10.s"
}
#pragma pop


/* 802F2848-802F285C 0014+00 rc=1 efc=0 rfr=False None .text      getTevColor__12J2DTevBlock1FUl                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock1::getTevColor(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTevColor__12J2DTevBlock1FUl.s"
}
#pragma pop


/* 802F285C-802F2888 002C+00 rc=1 efc=0 rfr=False None .text      setTevKColor__12J2DTevBlock1FUlQ28JUtility6TColor            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock1::setTevKColor(u32 field_0, JUtility::TColor field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTevKColor__12J2DTevBlock1FUlQ28JUtility6TColor.s"
}
#pragma pop


/* 802F2888-802F289C 0014+00 rc=1 efc=0 rfr=False None .text      getTevKColor__12J2DTevBlock1FUl                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock1::getTevKColor(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTevKColor__12J2DTevBlock1FUl.s"
}
#pragma pop


/* 802F289C-802F28A8 000C+00 rc=1 efc=0 rfr=False None .text      setTevKColorSel__12J2DTevBlock1FUlUc                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock1::setTevKColorSel(u32 field_0, u8 field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTevKColorSel__12J2DTevBlock1FUlUc.s"
}
#pragma pop


/* 802F28A8-802F28B4 000C+00 rc=1 efc=0 rfr=False None .text      getTevKColorSel__12J2DTevBlock1FUl                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock1::getTevKColorSel(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTevKColorSel__12J2DTevBlock1FUl.s"
}
#pragma pop


/* 802F28B4-802F28C0 000C+00 rc=1 efc=0 rfr=False None .text      setTevKAlphaSel__12J2DTevBlock1FUlUc                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock1::setTevKAlphaSel(u32 field_0, u8 field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTevKAlphaSel__12J2DTevBlock1FUlUc.s"
}
#pragma pop


/* 802F28C0-802F28CC 000C+00 rc=1 efc=0 rfr=False None .text      getTevKAlphaSel__12J2DTevBlock1FUl                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock1::getTevKAlphaSel(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTevKAlphaSel__12J2DTevBlock1FUl.s"
}
#pragma pop


/* 802F28CC-802F28D0 0004+00 rc=1 efc=0 rfr=False None .text      setTevStageNum__12J2DTevBlock1FUc                            */
void J2DTevBlock1::setTevStageNum(u8 field_0) {
	/* empty function */
}


/* 802F28D0-802F28D8 0008+00 rc=1 efc=0 rfr=False None .text      getTevStageNum__12J2DTevBlock1CFv                            */
bool J2DTevBlock1::getTevStageNum() const {
	return true;
}


/* 802F28D8-802F2914 003C+00 rc=1 efc=0 rfr=False None .text      setTevStage__12J2DTevBlock1FUl11J2DTevStage                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock1::setTevStage(u32 field_0, J2DTevStage field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTevStage__12J2DTevBlock1FUl11J2DTevStage.s"
}
#pragma pop


/* 802F2914-802F2928 0014+00 rc=1 efc=0 rfr=False None .text      getTevStage__12J2DTevBlock1FUl                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock1::getTevStage(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTevStage__12J2DTevBlock1FUl.s"
}
#pragma pop


/* 802F2928-802F2960 0038+00 rc=1 efc=0 rfr=False None .text      setTevSwapModeInfo__12J2DTevBlock1FUl18J2DTevSwapModeInfo    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock1::setTevSwapModeInfo(u32 field_0, J2DTevSwapModeInfo field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTevSwapModeInfo__12J2DTevBlock1FUl18J2DTevSwapModeInfo.s"
}
#pragma pop


/* 802F2960-802F2970 0010+00 rc=1 efc=0 rfr=False None .text      setTevSwapModeTable__12J2DTevBlock1FUl19J2DTevSwapModeTable  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock1::setTevSwapModeTable(u32 field_0, J2DTevSwapModeTable field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTevSwapModeTable__12J2DTevBlock1FUl19J2DTevSwapModeTable.s"
}
#pragma pop


/* 802F2970-802F2980 0010+00 rc=1 efc=0 rfr=False None .text      getTevSwapModeTable__12J2DTevBlock1FUl                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock1::getTevSwapModeTable(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTevSwapModeTable__12J2DTevBlock1FUl.s"
}
#pragma pop


/* 802F2980-802F2994 0014+00 rc=1 efc=0 rfr=False None .text      setIndTevStage__12J2DTevBlock1FUl14J2DIndTevStage            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock1::setIndTevStage(u32 field_0, J2DIndTevStage field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setIndTevStage__12J2DTevBlock1FUl14J2DIndTevStage.s"
}
#pragma pop


/* 802F2994-802F29A8 0014+00 rc=1 efc=0 rfr=False None .text      getIndTevStage__12J2DTevBlock1FUl                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock1::getIndTevStage(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getIndTevStage__12J2DTevBlock1FUl.s"
}
#pragma pop


/* 802F29A8-802F29D8 0030+00 rc=1 efc=0 rfr=False None .text      insertTexture__12J2DTevBlock1FUlPC7ResTIMG                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock1::insertTexture(u32 field_0, ResTIMG const* field_1) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/insertTexture__12J2DTevBlock1FUlPC7ResTIMG.s"
}
#pragma pop


/* 802F29D8-802F29F8 0020+00 rc=1 efc=0 rfr=False None .text      getTexture__12J2DTevBlock1FUl                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock1::getTexture(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getTexture__12J2DTevBlock1FUl.s"
}
#pragma pop


/* 802F29F8-802F2A18 0020+00 rc=1 efc=0 rfr=False None .text      getPalette__12J2DTevBlock1FUl                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock1::getPalette(u32 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getPalette__12J2DTevBlock1FUl.s"
}
#pragma pop


/* 802F2A18-802F2A20 0008+00 rc=1 efc=0 rfr=False None .text      getFont__12J2DTevBlock1Fv                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock1::getFont() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/getFont__12J2DTevBlock1Fv.s"
}
#pragma pop


/* 802F2A20-802F2A30 0010+00 rc=1 efc=0 rfr=False None .text      setUndeleteFlag__12J2DTevBlock1FUc                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock1::setUndeleteFlag(u8 field_0) {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setUndeleteFlag__12J2DTevBlock1FUc.s"
}
#pragma pop


/* 802F2A30-802F2A40 0010+00 rc=1 efc=0 rfr=False None .text      setFontUndeleteFlag__12J2DTevBlock1Fv                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTevBlock1::setFontUndeleteFlag() {
	nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setFontUndeleteFlag__12J2DTevBlock1Fv.s"
}
#pragma pop


/* 802F2A40-802F2A44 0004+00 rc=1 efc=0 rfr=False None .text      initialize__11J2DTevBlockFv                                  */
void J2DTevBlock::initialize() {
	/* empty function */
}


/* 802F2A44-802F2A48 0004+00 rc=1 efc=0 rfr=False None .text      loadTexture__11J2DTevBlockF11_GXTexMapIDUl                   */
void J2DTevBlock::loadTexture(_GXTexMapID field_0, u32 field_1) {
	/* empty function */
}


/* 802F2A48-802F2A4C 0004+00 rc=1 efc=0 rfr=False None .text      setFontNo__11J2DTevBlockFUs                                  */
void J2DTevBlock::setFontNo(u16 field_0) {
	/* empty function */
}


/* 802F2A4C-802F2A50 0004+00 rc=1 efc=0 rfr=False None .text      setTevOrder__11J2DTevBlockFUl11J2DTevOrder                   */
void J2DTevBlock::setTevOrder(u32 field_0, J2DTevOrder field_1) {
	/* empty function */
}


/* 802F2A50-802F2A54 0004+00 rc=1 efc=0 rfr=False None .text      setTevKColorSel__11J2DTevBlockFUlUc                          */
void J2DTevBlock::setTevKColorSel(u32 field_0, u8 field_1) {
	/* empty function */
}


/* 802F2A54-802F2A58 0004+00 rc=1 efc=0 rfr=False None .text      setTevKAlphaSel__11J2DTevBlockFUlUc                          */
void J2DTevBlock::setTevKAlphaSel(u32 field_0, u8 field_1) {
	/* empty function */
}


/* 802F2A58-802F2A5C 0004+00 rc=1 efc=0 rfr=False None .text      setTevStageNum__11J2DTevBlockFUc                             */
void J2DTevBlock::setTevStageNum(u8 field_0) {
	/* empty function */
}


/* 802F2A5C-802F2A60 0004+00 rc=1 efc=0 rfr=False None .text      setTevStage__11J2DTevBlockFUl11J2DTevStage                   */
void J2DTevBlock::setTevStage(u32 field_0, J2DTevStage field_1) {
	/* empty function */
}


/* 802F2A60-802F2A64 0004+00 rc=1 efc=0 rfr=False None .text      setTevSwapModeInfo__11J2DTevBlockFUl18J2DTevSwapModeInfo     */
void J2DTevBlock::setTevSwapModeInfo(u32 field_0, J2DTevSwapModeInfo field_1) {
	/* empty function */
}


/* 802F2A64-802F2A68 0004+00 rc=1 efc=0 rfr=False None .text      setTevSwapModeTable__11J2DTevBlockFUl19J2DTevSwapModeTable   */
void J2DTevBlock::setTevSwapModeTable(u32 field_0, J2DTevSwapModeTable field_1) {
	/* empty function */
}


/* 802F2A68-802F2A6C 0004+00 rc=1 efc=0 rfr=False None .text      setIndTevStage__11J2DTevBlockFUl14J2DIndTevStage             */
void J2DTevBlock::setIndTevStage(u32 field_0, J2DIndTevStage field_1) {
	/* empty function */
}


/* 802F2A6C-802F2A74 0008+00 rc=1 efc=0 rfr=False None .text      insertTexture__11J2DTevBlockFUlP10JUTTexture                 */
bool J2DTevBlock::insertTexture(u32 field_0, JUTTexture* field_1) {
	return false;
}


/* 802F2A74-802F2A7C 0008+00 rc=1 efc=0 rfr=False None .text      insertTexture__11J2DTevBlockFUlPC7ResTIMGP10JUTPalette       */
bool J2DTevBlock::insertTexture(u32 field_0, ResTIMG const* field_1, JUTPalette* field_2) {
	return false;
}


/* 802F2A7C-802F2A84 0008+00 rc=1 efc=0 rfr=False None .text      insertTexture__11J2DTevBlockFUlPC7ResTIMG                    */
bool J2DTevBlock::insertTexture(u32 field_0, ResTIMG const* field_1) {
	return false;
}


/* 802F2A84-802F2A8C 0008+00 rc=1 efc=0 rfr=False None .text      setTexture__11J2DTevBlockFUlP10JUTTexture                    */
bool J2DTevBlock::setTexture(u32 field_0, JUTTexture* field_1) {
	return false;
}


/* 802F2A8C-802F2A94 0008+00 rc=1 efc=0 rfr=False None .text      setTexture__11J2DTevBlockFUlPC7ResTIMG                       */
bool J2DTevBlock::setTexture(u32 field_0, ResTIMG const* field_1) {
	return false;
}


/* 802F2A94-802F2A9C 0008+00 rc=1 efc=0 rfr=False None .text      removeTexture__11J2DTevBlockFUl                              */
bool J2DTevBlock::removeTexture(u32 field_0) {
	return false;
}


/* 802F2A9C-802F2AA4 0008+00 rc=1 efc=0 rfr=False None .text      setFont__11J2DTevBlockFP7JUTFont                             */
bool J2DTevBlock::setFont(JUTFont* field_0) {
	return false;
}


/* 802F2AA4-802F2AAC 0008+00 rc=1 efc=0 rfr=False None .text      setFont__11J2DTevBlockFP7ResFONT                             */
bool J2DTevBlock::setFont(ResFONT* field_0) {
	return false;
}


/* 802F2AAC-802F2AB4 0008+00 rc=1 efc=0 rfr=False None .text      setPalette__11J2DTevBlockFUlPC7ResTLUT                       */
bool J2DTevBlock::setPalette(u32 field_0, ResTLUT const* field_1) {
	return false;
}


/* 802F2AB4-802F2ABC 0008+00 rc=1 efc=0 rfr=False None .text      prepareTexture__11J2DTevBlockFUc                             */
bool J2DTevBlock::prepareTexture(u8 field_0) {
	return false;
}


/* 802F2ABC-802F2AC4 0008+00 rc=1 efc=0 rfr=False None .text      getFont__11J2DTevBlockFv                                     */
bool J2DTevBlock::getFont() {
	return false;
}


/* 802F2AC4-802F2AC8 0004+00 rc=1 efc=0 rfr=False None .text      shiftDeleteFlag__11J2DTevBlockFUcb                           */
void J2DTevBlock::shiftDeleteFlag(u8 field_0, bool field_1) {
	/* empty function */
}


/* 802F2AC8-802F2ACC 0004+00 rc=1 efc=0 rfr=False None .text      setUndeleteFlag__11J2DTevBlockFUc                            */
void J2DTevBlock::setUndeleteFlag(u8 field_0) {
	/* empty function */
}


/* 802F2ACC-802F2AD0 0004+00 rc=1 efc=0 rfr=False None .text      setFontUndeleteFlag__11J2DTevBlockFv                         */
void J2DTevBlock::setFontUndeleteFlag() {
	/* empty function */
}


