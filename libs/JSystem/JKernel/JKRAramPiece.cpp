// 
// Generated By: dol2asm
// Translation Unit: JKRAramPiece
// 

#include "dolphin/types.h"

// 
// Types:
// 

struct JKRAramBlock {
};

struct JKRAMCommand {
	/* 802D39EC */ JKRAMCommand();
	/* 802D3A5C */ ~JKRAMCommand();
};

struct JKRAramPiece {
	/* 802D35F4 */ void sendCommand(JKRAMCommand*);
	/* 802D3770 */ void sync(JKRAMCommand*, int);
	/* 802D3838 */ void orderSync(int, u32, u32, u32, JKRAramBlock*);
	/* 802D38CC */ void startDMA(JKRAMCommand*);
	/* 802D3944 */ void doneDMA(u32);
};

struct JKRHeap {
	/* 802CE500 */ void free(void*, JKRHeap*);
};

template <typename A0>
struct JSUList { };
/* JSUList<JKRAMCommand> */
struct JSUList__template5 {
	/* 802D2DF0 */ ~JSUList__template5();
};

struct JKRDecompCommand {
};

struct JKRDecomp {
	/* 802DB8D0 */ void sendCommand(JKRDecompCommand*);
};

struct JSUPtrLink {
	/* 802DBDFC */ JSUPtrLink(void*);
	/* 802DBE14 */ ~JSUPtrLink();
};

struct JSUPtrList {
	/* 802DBF14 */ void initiate();
	/* 802DBF4C */ void append(JSUPtrLink*);
	/* 802DC15C */ void remove(JSUPtrLink*);
};

struct JUTException {
	/* 802E21FC */ void panic_f(char const*, int, char const*, ...);
};

// 
// Forward References:
// 

extern "C" void prepareCommand__12JKRAramPieceFiUlUlUlP12JKRAramBlockPFUl_v(); // 1
extern "C" void orderAsync__12JKRAramPieceFiUlUlUlP12JKRAramBlockPFUl_v(); // 1
extern "C" void __sinit_JKRAramPiece_cpp(); // 1

extern "C" void prepareCommand__12JKRAramPieceFiUlUlUlP12JKRAramBlockPFUl_v(); // 1
extern "C" void sendCommand__12JKRAramPieceFP12JKRAMCommand(); // 1
extern "C" void orderAsync__12JKRAramPieceFiUlUlUlP12JKRAramBlockPFUl_v(); // 1
extern "C" void sync__12JKRAramPieceFP12JKRAMCommandi(); // 1
extern "C" void orderSync__12JKRAramPieceFiUlUlUlP12JKRAramBlock(); // 1
extern "C" void startDMA__12JKRAramPieceFP12JKRAMCommand(); // 1
extern "C" void doneDMA__12JKRAramPieceFUl(); // 1
extern "C" void __ct__12JKRAMCommandFv(); // 1
extern "C" void __dt__12JKRAMCommandFv(); // 1
extern "C" void __sinit_JKRAramPiece_cpp(); // 1
SECTION_RODATA extern const char* const JKRAramPiece__stringBase0;
SECTION_BSS extern u8 JKRAramPiece__lit_492[12];
SECTION_BSS extern u8 sAramPieceCommandList__12JKRAramPiece[12];
SECTION_BSS extern u8 mMutex__12JKRAramPiece[24];

// 
// External References:
// 

extern "C" void OSReport(); // 1
void* operator new(u32, JKRHeap*, int); // 2
void operator delete(void*); // 2
extern "C" void DCInvalidateRange(); // 1
extern "C" void DCStoreRange(); // 1
extern "C" void OSInitMessageQueue(); // 1
extern "C" void OSSendMessage(); // 1
extern "C" void OSReceiveMessage(); // 1
extern "C" void OSLockMutex(); // 1
extern "C" void OSUnlockMutex(); // 1
extern "C" void ARQPostRequest(); // 1
extern "C" void __register_global_object(); // 1
extern "C" void _savegpr_25(); // 1
extern "C" void _savegpr_26(); // 1
extern "C" void _savegpr_27(); // 1
extern "C" void _restgpr_25(); // 1
extern "C" void _restgpr_26(); // 1
extern "C" void _restgpr_27(); // 1

extern "C" void OSReport(); // 1
extern "C" void free__7JKRHeapFPvP7JKRHeap(); // 1
extern "C" void* __nw__FUlP7JKRHeapi(); // 1
extern "C" void __dl__FPv(); // 1
extern "C" void func_802D2DF0(); // 1
extern "C" void sendCommand__9JKRDecompFP16JKRDecompCommand(); // 1
extern "C" void __ct__10JSUPtrLinkFPv(); // 1
extern "C" void __dt__10JSUPtrLinkFv(); // 1
extern "C" void initiate__10JSUPtrListFv(); // 1
extern "C" void append__10JSUPtrListFP10JSUPtrLink(); // 1
extern "C" void remove__10JSUPtrListFP10JSUPtrLink(); // 1
extern "C" void panic_f__12JUTExceptionFPCciPCce(); // 1
extern "C" void DCInvalidateRange(); // 1
extern "C" void DCStoreRange(); // 1
extern "C" void OSInitMessageQueue(); // 1
extern "C" void OSSendMessage(); // 1
extern "C" void OSReceiveMessage(); // 1
extern "C" void OSLockMutex(); // 1
extern "C" void OSUnlockMutex(); // 1
extern "C" void ARQPostRequest(); // 1
extern "C" void __register_global_object(); // 1
extern "C" void _savegpr_25(); // 1
extern "C" void _savegpr_26(); // 1
extern "C" void _savegpr_27(); // 1
extern "C" void _restgpr_25(); // 1
extern "C" void _restgpr_26(); // 1
extern "C" void _restgpr_27(); // 1
SECTION_DATA extern u8 sMessageQueue__7JKRAram[32];
SECTION_SBSS extern u8 sSystemHeap__7JKRHeap[4];

// 
// Declarations:
// 

/* 802D3574-802D35F4 0080+00 rc=0 efc=0 .text      prepareCommand__12JKRAramPieceFiUlUlUlP12JKRAramBlockPFUl_v  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void prepareCommand__12JKRAramPieceFiUlUlUlP12JKRAramBlockPFUl_v() {
	nofralloc
#include "asm/JSystem/JKernel/JKRAramPiece/prepareCommand__12JKRAramPieceFiUlUlUlP12JKRAramBlockPFUl_v.s"
}
#pragma pop


/* 802D35F4-802D3614 0020+00 rc=0 efc=0 .text      sendCommand__12JKRAramPieceFP12JKRAMCommand                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRAramPiece::sendCommand(JKRAMCommand* field_0) {
	nofralloc
#include "asm/JSystem/JKernel/JKRAramPiece/sendCommand__12JKRAramPieceFP12JKRAMCommand.s"
}
#pragma pop


/* ############################################################################################## */
/* 8039D0B8-8039D120 0068+00 rc=0 efc=0 .rodata    @stringBase0                                                 */
#pragma push
#pragma force_active on
#pragma section ".dead"
const char* const stringBase_8039D0B8 = "direction = %x\n";
const char* const stringBase_8039D0C8 = "source = %x\n";
const char* const stringBase_8039D0D5 = "destination = %x\n";
const char* const stringBase_8039D0E7 = "length = %x\n";
const char* const stringBase_8039D0F4 = "JKRAramPiece.cpp";
const char* const stringBase_8039D105 = "%s";
const char* const stringBase_8039D108 = "illegal address. abort.";
#pragma pop

/* 80434318-80434324 000C+00 rc=0 efc=0 .bss       @492                                                         */
u8 JKRAramPiece__lit_492[12];

/* 80434324-80434330 000C+00 rc=0 efc=0 .bss       sAramPieceCommandList__12JKRAramPiece                        */
u8 sAramPieceCommandList__12JKRAramPiece[12];

/* 80434330-80434348 0018+00 rc=0 efc=0 .bss       mMutex__12JKRAramPiece                                       */
u8 mMutex__12JKRAramPiece[24];

/* 802D3614-802D3770 015C+00 rc=0 efc=0 .text      orderAsync__12JKRAramPieceFiUlUlUlP12JKRAramBlockPFUl_v      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void orderAsync__12JKRAramPieceFiUlUlUlP12JKRAramBlockPFUl_v() {
	nofralloc
#include "asm/JSystem/JKernel/JKRAramPiece/orderAsync__12JKRAramPieceFiUlUlUlP12JKRAramBlockPFUl_v.s"
}
#pragma pop


/* 802D3770-802D3838 00C8+00 rc=0 efc=0 .text      sync__12JKRAramPieceFP12JKRAMCommandi                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRAramPiece::sync(JKRAMCommand* field_0, int field_1) {
	nofralloc
#include "asm/JSystem/JKernel/JKRAramPiece/sync__12JKRAramPieceFP12JKRAMCommandi.s"
}
#pragma pop


/* 802D3838-802D38CC 0094+00 rc=0 efc=0 .text      orderSync__12JKRAramPieceFiUlUlUlP12JKRAramBlock             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRAramPiece::orderSync(int field_0, u32 field_1, u32 field_2, u32 field_3, JKRAramBlock* field_4) {
	nofralloc
#include "asm/JSystem/JKernel/JKRAramPiece/orderSync__12JKRAramPieceFiUlUlUlP12JKRAramBlock.s"
}
#pragma pop


/* 802D38CC-802D3944 0078+00 rc=0 efc=0 .text      startDMA__12JKRAramPieceFP12JKRAMCommand                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRAramPiece::startDMA(JKRAMCommand* field_0) {
	nofralloc
#include "asm/JSystem/JKernel/JKRAramPiece/startDMA__12JKRAramPieceFP12JKRAMCommand.s"
}
#pragma pop


/* 802D3944-802D39EC 00A8+00 rc=0 efc=0 .text      doneDMA__12JKRAramPieceFUl                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRAramPiece::doneDMA(u32 field_0) {
	nofralloc
#include "asm/JSystem/JKernel/JKRAramPiece/doneDMA__12JKRAramPieceFUl.s"
}
#pragma pop


/* 802D39EC-802D3A5C 0070+00 rc=0 efc=0 .text      __ct__12JKRAMCommandFv                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm JKRAMCommand::JKRAMCommand() {
	nofralloc
#include "asm/JSystem/JKernel/JKRAramPiece/__ct__12JKRAMCommandFv.s"
}
#pragma pop


/* 802D3A5C-802D3B04 00A8+00 rc=0 efc=0 .text      __dt__12JKRAMCommandFv                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm JKRAMCommand::~JKRAMCommand() {
	nofralloc
#include "asm/JSystem/JKernel/JKRAramPiece/__dt__12JKRAMCommandFv.s"
}
#pragma pop


/* 802D3B04-802D3B48 0044+00 rc=0 efc=0 .text      __sinit_JKRAramPiece_cpp                                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void __sinit_JKRAramPiece_cpp() {
	nofralloc
#include "asm/JSystem/JKernel/JKRAramPiece/__sinit_JKRAramPiece_cpp.s"
}
#pragma pop


