// 
// Generated By: dol2asm
// Translation Unit: JKRAramHeap
// 

#include "dolphin/types.h"

// 
// Types:
// 

struct JKRAramHeap {
	struct EAllocMode {
	};

	/* 802D2E44 */ JKRAramHeap(u32, u32);
	/* 802D2F14 */ ~JKRAramHeap();
	/* 802D2FBC */ void alloc(u32, JKRAramHeap::EAllocMode);
	/* 802D3034 */ void allocFromHead(u32);
	/* 802D30BC */ void allocFromTail(u32);
	/* 802D3134 */ void getFreeSize();
	/* 802D31AC */ void getTotalFreeSize();
	/* 802D3218 */ void dump();
};

template <typename A0>
struct JSUList { };
/* JSUList<JKRAramBlock> */
struct JSUList__template6 {
	/* 802D32B0 */ ~JSUList__template6();
};

struct JKRHeap {
	/* 802CE83C */ void findFromRoot(void*);
};

struct JKRDisposer {
	/* 802D147C */ JKRDisposer();
	/* 802D14E4 */ ~JKRDisposer();
};

struct JKRAramBlock {
	/* 802D3304 */ JKRAramBlock(u32, u32, u32, u8, bool);
	/* 802D3434 */ void allocHead(u32, u8, JKRAramHeap*);
	/* 802D34D0 */ void allocTail(u32, u8, JKRAramHeap*);
};

struct JSUPtrLink {
};

struct JSUPtrList {
	/* 802DBEAC */ ~JSUPtrList();
	/* 802DBF14 */ void initiate();
	/* 802DBF4C */ void append(JSUPtrLink*);
};

// 
// Forward References:
// 

extern "C" void __sinit_JKRAramHeap_cpp(); // 1

extern "C" void __ct__11JKRAramHeapFUlUl(); // 1
extern "C" void __dt__11JKRAramHeapFv(); // 1
extern "C" void alloc__11JKRAramHeapFUlQ211JKRAramHeap10EAllocMode(); // 1
extern "C" void allocFromHead__11JKRAramHeapFUl(); // 1
extern "C" void allocFromTail__11JKRAramHeapFUl(); // 1
extern "C" void getFreeSize__11JKRAramHeapFv(); // 1
extern "C" void getTotalFreeSize__11JKRAramHeapFv(); // 1
extern "C" void dump__11JKRAramHeapFv(); // 1
extern "C" void __sinit_JKRAramHeap_cpp(); // 1
extern "C" void func_802D32B0(); // 1
SECTION_DATA extern void*const __vt__11JKRAramHeap[4];
SECTION_BSS extern u8 JKRAramHeap__lit_297[12];
SECTION_BSS extern u8 sAramList__11JKRAramHeap[12];

// 
// External References:
// 

void* operator new(u32, JKRHeap*, int); // 2
void operator delete(void*); // 2
extern "C" void OSInitMutex(); // 1
extern "C" void OSLockMutex(); // 1
extern "C" void OSUnlockMutex(); // 1
extern "C" void __register_global_object(); // 1
extern "C" void _savegpr_29(); // 1
extern "C" void _restgpr_29(); // 1

extern "C" void findFromRoot__7JKRHeapFPv(); // 1
extern "C" void* __nw__FUlP7JKRHeapi(); // 1
extern "C" void __dl__FPv(); // 1
extern "C" void __ct__11JKRDisposerFv(); // 1
extern "C" void __dt__11JKRDisposerFv(); // 1
extern "C" void __ct__12JKRAramBlockFUlUlUlUcb(); // 1
extern "C" void allocHead__12JKRAramBlockFUlUcP11JKRAramHeap(); // 1
extern "C" void allocTail__12JKRAramBlockFUlUcP11JKRAramHeap(); // 1
extern "C" void __dt__10JSUPtrListFv(); // 1
extern "C" void initiate__10JSUPtrListFv(); // 1
extern "C" void append__10JSUPtrListFP10JSUPtrLink(); // 1
extern "C" void OSInitMutex(); // 1
extern "C" void OSLockMutex(); // 1
extern "C" void OSUnlockMutex(); // 1
extern "C" void __register_global_object(); // 1
extern "C" void _savegpr_29(); // 1
extern "C" void _restgpr_29(); // 1

// 
// Declarations:
// 

/* ############################################################################################## */
/* 803CC168-803CC178 000C+04 rc=2 efc=0 .data      __vt__11JKRAramHeap                                          */
void* const __vt__11JKRAramHeap[4] = {
	NULL, /* RTTI */
	NULL,
	(void*)__dt__11JKRAramHeapFv,
	/* padding */
	NULL,
};

/* 80434300-8043430C 000C+00 rc=1 efc=0 .bss       @297                                                         */
u8 JKRAramHeap__lit_297[12];

/* 8043430C-80434318 000C+00 rc=8 efc=0 .bss       sAramList__11JKRAramHeap                                     */
u8 sAramList__11JKRAramHeap[12];

/* 802D2E44-802D2F14 00D0+00 rc=1 efc=1 .text      __ct__11JKRAramHeapFUlUl                                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm JKRAramHeap::JKRAramHeap(u32 field_0, u32 field_1) {
	nofralloc
#include "asm/JSystem/JKernel/JKRAramHeap/__ct__11JKRAramHeapFUlUl.s"
}
#pragma pop


/* 802D2F14-802D2FBC 00A8+00 rc=1 efc=0 .text      __dt__11JKRAramHeapFv                                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm JKRAramHeap::~JKRAramHeap() {
	nofralloc
#include "asm/JSystem/JKernel/JKRAramHeap/__dt__11JKRAramHeapFv.s"
}
#pragma pop


/* 802D2FBC-802D3034 0078+00 rc=5 efc=5 .text      alloc__11JKRAramHeapFUlQ211JKRAramHeap10EAllocMode           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRAramHeap::alloc(u32 field_0, JKRAramHeap::EAllocMode field_1) {
	nofralloc
#include "asm/JSystem/JKernel/JKRAramHeap/alloc__11JKRAramHeapFUlQ211JKRAramHeap10EAllocMode.s"
}
#pragma pop


/* 802D3034-802D30BC 0088+00 rc=1 efc=0 .text      allocFromHead__11JKRAramHeapFUl                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRAramHeap::allocFromHead(u32 field_0) {
	nofralloc
#include "asm/JSystem/JKernel/JKRAramHeap/allocFromHead__11JKRAramHeapFUl.s"
}
#pragma pop


/* 802D30BC-802D3134 0078+00 rc=1 efc=0 .text      allocFromTail__11JKRAramHeapFUl                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRAramHeap::allocFromTail(u32 field_0) {
	nofralloc
#include "asm/JSystem/JKernel/JKRAramHeap/allocFromTail__11JKRAramHeapFUl.s"
}
#pragma pop


/* 802D3134-802D31AC 0078+00 rc=1 efc=1 .text      getFreeSize__11JKRAramHeapFv                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRAramHeap::getFreeSize() {
	nofralloc
#include "asm/JSystem/JKernel/JKRAramHeap/getFreeSize__11JKRAramHeapFv.s"
}
#pragma pop


/* 802D31AC-802D3218 006C+00 rc=2 efc=2 .text      getTotalFreeSize__11JKRAramHeapFv                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRAramHeap::getTotalFreeSize() {
	nofralloc
#include "asm/JSystem/JKernel/JKRAramHeap/getTotalFreeSize__11JKRAramHeapFv.s"
}
#pragma pop


/* 802D3218-802D326C 0054+00 rc=2 efc=2 .text      dump__11JKRAramHeapFv                                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRAramHeap::dump() {
	nofralloc
#include "asm/JSystem/JKernel/JKRAramHeap/dump__11JKRAramHeapFv.s"
}
#pragma pop


/* 802D326C-802D32B0 0044+00 rc=1 efc=1 .text      __sinit_JKRAramHeap_cpp                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void __sinit_JKRAramHeap_cpp() {
	nofralloc
#include "asm/JSystem/JKernel/JKRAramHeap/__sinit_JKRAramHeap_cpp.s"
}
#pragma pop


/* 802D32B0-802D3304 0054+00 rc=1 efc=0 .text      __dt__23JSUList<12JKRAramBlock>Fv                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm JSUList__template6::~JSUList__template6() {
	nofralloc
#include "asm/JSystem/JKernel/JKRAramHeap/func_802D32B0.s"
}
#pragma pop


