// 
// Generated By: dol2asm
// 

#include "dolphin/types.h"

// 
// Additional Symbols:
// 

extern "C" {
extern void dump_sort__7JKRHeapFv();
extern void __ct__7JKRHeapFPvUlP7JKRHeapb();
extern void __dt__7JKRHeapFv();
extern void alloc__7JKRHeapFUliP7JKRHeap();
extern void free__7JKRHeapFPvP7JKRHeap();
extern void callAllDisposer__7JKRHeapFv();
extern void resize__7JKRHeapFPvUl();
extern void getFreeSize__7JKRHeapFv();
extern void getTotalFreeSize__7JKRHeapFv();
extern void getMaxAllocatableSize__7JKRHeapFi();
extern void dispose__7JKRHeapFPvPv();
extern void dispose__7JKRHeapFv();
extern void __dl__FPv();
extern void state_dump__7JKRHeapCFRCQ27JKRHeap6TState();
extern void do_changeGroupID__7JKRHeapFUc();
extern void do_getCurrentGroupId__7JKRHeapFv();
extern void create__12JKRSolidHeapFUlP7JKRHeapb();
extern void do_destroy__12JKRSolidHeapFv();
extern void __ct__12JKRSolidHeapFPvUlP7JKRHeapb();
extern void __dt__12JKRSolidHeapFv();
extern void adjustSize__12JKRSolidHeapFv();
extern void do_alloc__12JKRSolidHeapFUli();
extern void allocFromHead__12JKRSolidHeapFUli();
extern void allocFromTail__12JKRSolidHeapFUli();
extern void do_free__12JKRSolidHeapFPv();
extern void do_freeAll__12JKRSolidHeapFv();
extern void do_freeTail__12JKRSolidHeapFv();
extern void do_fillFreeArea__12JKRSolidHeapFv();
extern void do_resize__12JKRSolidHeapFPvUl();
extern void do_getSize__12JKRSolidHeapFPv();
extern void check__12JKRSolidHeapFv();
extern void dump__12JKRSolidHeapFv();
extern void state_register__12JKRSolidHeapCFPQ27JKRHeap6TStateUl();
extern void state_compare__12JKRSolidHeapCFRCQ27JKRHeap6TStateRCQ27JKRHeap6TState();
extern void getHeapType__12JKRSolidHeapFv();
extern void do_getFreeSize__12JKRSolidHeapFv();
extern void do_getMaxFreeBlock__12JKRSolidHeapFv();
extern void do_getTotalFreeSize__12JKRSolidHeapFv();
extern void JUTReportConsole_f();
extern void JUTWarningConsole_f();
extern void OSLockMutex();
extern void OSUnlockMutex();
extern void _savegpr_28();
extern void _savegpr_29();
extern void _restgpr_28();
extern void _restgpr_29();
SECTION_RODATA extern const u8 JKRSolidHeap__stringBase0[344];
SECTION_DATA extern void* __vt__12JKRSolidHeap[24];
SECTION_SBSS extern u8 sRootHeap__7JKRHeap[4];
SECTION_SBSS extern u8 mErrorHandler__7JKRHeap[4];
SECTION_SDATA2 extern u8 JKRSolidHeap__LIT_693[8];
SECTION_SDATA2 extern u8 JKRSolidHeap__LIT_695[8];
SECTION_SDATA2 extern u8 JKRSolidHeap__LIT_697[8];
}


/* ###################################################################################### */
/*                                        .rodata                                         */
/* ###################################################################################### */

extern "C" {
/* 8039CE50-8039CFA8 0157 .rodata    @stringBase0                                                 */
#pragma push
#pragma force_active on
#pragma section ".dead"
SECTION_DEAD const char* const stringBase_8039CE50 = 
    "allocFromHead: c"
    "annot alloc memo"
    "ry (0x%x byte).\n";
SECTION_DEAD const char* const stringBase_8039CE81 = 
    "allocFromTail: c"
    "annot alloc memo"
    "ry (0x%x byte).\n";
SECTION_DEAD const char* const stringBase_8039CEB2 = 
    "free: cannot fre"
    "e memory block ("
    "%08x)\n";
SECTION_DEAD const char* const stringBase_8039CED9 = 
    "resize: cannot r"
    "esize memory blo"
    "ck (%08x: %d)\n";
SECTION_DEAD const char* const stringBase_8039CF08 = 
    "getSize: cannot "
    "get memory block"
    " size (%08x)\n";
SECTION_DEAD const char* const stringBase_8039CF36 = 
    "check: bad total"
    " memory block si"
    "ze (%08X, %08X)\n";
SECTION_DEAD const char* const stringBase_8039CF67 = "head %08x: %08x\n";
SECTION_DEAD const char* const stringBase_8039CF78 = "tail %08x: %08x\n";
SECTION_DEAD const char* const stringBase_8039CF89 = "%d / %d bytes (%6.2f%%) used\n";
/* @stringBase0 padding */
SECTION_DEAD const char* const pad_8039CFA7 = "";
#pragma pop
}


/* ###################################################################################### */
/*                                         .data                                          */
/* ###################################################################################### */

extern "C" {
/* 803CC030-803CC090 0060 .data      __vt__12JKRSolidHeap                                         */
SECTION_DATA void* __vt__12JKRSolidHeap[24] = {
	NULL, /* RTTI */
	NULL,
	(void*)__dt__12JKRSolidHeapFv,
	(void*)callAllDisposer__7JKRHeapFv,
	(void*)getHeapType__12JKRSolidHeapFv,
	(void*)check__12JKRSolidHeapFv,
	(void*)dump_sort__7JKRHeapFv,
	(void*)dump__12JKRSolidHeapFv,
	(void*)do_destroy__12JKRSolidHeapFv,
	(void*)do_alloc__12JKRSolidHeapFUli,
	(void*)do_free__12JKRSolidHeapFPv,
	(void*)do_freeAll__12JKRSolidHeapFv,
	(void*)do_freeTail__12JKRSolidHeapFv,
	(void*)do_fillFreeArea__12JKRSolidHeapFv,
	(void*)do_resize__12JKRSolidHeapFPvUl,
	(void*)do_getSize__12JKRSolidHeapFPv,
	(void*)do_getFreeSize__12JKRSolidHeapFv,
	(void*)do_getMaxFreeBlock__12JKRSolidHeapFv,
	(void*)do_getTotalFreeSize__12JKRSolidHeapFv,
	(void*)do_changeGroupID__7JKRHeapFUc,
	(void*)do_getCurrentGroupId__7JKRHeapFv,
	(void*)state_register__12JKRSolidHeapCFPQ27JKRHeap6TStateUl,
	(void*)state_compare__12JKRSolidHeapCFRCQ27JKRHeap6TStateRCQ27JKRHeap6TState,
	(void*)state_dump__7JKRHeapCFRCQ27JKRHeap6TState,
};
}


/* ###################################################################################### */
/*                                        .sdata2                                         */
/* ###################################################################################### */

extern "C" {
/* 80455FA8-80455FB0 0004 .sdata2    @693                                                         */
SECTION_SDATA2 u8 JKRSolidHeap__LIT_693[8] = {
	0x42, 0xC8, 0x00, 0x00,
	/* padding */
	0x00, 0x00, 0x00, 0x00,
};
/* 80455FB0-80455FB8 0008 .sdata2    @695                                                         */
SECTION_SDATA2 u8 JKRSolidHeap__LIT_695[8] = {
	0x43, 0x30, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
};
/* 80455FB8-80455FC0 0008 .sdata2    @697                                                         */
SECTION_SDATA2 u8 JKRSolidHeap__LIT_697[8] = {
	0x43, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
}


/* ###################################################################################### */
/*                                         .text                                          */
/* ###################################################################################### */

/* 802D0A24-802D0AD0 00AC .text      create__12JKRSolidHeapFUlP7JKRHeapb                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void create__12JKRSolidHeapFUlP7JKRHeapb() {
	nofralloc
#include "asm/JSystem/JKernel/JKRSolidHeap/create__12JKRSolidHeapFUlP7JKRHeapb.s"
}
#pragma pop

/* 802D0AD0-802D0B30 0060 .text      do_destroy__12JKRSolidHeapFv                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void do_destroy__12JKRSolidHeapFv() {
	nofralloc
#include "asm/JSystem/JKernel/JKRSolidHeap/do_destroy__12JKRSolidHeapFv.s"
}
#pragma pop

/* 802D0B30-802D0B8C 005C .text      __ct__12JKRSolidHeapFPvUlP7JKRHeapb                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void __ct__12JKRSolidHeapFPvUlP7JKRHeapb() {
	nofralloc
#include "asm/JSystem/JKernel/JKRSolidHeap/__ct__12JKRSolidHeapFPvUlP7JKRHeapb.s"
}
#pragma pop

/* 802D0B8C-802D0BF4 0068 .text      __dt__12JKRSolidHeapFv                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void __dt__12JKRSolidHeapFv() {
	nofralloc
#include "asm/JSystem/JKernel/JKRSolidHeap/__dt__12JKRSolidHeapFv.s"
}
#pragma pop

/* 802D0BF4-802D0CB0 00BC .text      adjustSize__12JKRSolidHeapFv                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void adjustSize__12JKRSolidHeapFv() {
	nofralloc
#include "asm/JSystem/JKernel/JKRSolidHeap/adjustSize__12JKRSolidHeapFv.s"
}
#pragma pop

/* 802D0CB0-802D0D58 00A8 .text      do_alloc__12JKRSolidHeapFUli                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void do_alloc__12JKRSolidHeapFUli() {
	nofralloc
#include "asm/JSystem/JKernel/JKRSolidHeap/do_alloc__12JKRSolidHeapFUli.s"
}
#pragma pop

/* 802D0D58-802D0E20 00C8 .text      allocFromHead__12JKRSolidHeapFUli                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void allocFromHead__12JKRSolidHeapFUli() {
	nofralloc
#include "asm/JSystem/JKernel/JKRSolidHeap/allocFromHead__12JKRSolidHeapFUli.s"
}
#pragma pop

/* 802D0E20-802D0EE4 00C4 .text      allocFromTail__12JKRSolidHeapFUli                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void allocFromTail__12JKRSolidHeapFUli() {
	nofralloc
#include "asm/JSystem/JKernel/JKRSolidHeap/allocFromTail__12JKRSolidHeapFUli.s"
}
#pragma pop

/* 802D0EE4-802D0F14 0030 .text      do_free__12JKRSolidHeapFPv                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void do_free__12JKRSolidHeapFPv() {
	nofralloc
#include "asm/JSystem/JKernel/JKRSolidHeap/do_free__12JKRSolidHeapFPv.s"
}
#pragma pop

/* 802D0F14-802D0F74 0060 .text      do_freeAll__12JKRSolidHeapFv                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void do_freeAll__12JKRSolidHeapFv() {
	nofralloc
#include "asm/JSystem/JKernel/JKRSolidHeap/do_freeAll__12JKRSolidHeapFv.s"
}
#pragma pop

/* 802D0F74-802D1000 008C .text      do_freeTail__12JKRSolidHeapFv                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void do_freeTail__12JKRSolidHeapFv() {
	nofralloc
#include "asm/JSystem/JKernel/JKRSolidHeap/do_freeTail__12JKRSolidHeapFv.s"
}
#pragma pop

/* 802D1000-802D1004 0004 .text      do_fillFreeArea__12JKRSolidHeapFv                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void do_fillFreeArea__12JKRSolidHeapFv() {
	nofralloc
#include "asm/JSystem/JKernel/JKRSolidHeap/do_fillFreeArea__12JKRSolidHeapFv.s"
}
#pragma pop

/* 802D1004-802D1038 0034 .text      do_resize__12JKRSolidHeapFPvUl                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void do_resize__12JKRSolidHeapFPvUl() {
	nofralloc
#include "asm/JSystem/JKernel/JKRSolidHeap/do_resize__12JKRSolidHeapFPvUl.s"
}
#pragma pop

/* 802D1038-802D106C 0034 .text      do_getSize__12JKRSolidHeapFPv                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void do_getSize__12JKRSolidHeapFPv() {
	nofralloc
#include "asm/JSystem/JKernel/JKRSolidHeap/do_getSize__12JKRSolidHeapFPv.s"
}
#pragma pop

/* 802D106C-802D10FC 0090 .text      check__12JKRSolidHeapFv                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void check__12JKRSolidHeapFv() {
	nofralloc
#include "asm/JSystem/JKernel/JKRSolidHeap/check__12JKRSolidHeapFv.s"
}
#pragma pop

/* 802D10FC-802D11FC 0100 .text      dump__12JKRSolidHeapFv                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dump__12JKRSolidHeapFv() {
	nofralloc
#include "asm/JSystem/JKernel/JKRSolidHeap/dump__12JKRSolidHeapFv.s"
}
#pragma pop

/* 802D11FC-802D1258 005C .text      state_register__12JKRSolidHeapCFPQ27JKRHeap6TStateUl         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void state_register__12JKRSolidHeapCFPQ27JKRHeap6TStateUl() {
	nofralloc
#include "asm/JSystem/JKernel/JKRSolidHeap/state_register__12JKRSolidHeapCFPQ27JKRHeap6TStateUl.s"
}
#pragma pop

/* 802D1258-802D1288 0030 .text      state_compare__12JKRSolidHeapCFRCQ27JKRHeap6TStateRCQ27JKRHeap6TState */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void state_compare__12JKRSolidHeapCFRCQ27JKRHeap6TStateRCQ27JKRHeap6TState() {
	nofralloc
#include "asm/JSystem/JKernel/JKRSolidHeap/state_compare__12JKRSolidHeapCFRCQ27JKRHeap6TStateRCQ27JKRHeap6TState.s"
}
#pragma pop

/* 802D1288-802D1294 000C .text      getHeapType__12JKRSolidHeapFv                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void getHeapType__12JKRSolidHeapFv() {
	nofralloc
#include "asm/JSystem/JKernel/JKRSolidHeap/getHeapType__12JKRSolidHeapFv.s"
}
#pragma pop

/* 802D1294-802D129C 0008 .text      do_getFreeSize__12JKRSolidHeapFv                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void do_getFreeSize__12JKRSolidHeapFv() {
	nofralloc
#include "asm/JSystem/JKernel/JKRSolidHeap/do_getFreeSize__12JKRSolidHeapFv.s"
}
#pragma pop

/* 802D129C-802D12A4 0008 .text      do_getMaxFreeBlock__12JKRSolidHeapFv                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void do_getMaxFreeBlock__12JKRSolidHeapFv() {
	nofralloc
#include "asm/JSystem/JKernel/JKRSolidHeap/do_getMaxFreeBlock__12JKRSolidHeapFv.s"
}
#pragma pop

/* 802D12A4-802D12C4 0020 .text      do_getTotalFreeSize__12JKRSolidHeapFv                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void do_getTotalFreeSize__12JKRSolidHeapFv() {
	nofralloc
#include "asm/JSystem/JKernel/JKRSolidHeap/do_getTotalFreeSize__12JKRSolidHeapFv.s"
}
#pragma pop


