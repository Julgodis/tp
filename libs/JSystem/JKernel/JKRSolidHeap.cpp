// 
// Generated By: dol2asm
// Translation Unit: JKRSolidHeap
// 

#include "dolphin/types.h"

// 
// Forward References:
// 

extern "C" extern void create__12JKRSolidHeapFUlP7JKRHeapb();
extern "C" extern void do_destroy__12JKRSolidHeapFv();
extern "C" extern void __ct__12JKRSolidHeapFPvUlP7JKRHeapb();
extern "C" extern void __dt__12JKRSolidHeapFv();
extern "C" extern void adjustSize__12JKRSolidHeapFv();
extern "C" extern void do_alloc__12JKRSolidHeapFUli();
extern "C" extern void allocFromHead__12JKRSolidHeapFUli();
extern "C" extern void allocFromTail__12JKRSolidHeapFUli();
extern "C" extern void do_free__12JKRSolidHeapFPv();
extern "C" extern void do_freeAll__12JKRSolidHeapFv();
extern "C" extern void do_freeTail__12JKRSolidHeapFv();
extern "C" extern void do_fillFreeArea__12JKRSolidHeapFv();
extern "C" extern void do_resize__12JKRSolidHeapFPvUl();
extern "C" extern void do_getSize__12JKRSolidHeapFPv();
extern "C" extern void check__12JKRSolidHeapFv();
extern "C" extern void dump__12JKRSolidHeapFv();
extern "C" extern void state_register__12JKRSolidHeapCFPQ27JKRHeap6TStateUl();
extern "C" extern void state_compare__12JKRSolidHeapCFRCQ27JKRHeap6TStateRCQ27JKRHeap6TState();
extern "C" extern void getHeapType__12JKRSolidHeapFv();
extern "C" extern void do_getFreeSize__12JKRSolidHeapFv();
extern "C" extern void do_getMaxFreeBlock__12JKRSolidHeapFv();
extern "C" extern void do_getTotalFreeSize__12JKRSolidHeapFv();
SECTION_RODATA extern const u8 JKRSolidHeap__stringBase0[344];
SECTION_DATA extern void*const __vt__12JKRSolidHeap[24];
SECTION_SDATA2 extern f32 JKRSolidHeap__lit_693;
SECTION_SDATA2 extern f64 JKRSolidHeap__lit_695;
SECTION_SDATA2 extern f64 JKRSolidHeap__lit_697;

// 
// External References:
// 

extern "C" extern void dump_sort__7JKRHeapFv();
extern "C" extern void __ct__7JKRHeapFPvUlP7JKRHeapb();
extern "C" extern void __dt__7JKRHeapFv();
extern "C" extern void alloc__7JKRHeapFUliP7JKRHeap();
extern "C" extern void free__7JKRHeapFPvP7JKRHeap();
extern "C" extern void callAllDisposer__7JKRHeapFv();
extern "C" extern void resize__7JKRHeapFPvUl();
extern "C" extern void getFreeSize__7JKRHeapFv();
extern "C" extern void getTotalFreeSize__7JKRHeapFv();
extern "C" extern void getMaxAllocatableSize__7JKRHeapFi();
extern "C" extern void dispose__7JKRHeapFPvPv();
extern "C" extern void dispose__7JKRHeapFv();
extern "C" extern void __dl__FPv();
extern "C" extern void state_dump__7JKRHeapCFRCQ27JKRHeap6TState();
extern "C" extern void do_changeGroupID__7JKRHeapFUc();
extern "C" extern void do_getCurrentGroupId__7JKRHeapFv();
extern "C" extern void JUTReportConsole_f();
extern "C" extern void JUTWarningConsole_f();
extern "C" extern void OSLockMutex();
extern "C" extern void OSUnlockMutex();
extern "C" extern void _savegpr_28();
extern "C" extern void _savegpr_29();
extern "C" extern void _restgpr_28();
extern "C" extern void _restgpr_29();
SECTION_SBSS extern u8 sRootHeap__7JKRHeap[4];
SECTION_SBSS extern u8 mErrorHandler__7JKRHeap[4];

// 
// Declarations:
// 

/* 802D0A24-802D0AD0 00AC+00 .text      create__12JKRSolidHeapFUlP7JKRHeapb                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
ASM_FUNCTION(create__12JKRSolidHeapFUlP7JKRHeapb) {
	nofralloc
#include "asm/JSystem/JKernel/JKRSolidHeap/create__12JKRSolidHeapFUlP7JKRHeapb.s"
}
#pragma pop


/* 802D0AD0-802D0B30 0060+00 .text      do_destroy__12JKRSolidHeapFv                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
ASM_FUNCTION(do_destroy__12JKRSolidHeapFv) {
	nofralloc
#include "asm/JSystem/JKernel/JKRSolidHeap/do_destroy__12JKRSolidHeapFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 803CC030-803CC090 0060+00 .data      __vt__12JKRSolidHeap                                         */
void* const __vt__12JKRSolidHeap[24] = {
	NULL, /* RTTI */
	NULL,
	(void*)__dt__12JKRSolidHeapFv,
	(void*)callAllDisposer__7JKRHeapFv,
	(void*)getHeapType__12JKRSolidHeapFv,
	(void*)check__12JKRSolidHeapFv,
	(void*)dump_sort__7JKRHeapFv,
	(void*)dump__12JKRSolidHeapFv,
	(void*)do_destroy__12JKRSolidHeapFv,
	(void*)do_alloc__12JKRSolidHeapFUli,
	(void*)do_free__12JKRSolidHeapFPv,
	(void*)do_freeAll__12JKRSolidHeapFv,
	(void*)do_freeTail__12JKRSolidHeapFv,
	(void*)do_fillFreeArea__12JKRSolidHeapFv,
	(void*)do_resize__12JKRSolidHeapFPvUl,
	(void*)do_getSize__12JKRSolidHeapFPv,
	(void*)do_getFreeSize__12JKRSolidHeapFv,
	(void*)do_getMaxFreeBlock__12JKRSolidHeapFv,
	(void*)do_getTotalFreeSize__12JKRSolidHeapFv,
	(void*)do_changeGroupID__7JKRHeapFUc,
	(void*)do_getCurrentGroupId__7JKRHeapFv,
	(void*)state_register__12JKRSolidHeapCFPQ27JKRHeap6TStateUl,
	(void*)state_compare__12JKRSolidHeapCFRCQ27JKRHeap6TStateRCQ27JKRHeap6TState,
	(void*)state_dump__7JKRHeapCFRCQ27JKRHeap6TState,
};

/* 802D0B30-802D0B8C 005C+00 .text      __ct__12JKRSolidHeapFPvUlP7JKRHeapb                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
ASM_FUNCTION(__ct__12JKRSolidHeapFPvUlP7JKRHeapb) {
	nofralloc
#include "asm/JSystem/JKernel/JKRSolidHeap/__ct__12JKRSolidHeapFPvUlP7JKRHeapb.s"
}
#pragma pop


/* 802D0B8C-802D0BF4 0068+00 .text      __dt__12JKRSolidHeapFv                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
ASM_FUNCTION(__dt__12JKRSolidHeapFv) {
	nofralloc
#include "asm/JSystem/JKernel/JKRSolidHeap/__dt__12JKRSolidHeapFv.s"
}
#pragma pop


/* 802D0BF4-802D0CB0 00BC+00 .text      adjustSize__12JKRSolidHeapFv                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
ASM_FUNCTION(adjustSize__12JKRSolidHeapFv) {
	nofralloc
#include "asm/JSystem/JKernel/JKRSolidHeap/adjustSize__12JKRSolidHeapFv.s"
}
#pragma pop


/* 802D0CB0-802D0D58 00A8+00 .text      do_alloc__12JKRSolidHeapFUli                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
ASM_FUNCTION(do_alloc__12JKRSolidHeapFUli) {
	nofralloc
#include "asm/JSystem/JKernel/JKRSolidHeap/do_alloc__12JKRSolidHeapFUli.s"
}
#pragma pop


/* ############################################################################################## */
/* 8039CE50-8039CFA8 0157+01 .rodata    @stringBase0                                                 */
SECTION_RODATA const u8 JKRSolidHeap__stringBase0[344] = {
	0x61, 0x6C, 0x6C, 0x6F, 0x63, 0x46, 0x72, 0x6F, 0x6D, 0x48, 0x65, 0x61, 0x64, 0x3A, 0x20, 0x63,
	0x61, 0x6E, 0x6E, 0x6F, 0x74, 0x20, 0x61, 0x6C, 0x6C, 0x6F, 0x63, 0x20, 0x6D, 0x65, 0x6D, 0x6F,
	0x72, 0x79, 0x20, 0x28, 0x30, 0x78, 0x25, 0x78, 0x20, 0x62, 0x79, 0x74, 0x65, 0x29, 0x2E, 0x0A,
	0x00, 0x61, 0x6C, 0x6C, 0x6F, 0x63, 0x46, 0x72, 0x6F, 0x6D, 0x54, 0x61, 0x69, 0x6C, 0x3A, 0x20,
	0x63, 0x61, 0x6E, 0x6E, 0x6F, 0x74, 0x20, 0x61, 0x6C, 0x6C, 0x6F, 0x63, 0x20, 0x6D, 0x65, 0x6D,
	0x6F, 0x72, 0x79, 0x20, 0x28, 0x30, 0x78, 0x25, 0x78, 0x20, 0x62, 0x79, 0x74, 0x65, 0x29, 0x2E,
	0x0A, 0x00, 0x66, 0x72, 0x65, 0x65, 0x3A, 0x20, 0x63, 0x61, 0x6E, 0x6E, 0x6F, 0x74, 0x20, 0x66,
	0x72, 0x65, 0x65, 0x20, 0x6D, 0x65, 0x6D, 0x6F, 0x72, 0x79, 0x20, 0x62, 0x6C, 0x6F, 0x63, 0x6B,
	0x20, 0x28, 0x25, 0x30, 0x38, 0x78, 0x29, 0x0A, 0x00, 0x72, 0x65, 0x73, 0x69, 0x7A, 0x65, 0x3A,
	0x20, 0x63, 0x61, 0x6E, 0x6E, 0x6F, 0x74, 0x20, 0x72, 0x65, 0x73, 0x69, 0x7A, 0x65, 0x20, 0x6D,
	0x65, 0x6D, 0x6F, 0x72, 0x79, 0x20, 0x62, 0x6C, 0x6F, 0x63, 0x6B, 0x20, 0x28, 0x25, 0x30, 0x38,
	0x78, 0x3A, 0x20, 0x25, 0x64, 0x29, 0x0A, 0x00, 0x67, 0x65, 0x74, 0x53, 0x69, 0x7A, 0x65, 0x3A,
	0x20, 0x63, 0x61, 0x6E, 0x6E, 0x6F, 0x74, 0x20, 0x67, 0x65, 0x74, 0x20, 0x6D, 0x65, 0x6D, 0x6F,
	0x72, 0x79, 0x20, 0x62, 0x6C, 0x6F, 0x63, 0x6B, 0x20, 0x73, 0x69, 0x7A, 0x65, 0x20, 0x28, 0x25,
	0x30, 0x38, 0x78, 0x29, 0x0A, 0x00, 0x63, 0x68, 0x65, 0x63, 0x6B, 0x3A, 0x20, 0x62, 0x61, 0x64,
	0x20, 0x74, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x6D, 0x65, 0x6D, 0x6F, 0x72, 0x79, 0x20, 0x62, 0x6C,
	0x6F, 0x63, 0x6B, 0x20, 0x73, 0x69, 0x7A, 0x65, 0x20, 0x28, 0x25, 0x30, 0x38, 0x58, 0x2C, 0x20,
	0x25, 0x30, 0x38, 0x58, 0x29, 0x0A, 0x00, 0x68, 0x65, 0x61, 0x64, 0x20, 0x25, 0x30, 0x38, 0x78,
	0x3A, 0x20, 0x25, 0x30, 0x38, 0x78, 0x0A, 0x00, 0x74, 0x61, 0x69, 0x6C, 0x20, 0x25, 0x30, 0x38,
	0x78, 0x3A, 0x20, 0x25, 0x30, 0x38, 0x78, 0x0A, 0x00, 0x25, 0x64, 0x20, 0x2F, 0x20, 0x25, 0x64,
	0x20, 0x62, 0x79, 0x74, 0x65, 0x73, 0x20, 0x28, 0x25, 0x36, 0x2E, 0x32, 0x66, 0x25, 0x25, 0x29,
	0x20, 0x75, 0x73, 0x65, 0x64, 0x0A, 0x00,
	/* padding */
	0x00,
};

/* 802D0D58-802D0E20 00C8+00 .text      allocFromHead__12JKRSolidHeapFUli                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
ASM_FUNCTION(allocFromHead__12JKRSolidHeapFUli) {
	nofralloc
#include "asm/JSystem/JKernel/JKRSolidHeap/allocFromHead__12JKRSolidHeapFUli.s"
}
#pragma pop


/* 802D0E20-802D0EE4 00C4+00 .text      allocFromTail__12JKRSolidHeapFUli                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
ASM_FUNCTION(allocFromTail__12JKRSolidHeapFUli) {
	nofralloc
#include "asm/JSystem/JKernel/JKRSolidHeap/allocFromTail__12JKRSolidHeapFUli.s"
}
#pragma pop


/* 802D0EE4-802D0F14 0030+00 .text      do_free__12JKRSolidHeapFPv                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
ASM_FUNCTION(do_free__12JKRSolidHeapFPv) {
	nofralloc
#include "asm/JSystem/JKernel/JKRSolidHeap/do_free__12JKRSolidHeapFPv.s"
}
#pragma pop


/* 802D0F14-802D0F74 0060+00 .text      do_freeAll__12JKRSolidHeapFv                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
ASM_FUNCTION(do_freeAll__12JKRSolidHeapFv) {
	nofralloc
#include "asm/JSystem/JKernel/JKRSolidHeap/do_freeAll__12JKRSolidHeapFv.s"
}
#pragma pop


/* 802D0F74-802D1000 008C+00 .text      do_freeTail__12JKRSolidHeapFv                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
ASM_FUNCTION(do_freeTail__12JKRSolidHeapFv) {
	nofralloc
#include "asm/JSystem/JKernel/JKRSolidHeap/do_freeTail__12JKRSolidHeapFv.s"
}
#pragma pop


/* 802D1000-802D1004 0004+00 .text      do_fillFreeArea__12JKRSolidHeapFv                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
ASM_FUNCTION(do_fillFreeArea__12JKRSolidHeapFv) {
	nofralloc
#include "asm/JSystem/JKernel/JKRSolidHeap/do_fillFreeArea__12JKRSolidHeapFv.s"
}
#pragma pop


/* 802D1004-802D1038 0034+00 .text      do_resize__12JKRSolidHeapFPvUl                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
ASM_FUNCTION(do_resize__12JKRSolidHeapFPvUl) {
	nofralloc
#include "asm/JSystem/JKernel/JKRSolidHeap/do_resize__12JKRSolidHeapFPvUl.s"
}
#pragma pop


/* 802D1038-802D106C 0034+00 .text      do_getSize__12JKRSolidHeapFPv                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
ASM_FUNCTION(do_getSize__12JKRSolidHeapFPv) {
	nofralloc
#include "asm/JSystem/JKernel/JKRSolidHeap/do_getSize__12JKRSolidHeapFPv.s"
}
#pragma pop


/* 802D106C-802D10FC 0090+00 .text      check__12JKRSolidHeapFv                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
ASM_FUNCTION(check__12JKRSolidHeapFv) {
	nofralloc
#include "asm/JSystem/JKernel/JKRSolidHeap/check__12JKRSolidHeapFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80455FA8-80455FB0 0004+04 .sdata2    @693                                                         */
f32 JKRSolidHeap__lit_693 = 100.0f;
/* padding 4 bytes */

/* 80455FB0-80455FB8 0008+00 .sdata2    @695                                                         */
f64 JKRSolidHeap__lit_695 = 4503601774854144.0 /* cast s32 to float */;

/* 80455FB8-80455FC0 0008+00 .sdata2    @697                                                         */
f64 JKRSolidHeap__lit_697 = 4503599627370496.0 /* cast u32 to float */;

/* 802D10FC-802D11FC 0100+00 .text      dump__12JKRSolidHeapFv                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
ASM_FUNCTION(dump__12JKRSolidHeapFv) {
	nofralloc
#include "asm/JSystem/JKernel/JKRSolidHeap/dump__12JKRSolidHeapFv.s"
}
#pragma pop


/* 802D11FC-802D1258 005C+00 .text      state_register__12JKRSolidHeapCFPQ27JKRHeap6TStateUl         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
ASM_FUNCTION(state_register__12JKRSolidHeapCFPQ27JKRHeap6TStateUl) {
	nofralloc
#include "asm/JSystem/JKernel/JKRSolidHeap/state_register__12JKRSolidHeapCFPQ27JKRHeap6TStateUl.s"
}
#pragma pop


/* 802D1258-802D1288 0030+00 .text      state_compare__12JKRSolidHeapCFRCQ27JKRHeap6TStateRCQ27JKRHeap6TState */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
ASM_FUNCTION(state_compare__12JKRSolidHeapCFRCQ27JKRHeap6TStateRCQ27JKRHeap6TState) {
	nofralloc
#include "asm/JSystem/JKernel/JKRSolidHeap/state_compare__12JKRSolidHeapCFRCQ27JKRHeap6TStateRCQ27JKRHeap6TState.s"
}
#pragma pop


/* 802D1288-802D1294 000C+00 .text      getHeapType__12JKRSolidHeapFv                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
ASM_FUNCTION(getHeapType__12JKRSolidHeapFv) {
	nofralloc
#include "asm/JSystem/JKernel/JKRSolidHeap/getHeapType__12JKRSolidHeapFv.s"
}
#pragma pop


/* 802D1294-802D129C 0008+00 .text      do_getFreeSize__12JKRSolidHeapFv                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
ASM_FUNCTION(do_getFreeSize__12JKRSolidHeapFv) {
	nofralloc
#include "asm/JSystem/JKernel/JKRSolidHeap/do_getFreeSize__12JKRSolidHeapFv.s"
}
#pragma pop


/* 802D129C-802D12A4 0008+00 .text      do_getMaxFreeBlock__12JKRSolidHeapFv                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
ASM_FUNCTION(do_getMaxFreeBlock__12JKRSolidHeapFv) {
	nofralloc
#include "asm/JSystem/JKernel/JKRSolidHeap/do_getMaxFreeBlock__12JKRSolidHeapFv.s"
}
#pragma pop


/* 802D12A4-802D12C4 0020+00 .text      do_getTotalFreeSize__12JKRSolidHeapFv                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
ASM_FUNCTION(do_getTotalFreeSize__12JKRSolidHeapFv) {
	nofralloc
#include "asm/JSystem/JKernel/JKRSolidHeap/do_getTotalFreeSize__12JKRSolidHeapFv.s"
}
#pragma pop


/* ############################################################################################## */
