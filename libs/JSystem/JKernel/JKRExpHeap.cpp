// 
// Generated By: dol2asm
// Translation Unit: JKRExpHeap
// 

#include "dol2asm.h"
#include "dolphin/types.h"
#include "JSystem/JKernel/JKRExpHeap.h"

// 
// Types:
// 

struct JKRHeap {
	struct TState {
	};

	/* 802CE138 */ JKRHeap(void*, u32, JKRHeap*, bool);
	/* 802CE264 */ ~JKRHeap();
	/* 802CE378 */ void initArena(char**, u32*, int);
	/* 802CE474 */ void alloc(u32, int, JKRHeap*);
	/* 802CE500 */ void free(void*, JKRHeap*);
	/* 802CE574 */ void callAllDisposer();
	/* 802CE784 */ void getTotalFreeSize();
	/* 802CE7DC */ void getMaxAllocatableSize(int);
	/* 802CE894 */ void find(void*) const;
	/* 802CEAC0 */ void dispose();
	/* 802CEA78 */ void dispose(void*, u32);
	/* 802CEDA0 */ void state_dump(JKRHeap::TState const&) const;
};

struct JKRExpHeap {
	struct CMemBlock {
		/* 802D0810 */ void initiate(JKRExpHeap::CMemBlock*, JKRExpHeap::CMemBlock*, u32, u8, u8);
		/* 802D0830 */ void allocFore(u32, u8, u8, u8, u8);
		/* 802D0874 */ void allocBack(u32, u8, u8, u8, u8);
		/* 802D08CC */ void free(JKRExpHeap*);
		/* 802D091C */ void getHeapBlock(void*);
	};

	/* 802CEDB4 */ void createRoot(int, bool);
	/* 802CEF00 */ void create(void*, u32, JKRHeap*, bool);
	/* 802CEE2C */ void create(u32, JKRHeap*, bool);
	/* 802CEFAC */ void do_destroy();
	/* 802CF030 */ JKRExpHeap(void*, u32, JKRHeap*, bool);
	/* 802CF0C0 */ ~JKRExpHeap();
	/* 802CF128 */ void do_alloc(u32, int);
	/* 802CF490 */ void allocFromHead(u32);
	/* 802CF234 */ void allocFromHead(u32, int);
	/* 802CF6D4 */ void allocFromTail(u32);
	/* 802CF574 */ void allocFromTail(u32, int);
	/* 802CF7AC */ void do_free(void*);
	/* 802CF820 */ void do_freeAll();
	/* 802CF89C */ void do_freeTail();
	/* 802CF924 */ void do_fillFreeArea();
	/* 802CF928 */ void do_changeGroupID(u8);
	/* 802CF978 */ void do_resize(void*, u32);
	/* 802CFB24 */ void do_getSize(void*);
	/* 802CFBA4 */ void do_getFreeSize();
	/* 802CFC10 */ void do_getMaxFreeBlock();
	/* 802CFC84 */ void do_getTotalFreeSize();
	/* 802CFCE8 */ void getUsedSize(u8) const;
	/* 802CFD64 */ void getTotalUsedSize() const;
	/* 802CFDCC */ void appendUsedList(JKRExpHeap::CMemBlock*);
	/* 802CFE68 */ void setFreeBlock(JKRExpHeap::CMemBlock*, JKRExpHeap::CMemBlock*, JKRExpHeap::CMemBlock*);
	/* 802CFEB4 */ void removeFreeBlock(JKRExpHeap::CMemBlock*);
	/* 802CFEE8 */ void removeUsedBlock(JKRExpHeap::CMemBlock*);
	/* 802CFF1C */ void recycleFreeBlock(JKRExpHeap::CMemBlock*);
	/* 802D00B4 */ void joinTwoBlocks(JKRExpHeap::CMemBlock*);
	/* 802D0190 */ void check();
	/* 802D03B8 */ void dump();
	/* 802D05CC */ void dump_sort();
	/* 802D0938 */ void state_register(JKRHeap::TState*, u32) const;
	/* 802D09E0 */ void state_compare(JKRHeap::TState const&, JKRHeap::TState const&) const;
	/* 802D0A10 */ void getHeapType();
	/* 802D0A1C */ void do_getCurrentGroupId();
};

struct JUTException {
	/* 802E21FC */ void panic_f(char const*, int, char const*, ...);
};

// 
// Forward References:
// 


extern "C" void createRoot__10JKRExpHeapFib(); // 1
extern "C" void create__10JKRExpHeapFUlP7JKRHeapb(); // 1
extern "C" void create__10JKRExpHeapFPvUlP7JKRHeapb(); // 1
extern "C" void do_destroy__10JKRExpHeapFv(); // 1
extern "C" void __ct__10JKRExpHeapFPvUlP7JKRHeapb(); // 1
extern "C" void __dt__10JKRExpHeapFv(); // 1
extern "C" void do_alloc__10JKRExpHeapFUli(); // 1
extern "C" void allocFromHead__10JKRExpHeapFUli(); // 1
extern "C" void allocFromHead__10JKRExpHeapFUl(); // 1
extern "C" void allocFromTail__10JKRExpHeapFUli(); // 1
extern "C" void allocFromTail__10JKRExpHeapFUl(); // 1
extern "C" void do_free__10JKRExpHeapFPv(); // 1
extern "C" void do_freeAll__10JKRExpHeapFv(); // 1
extern "C" void do_freeTail__10JKRExpHeapFv(); // 1
extern "C" void do_fillFreeArea__10JKRExpHeapFv(); // 1
extern "C" void do_changeGroupID__10JKRExpHeapFUc(); // 1
extern "C" void do_resize__10JKRExpHeapFPvUl(); // 1
extern "C" void do_getSize__10JKRExpHeapFPv(); // 1
extern "C" void do_getFreeSize__10JKRExpHeapFv(); // 1
extern "C" void do_getMaxFreeBlock__10JKRExpHeapFv(); // 1
extern "C" void do_getTotalFreeSize__10JKRExpHeapFv(); // 1
extern "C" void getUsedSize__10JKRExpHeapCFUc(); // 1
extern "C" void getTotalUsedSize__10JKRExpHeapCFv(); // 1
extern "C" void appendUsedList__10JKRExpHeapFPQ210JKRExpHeap9CMemBlock(); // 1
extern "C" void setFreeBlock__10JKRExpHeapFPQ210JKRExpHeap9CMemBlockPQ210JKRExpHeap9CMemBlockPQ210JKRExpHeap9CMemBlock(); // 1
extern "C" void removeFreeBlock__10JKRExpHeapFPQ210JKRExpHeap9CMemBlock(); // 1
extern "C" void removeUsedBlock__10JKRExpHeapFPQ210JKRExpHeap9CMemBlock(); // 1
extern "C" void recycleFreeBlock__10JKRExpHeapFPQ210JKRExpHeap9CMemBlock(); // 1
extern "C" void joinTwoBlocks__10JKRExpHeapFPQ210JKRExpHeap9CMemBlock(); // 1
extern "C" void check__10JKRExpHeapFv(); // 1
extern "C" void dump__10JKRExpHeapFv(); // 1
extern "C" void dump_sort__10JKRExpHeapFv(); // 1
extern "C" void initiate__Q210JKRExpHeap9CMemBlockFPQ210JKRExpHeap9CMemBlockPQ210JKRExpHeap9CMemBlockUlUcUc(); // 1
extern "C" void allocFore__Q210JKRExpHeap9CMemBlockFUlUcUcUcUc(); // 1
extern "C" void allocBack__Q210JKRExpHeap9CMemBlockFUlUcUcUcUc(); // 1
extern "C" void free__Q210JKRExpHeap9CMemBlockFP10JKRExpHeap(); // 1
extern "C" void getHeapBlock__Q210JKRExpHeap9CMemBlockFPv(); // 1
extern "C" void state_register__10JKRExpHeapCFPQ27JKRHeap6TStateUl(); // 1
extern "C" void state_compare__10JKRExpHeapCFRCQ27JKRHeap6TStateRCQ27JKRHeap6TState(); // 1
extern "C" void getHeapType__10JKRExpHeapFv(); // 1
extern "C" void do_getCurrentGroupId__10JKRExpHeapFv(); // 1
extern "C" extern char const* const stringBase0;

// 
// External References:
// 

void operator delete(void*); // 2

extern "C" void __ct__7JKRHeapFPvUlP7JKRHeapb(); // 1
extern "C" void __dt__7JKRHeapFv(); // 1
extern "C" void initArena__7JKRHeapFPPcPUli(); // 1
extern "C" void alloc__7JKRHeapFUliP7JKRHeap(); // 1
extern "C" void free__7JKRHeapFPvP7JKRHeap(); // 1
extern "C" void callAllDisposer__7JKRHeapFv(); // 1
extern "C" void getTotalFreeSize__7JKRHeapFv(); // 1
extern "C" void getMaxAllocatableSize__7JKRHeapFi(); // 1
extern "C" void find__7JKRHeapCFPv(); // 1
extern "C" void dispose__7JKRHeapFPvUl(); // 1
extern "C" void dispose__7JKRHeapFv(); // 1
extern "C" void __dl__FPv(); // 1
extern "C" void state_dump__7JKRHeapCFRCQ27JKRHeap6TState(); // 1
extern "C" void panic_f__12JUTExceptionFPCciPCce(); // 1
extern "C" void JUTReportConsole_f(); // 1
extern "C" void JUTReportConsole(); // 1
extern "C" void JUTWarningConsole_f(); // 1
extern "C" void JUTWarningConsole(); // 1
extern "C" void OSLockMutex(); // 1
extern "C" void OSUnlockMutex(); // 1
extern "C" void _savegpr_25(); // 1
extern "C" void _savegpr_27(); // 1
extern "C" void _savegpr_28(); // 1
extern "C" void _savegpr_29(); // 1
extern "C" void _restgpr_25(); // 1
extern "C" void _restgpr_27(); // 1
extern "C" void _restgpr_28(); // 1
extern "C" void _restgpr_29(); // 1
extern "C" extern u8 sCurrentHeap__7JKRHeap[4];
extern "C" extern u8 sRootHeap__7JKRHeap[4];
extern "C" extern u8 mErrorHandler__7JKRHeap[4];

// 
// Declarations:
// 

/* 802CEDB4-802CEE2C 0078+00 s=0 e=1 z=0  None .text      createRoot__10JKRExpHeapFib                                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRExpHeap::createRoot(int param_0, bool param_1) {
	nofralloc
#include "asm/JSystem/JKernel/JKRExpHeap/createRoot__10JKRExpHeapFib.s"
}
#pragma pop


/* 802CEE2C-802CEF00 00D4+00 s=0 e=19 z=0  None .text      create__10JKRExpHeapFUlP7JKRHeapb                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRExpHeap::create(u32 param_0, JKRHeap* param_1, bool param_2) {
	nofralloc
#include "asm/JSystem/JKernel/JKRExpHeap/create__10JKRExpHeapFUlP7JKRHeapb.s"
}
#pragma pop


/* 802CEF00-802CEFAC 00AC+00 s=0 e=1 z=0  None .text      create__10JKRExpHeapFPvUlP7JKRHeapb                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRExpHeap::create(void* param_0, u32 param_1, JKRHeap* param_2, bool param_3) {
	nofralloc
#include "asm/JSystem/JKernel/JKRExpHeap/create__10JKRExpHeapFPvUlP7JKRHeapb.s"
}
#pragma pop


/* 802CEFAC-802CF030 0084+00 s=1 e=0 z=0  None .text      do_destroy__10JKRExpHeapFv                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRExpHeap::do_destroy() {
	nofralloc
#include "asm/JSystem/JKernel/JKRExpHeap/do_destroy__10JKRExpHeapFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 803CBFD0-803CC030 0060+00 s=2 e=0 z=0  None .data      __vt__10JKRExpHeap                                           */
SECTION_DATA static void* __vt__10JKRExpHeap[24] = {
	/* 0    */ (void*)NULL /* RTTI */,
	/* 1    */ (void*)NULL,
	/* 2    */ (void*)__dt__10JKRExpHeapFv,
	/* 3    */ (void*)callAllDisposer__7JKRHeapFv,
	/* 4    */ (void*)getHeapType__10JKRExpHeapFv,
	/* 5    */ (void*)check__10JKRExpHeapFv,
	/* 6    */ (void*)dump_sort__10JKRExpHeapFv,
	/* 7    */ (void*)dump__10JKRExpHeapFv,
	/* 8    */ (void*)do_destroy__10JKRExpHeapFv,
	/* 9    */ (void*)do_alloc__10JKRExpHeapFUli,
	/* 10   */ (void*)do_free__10JKRExpHeapFPv,
	/* 11   */ (void*)do_freeAll__10JKRExpHeapFv,
	/* 12   */ (void*)do_freeTail__10JKRExpHeapFv,
	/* 13   */ (void*)do_fillFreeArea__10JKRExpHeapFv,
	/* 14   */ (void*)do_resize__10JKRExpHeapFPvUl,
	/* 15   */ (void*)do_getSize__10JKRExpHeapFPv,
	/* 16   */ (void*)do_getFreeSize__10JKRExpHeapFv,
	/* 17   */ (void*)do_getMaxFreeBlock__10JKRExpHeapFv,
	/* 18   */ (void*)do_getTotalFreeSize__10JKRExpHeapFv,
	/* 19   */ (void*)do_changeGroupID__10JKRExpHeapFUc,
	/* 20   */ (void*)do_getCurrentGroupId__10JKRExpHeapFv,
	/* 21   */ (void*)state_register__10JKRExpHeapCFPQ27JKRHeap6TStateUl,
	/* 22   */ (void*)state_compare__10JKRExpHeapCFRCQ27JKRHeap6TStateRCQ27JKRHeap6TState,
	/* 23   */ (void*)state_dump__7JKRHeapCFRCQ27JKRHeap6TState,
};

/* 802CF030-802CF0C0 0090+00 s=3 e=0 z=0  None .text      __ct__10JKRExpHeapFPvUlP7JKRHeapb                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm JKRExpHeap::JKRExpHeap(void* param_0, u32 param_1, JKRHeap* param_2, bool param_3) {
	nofralloc
#include "asm/JSystem/JKernel/JKRExpHeap/__ct__10JKRExpHeapFPvUlP7JKRHeapb.s"
}
#pragma pop


/* 802CF0C0-802CF128 0068+00 s=1 e=0 z=0  None .text      __dt__10JKRExpHeapFv                                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm JKRExpHeap::~JKRExpHeap() {
	nofralloc
#include "asm/JSystem/JKernel/JKRExpHeap/__dt__10JKRExpHeapFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 8039CAF0-8039CE50 0360+00 s=6 e=0 z=0  None .rodata    @stringBase0                                                 */
#pragma push
#pragma force_active on
#pragma section ".dead"
SECTION_DEAD char const* const stringBase_8039CAF0 = 
    ":::cannot alloc memory (0x%x byte).\n";
SECTION_DEAD char const* const stringBase_8039CB15 = "JKRExpHeap.cpp";
SECTION_DEAD char const* const stringBase_8039CB24 = "%s";
SECTION_DEAD char const* const stringBase_8039CB27 = "bad appendUsedList\n";
SECTION_DEAD char const* const stringBase_8039CB3B = 
    ":::Heap may be broken. (block = %x)";
SECTION_DEAD char const* const stringBase_8039CB5F = "Bad Block\n";
SECTION_DEAD char const* const stringBase_8039CB6A = 
    ":::addr %08x: bad heap signature. (%c%c)\n";
SECTION_DEAD char const* const stringBase_8039CB94 = 
    ":::addr %08x: bad next pointer (%08x)\nabort\n";
SECTION_DEAD char const* const stringBase_8039CBC1 = 
    ":::addr %08x: bad previous pointer (%08x)\n";
SECTION_DEAD char const* const stringBase_8039CBEC = 
    ":::addr %08x: bad used list(REV) (%08x)\n";
SECTION_DEAD char const* const stringBase_8039CC15 = 
    ":::addr %08x: bad block size (%08x)\n";
SECTION_DEAD char const* const stringBase_8039CC3A = 
    ":::bad total memory block size (%08X, %08X)\n";
SECTION_DEAD char const* const stringBase_8039CC67 = 
    ":::there is some error in this heap!\n";
SECTION_DEAD char const* const stringBase_8039CC8D = 
    " attr  address:   size    gid aln   prev_ptr nex"
    "t_ptr\n";
SECTION_DEAD char const* const stringBase_8039CCC4 = "(Used Blocks)\n";
SECTION_DEAD char const* const stringBase_8039CCD3 = " NONE\n";
SECTION_DEAD char const* const stringBase_8039CCDA = 
    "xxxxx %08x: --------  --- ---  (-------- -------"
    "-)\nabort\n";
SECTION_DEAD char const* const stringBase_8039CD14 = 
    "%s %08x: %08x  %3d %3d  (%08x %08x)\n";
SECTION_DEAD char const* const stringBase_8039CD39 = " temp";
SECTION_DEAD char const* const stringBase_8039CD3F = "alloc";
SECTION_DEAD char const* const stringBase_8039CD45 = "(Free Blocks)\n";
SECTION_DEAD char const* const stringBase_8039CD54 = " free";
SECTION_DEAD char const* const stringBase_8039CD5A = 
    "%d / %d bytes (%6.2f%%) used (U:%d F:%d)\n";
SECTION_DEAD char const* const stringBase_8039CD84 = "+---------------JKRExpHeap\n";
SECTION_DEAD char const* const stringBase_8039CDA0 = 
    "|         Align Group  size    ( prev , next )\n";
SECTION_DEAD char const* const stringBase_8039CDD0 = "| ---- FreeFirst\n";
SECTION_DEAD char const* const stringBase_8039CDE2 = "| %08x  ";
SECTION_DEAD char const* const stringBase_8039CDEB = "%2x  %3d  %6x  (%08x %08x)\n";
SECTION_DEAD char const* const stringBase_8039CE07 = "| ---- FreeLast\n";
SECTION_DEAD char const* const stringBase_8039CE18 = "| ---- UsedFirst\n";
SECTION_DEAD char const* const stringBase_8039CE2A = "| ---- UsedLast\n";
SECTION_DEAD char const* const stringBase_8039CE3B = "+---------------End\n";
#pragma pop

/* 802CF128-802CF234 010C+00 s=1 e=0 z=0  None .text      do_alloc__10JKRExpHeapFUli                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRExpHeap::do_alloc(u32 param_0, int param_1) {
	nofralloc
#include "asm/JSystem/JKernel/JKRExpHeap/do_alloc__10JKRExpHeapFUli.s"
}
#pragma pop


/* ############################################################################################## */
/* 80451398-8045139C 0004+00 s=1 e=0 z=0  None .sbss      DBfoundSize                                                  */
static u8 DBfoundSize[4];

/* 8045139C-804513A0 0004+00 s=1 e=0 z=0  None .sbss      DBfoundOffset                                                */
static u8 DBfoundOffset[4];

/* 804513A0-804513A4 0004+00 s=1 e=0 z=0  None .sbss      DBfoundBlock                                                 */
static u8 DBfoundBlock[4];

/* 804513A4-804513A8 0004+00 s=1 e=0 z=0  None .sbss      DBnewFreeBlock                                               */
static u8 DBnewFreeBlock[4];

/* 804513A8-804513B0 0004+04 s=1 e=0 z=0  None .sbss      DBnewUsedBlock                                               */
static u8 DBnewUsedBlock[4 + 4 /* padding */];

/* 802CF234-802CF490 025C+00 s=1 e=0 z=0  None .text      allocFromHead__10JKRExpHeapFUli                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRExpHeap::allocFromHead(u32 param_0, int param_1) {
	nofralloc
#include "asm/JSystem/JKernel/JKRExpHeap/allocFromHead__10JKRExpHeapFUli.s"
}
#pragma pop


/* 802CF490-802CF574 00E4+00 s=1 e=0 z=0  None .text      allocFromHead__10JKRExpHeapFUl                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRExpHeap::allocFromHead(u32 param_0) {
	nofralloc
#include "asm/JSystem/JKernel/JKRExpHeap/allocFromHead__10JKRExpHeapFUl.s"
}
#pragma pop


/* 802CF574-802CF6D4 0160+00 s=1 e=0 z=0  None .text      allocFromTail__10JKRExpHeapFUli                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRExpHeap::allocFromTail(u32 param_0, int param_1) {
	nofralloc
#include "asm/JSystem/JKernel/JKRExpHeap/allocFromTail__10JKRExpHeapFUli.s"
}
#pragma pop


/* 802CF6D4-802CF7AC 00D8+00 s=1 e=0 z=0  None .text      allocFromTail__10JKRExpHeapFUl                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRExpHeap::allocFromTail(u32 param_0) {
	nofralloc
#include "asm/JSystem/JKernel/JKRExpHeap/allocFromTail__10JKRExpHeapFUl.s"
}
#pragma pop


/* 802CF7AC-802CF820 0074+00 s=1 e=0 z=0  None .text      do_free__10JKRExpHeapFPv                                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRExpHeap::do_free(void* param_0) {
	nofralloc
#include "asm/JSystem/JKernel/JKRExpHeap/do_free__10JKRExpHeapFPv.s"
}
#pragma pop


/* 802CF820-802CF89C 007C+00 s=1 e=0 z=0  None .text      do_freeAll__10JKRExpHeapFv                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRExpHeap::do_freeAll() {
	nofralloc
#include "asm/JSystem/JKernel/JKRExpHeap/do_freeAll__10JKRExpHeapFv.s"
}
#pragma pop


/* 802CF89C-802CF924 0088+00 s=1 e=0 z=0  None .text      do_freeTail__10JKRExpHeapFv                                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRExpHeap::do_freeTail() {
	nofralloc
#include "asm/JSystem/JKernel/JKRExpHeap/do_freeTail__10JKRExpHeapFv.s"
}
#pragma pop


/* 802CF924-802CF928 0004+00 s=1 e=0 z=0  None .text      do_fillFreeArea__10JKRExpHeapFv                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRExpHeap::do_fillFreeArea() {
	nofralloc
#include "asm/JSystem/JKernel/JKRExpHeap/do_fillFreeArea__10JKRExpHeapFv.s"
}
#pragma pop


/* 802CF928-802CF978 0050+00 s=1 e=0 z=0  None .text      do_changeGroupID__10JKRExpHeapFUc                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRExpHeap::do_changeGroupID(u8 param_0) {
	nofralloc
#include "asm/JSystem/JKernel/JKRExpHeap/do_changeGroupID__10JKRExpHeapFUc.s"
}
#pragma pop


/* 802CF978-802CFB24 01AC+00 s=1 e=0 z=0  None .text      do_resize__10JKRExpHeapFPvUl                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRExpHeap::do_resize(void* param_0, u32 param_1) {
	nofralloc
#include "asm/JSystem/JKernel/JKRExpHeap/do_resize__10JKRExpHeapFPvUl.s"
}
#pragma pop


/* 802CFB24-802CFBA4 0080+00 s=1 e=0 z=0  None .text      do_getSize__10JKRExpHeapFPv                                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRExpHeap::do_getSize(void* param_0) {
	nofralloc
#include "asm/JSystem/JKernel/JKRExpHeap/do_getSize__10JKRExpHeapFPv.s"
}
#pragma pop


/* 802CFBA4-802CFC10 006C+00 s=1 e=0 z=0  None .text      do_getFreeSize__10JKRExpHeapFv                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRExpHeap::do_getFreeSize() {
	nofralloc
#include "asm/JSystem/JKernel/JKRExpHeap/do_getFreeSize__10JKRExpHeapFv.s"
}
#pragma pop


/* 802CFC10-802CFC84 0074+00 s=1 e=0 z=0  None .text      do_getMaxFreeBlock__10JKRExpHeapFv                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRExpHeap::do_getMaxFreeBlock() {
	nofralloc
#include "asm/JSystem/JKernel/JKRExpHeap/do_getMaxFreeBlock__10JKRExpHeapFv.s"
}
#pragma pop


/* 802CFC84-802CFCE8 0064+00 s=1 e=0 z=0  None .text      do_getTotalFreeSize__10JKRExpHeapFv                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRExpHeap::do_getTotalFreeSize() {
	nofralloc
#include "asm/JSystem/JKernel/JKRExpHeap/do_getTotalFreeSize__10JKRExpHeapFv.s"
}
#pragma pop


/* 802CFCE8-802CFD64 007C+00 s=1 e=0 z=0  None .text      getUsedSize__10JKRExpHeapCFUc                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRExpHeap::getUsedSize(u8 param_0) const {
	nofralloc
#include "asm/JSystem/JKernel/JKRExpHeap/getUsedSize__10JKRExpHeapCFUc.s"
}
#pragma pop


/* 802CFD64-802CFDCC 0068+00 s=0 e=5 z=0  None .text      getTotalUsedSize__10JKRExpHeapCFv                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRExpHeap::getTotalUsedSize() const {
	nofralloc
#include "asm/JSystem/JKernel/JKRExpHeap/getTotalUsedSize__10JKRExpHeapCFv.s"
}
#pragma pop


/* 802CFDCC-802CFE68 009C+00 s=4 e=0 z=0  None .text      appendUsedList__10JKRExpHeapFPQ210JKRExpHeap9CMemBlock       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRExpHeap::appendUsedList(JKRExpHeap::CMemBlock* param_0) {
	nofralloc
#include "asm/JSystem/JKernel/JKRExpHeap/appendUsedList__10JKRExpHeapFPQ210JKRExpHeap9CMemBlock.s"
}
#pragma pop


/* 802CFE68-802CFEB4 004C+00 s=5 e=0 z=0  None .text      setFreeBlock__10JKRExpHeapFPQ210JKRExpHeap9CMemBlockPQ210JKRExpHeap9CMemBlockPQ210JKRExpHeap9CMemBlock */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRExpHeap::setFreeBlock(JKRExpHeap::CMemBlock* param_0, JKRExpHeap::CMemBlock* param_1, JKRExpHeap::CMemBlock* param_2) {
	nofralloc
#include "asm/JSystem/JKernel/JKRExpHeap/func_802CFE68.s"
}
#pragma pop


/* 802CFEB4-802CFEE8 0034+00 s=5 e=0 z=0  None .text      removeFreeBlock__10JKRExpHeapFPQ210JKRExpHeap9CMemBlock      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRExpHeap::removeFreeBlock(JKRExpHeap::CMemBlock* param_0) {
	nofralloc
#include "asm/JSystem/JKernel/JKRExpHeap/removeFreeBlock__10JKRExpHeapFPQ210JKRExpHeap9CMemBlock.s"
}
#pragma pop


/* 802CFEE8-802CFF1C 0034+00 s=1 e=0 z=0  None .text      removeUsedBlock__10JKRExpHeapFPQ210JKRExpHeap9CMemBlock      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRExpHeap::removeUsedBlock(JKRExpHeap::CMemBlock* param_0) {
	nofralloc
#include "asm/JSystem/JKernel/JKRExpHeap/removeUsedBlock__10JKRExpHeapFPQ210JKRExpHeap9CMemBlock.s"
}
#pragma pop


/* 802CFF1C-802D00B4 0198+00 s=2 e=0 z=0  None .text      recycleFreeBlock__10JKRExpHeapFPQ210JKRExpHeap9CMemBlock     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRExpHeap::recycleFreeBlock(JKRExpHeap::CMemBlock* param_0) {
	nofralloc
#include "asm/JSystem/JKernel/JKRExpHeap/recycleFreeBlock__10JKRExpHeapFPQ210JKRExpHeap9CMemBlock.s"
}
#pragma pop


/* 802D00B4-802D0190 00DC+00 s=1 e=0 z=0  None .text      joinTwoBlocks__10JKRExpHeapFPQ210JKRExpHeap9CMemBlock        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRExpHeap::joinTwoBlocks(JKRExpHeap::CMemBlock* param_0) {
	nofralloc
#include "asm/JSystem/JKernel/JKRExpHeap/joinTwoBlocks__10JKRExpHeapFPQ210JKRExpHeap9CMemBlock.s"
}
#pragma pop


/* 802D0190-802D03B8 0228+00 s=1 e=0 z=0  None .text      check__10JKRExpHeapFv                                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRExpHeap::check() {
	nofralloc
#include "asm/JSystem/JKernel/JKRExpHeap/check__10JKRExpHeapFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80455F98-80455FA0 0004+04 s=2 e=0 z=0  None .sdata2    @1121                                                        */
SECTION_SDATA2 static f32 lit_1121[1 + 1 /* padding */] = {
	100.0f,
	/* padding */
	0.0f,
};

/* 80455FA0-80455FA8 0008+00 s=2 e=0 z=0  None .sdata2    @1123                                                        */
SECTION_SDATA2 static f64 lit_1123 = 4503599627370496.0 /* cast u32 to float */;

/* 802D03B8-802D05CC 0214+00 s=1 e=0 z=0  None .text      dump__10JKRExpHeapFv                                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRExpHeap::dump() {
	nofralloc
#include "asm/JSystem/JKernel/JKRExpHeap/dump__10JKRExpHeapFv.s"
}
#pragma pop


/* 802D05CC-802D0810 0244+00 s=1 e=0 z=0  None .text      dump_sort__10JKRExpHeapFv                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRExpHeap::dump_sort() {
	nofralloc
#include "asm/JSystem/JKernel/JKRExpHeap/dump_sort__10JKRExpHeapFv.s"
}
#pragma pop


/* 802D0810-802D0830 0020+00 s=4 e=0 z=0  None .text      initiate__Q210JKRExpHeap9CMemBlockFPQ210JKRExpHeap9CMemBlockPQ210JKRExpHeap9CMemBlockUlUcUc */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRExpHeap::CMemBlock::initiate(JKRExpHeap::CMemBlock* param_0, JKRExpHeap::CMemBlock* param_1, u32 param_2, u8 param_3, u8 param_4) {
	nofralloc
#include "asm/JSystem/JKernel/JKRExpHeap/func_802D0810.s"
}
#pragma pop


/* 802D0830-802D0874 0044+00 s=3 e=0 z=0  None .text      allocFore__Q210JKRExpHeap9CMemBlockFUlUcUcUcUc               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRExpHeap::CMemBlock::allocFore(u32 param_0, u8 param_1, u8 param_2, u8 param_3, u8 param_4) {
	nofralloc
#include "asm/JSystem/JKernel/JKRExpHeap/allocFore__Q210JKRExpHeap9CMemBlockFUlUcUcUcUc.s"
}
#pragma pop


/* 802D0874-802D08CC 0058+00 s=1 e=0 z=0  None .text      allocBack__Q210JKRExpHeap9CMemBlockFUlUcUcUcUc               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRExpHeap::CMemBlock::allocBack(u32 param_0, u8 param_1, u8 param_2, u8 param_3, u8 param_4) {
	nofralloc
#include "asm/JSystem/JKernel/JKRExpHeap/allocBack__Q210JKRExpHeap9CMemBlockFUlUcUcUcUc.s"
}
#pragma pop


/* 802D08CC-802D091C 0050+00 s=2 e=0 z=0  None .text      free__Q210JKRExpHeap9CMemBlockFP10JKRExpHeap                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRExpHeap::CMemBlock::free(JKRExpHeap* param_0) {
	nofralloc
#include "asm/JSystem/JKernel/JKRExpHeap/free__Q210JKRExpHeap9CMemBlockFP10JKRExpHeap.s"
}
#pragma pop


/* 802D091C-802D0938 001C+00 s=3 e=0 z=0  None .text      getHeapBlock__Q210JKRExpHeap9CMemBlockFPv                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRExpHeap::CMemBlock::getHeapBlock(void* param_0) {
	nofralloc
#include "asm/JSystem/JKernel/JKRExpHeap/getHeapBlock__Q210JKRExpHeap9CMemBlockFPv.s"
}
#pragma pop


/* 802D0938-802D09E0 00A8+00 s=1 e=0 z=0  None .text      state_register__10JKRExpHeapCFPQ27JKRHeap6TStateUl           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRExpHeap::state_register(JKRHeap::TState* param_0, u32 param_1) const {
	nofralloc
#include "asm/JSystem/JKernel/JKRExpHeap/state_register__10JKRExpHeapCFPQ27JKRHeap6TStateUl.s"
}
#pragma pop


/* 802D09E0-802D0A10 0030+00 s=1 e=0 z=0  None .text      state_compare__10JKRExpHeapCFRCQ27JKRHeap6TStateRCQ27JKRHeap6TState */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRExpHeap::state_compare(JKRHeap::TState const& param_0, JKRHeap::TState const& param_1) const {
	nofralloc
#include "asm/JSystem/JKernel/JKRExpHeap/state_compare__10JKRExpHeapCFRCQ27JKRHeap6TStateRCQ27JKRHeap6TState.s"
}
#pragma pop


/* 802D0A10-802D0A1C 000C+00 s=1 e=0 z=0  None .text      getHeapType__10JKRExpHeapFv                                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRExpHeap::getHeapType() {
	nofralloc
#include "asm/JSystem/JKernel/JKRExpHeap/getHeapType__10JKRExpHeapFv.s"
}
#pragma pop


/* 802D0A1C-802D0A24 0008+00 s=1 e=0 z=0  None .text      do_getCurrentGroupId__10JKRExpHeapFv                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRExpHeap::do_getCurrentGroupId() {
	nofralloc
#include "asm/JSystem/JKernel/JKRExpHeap/do_getCurrentGroupId__10JKRExpHeapFv.s"
}
#pragma pop


