// 
// Generated By: dol2asm
// Translation Unit: JKRAramBlock
// 

#include "dolphin/types.h"

// 
// Types:
// 

// build JKRAramBlock (JKRAramBlock) False/False
// build JKRAramHeap (JKRAramHeap) False/False
/* top-level dependencies (begin JKRAramHeap) */
/* top-level dependencies (end JKRAramHeap) */
struct JKRAramHeap {
};

/* top-level dependencies (begin JKRAramBlock) */
// outer dependency: JKRAramHeap
/* top-level dependencies (end JKRAramBlock) */
struct JKRAramBlock {
	// JKRAramHeap
	/* 802D3304 */ JKRAramBlock(u32, u32, u32, char, bool);
	/* 802D3378 */ ~JKRAramBlock();
	/* 802D3434 */ void allocHead(u32, char, JKRAramHeap*);
	/* 802D34D0 */ void allocTail(u32, char, JKRAramHeap*);
};

// build JKRAramHeap (JKRAramHeap) True/True
// build JKRHeap (JKRHeap) False/False
/* top-level dependencies (begin JKRHeap) */
/* top-level dependencies (end JKRHeap) */
struct JKRHeap {
};

// build JSUPtrLink (JSUPtrLink) False/False
/* top-level dependencies (begin JSUPtrLink) */
/* top-level dependencies (end JSUPtrLink) */
struct JSUPtrLink {
	/* 802DBDFC */ JSUPtrLink(void*);
	/* 802DBE14 */ ~JSUPtrLink();
};

// build JSUPtrList (JSUPtrList) False/False
// build JSUPtrLink (JSUPtrLink) True/True
/* top-level dependencies (begin JSUPtrList) */
// outer dependency: JSUPtrLink
/* top-level dependencies (end JSUPtrList) */
struct JSUPtrList {
	// JSUPtrLink
	/* 802DC094 */ void insert(JSUPtrLink*, JSUPtrLink*);
	/* 802DC15C */ void remove(JSUPtrLink*);
};

// 
// Forward References:
// 


extern "C" void __ct__12JKRAramBlockFUlUlUlUcb();
extern "C" void __dt__12JKRAramBlockFv();
extern "C" void allocHead__12JKRAramBlockFUlUcP11JKRAramHeap();
extern "C" void allocTail__12JKRAramBlockFUlUcP11JKRAramHeap();
SECTION_DATA extern void*const __vt__12JKRAramBlock[4];

// 
// External References:
// 

void* operator new(u32, JKRHeap*, s32);
void operator delete(void*);
extern "C" void _savegpr_26();
extern "C" void _savegpr_27();
extern "C" void _restgpr_26();
extern "C" void _restgpr_27();

extern "C" void* __nw__FUlP7JKRHeapi();
extern "C" void __dl__FPv();
extern "C" void __ct__10JSUPtrLinkFPv();
extern "C" void __dt__10JSUPtrLinkFv();
extern "C" void insert__10JSUPtrListFP10JSUPtrLinkP10JSUPtrLink();
extern "C" void remove__10JSUPtrListFP10JSUPtrLink();
extern "C" void _savegpr_26();
extern "C" void _savegpr_27();
extern "C" void _restgpr_26();
extern "C" void _restgpr_27();

// 
// Declarations:
// 

/* ############################################################################################## */
/* 803CC178-803CC188 000C+04 rc=2 efc=0 .data      __vt__12JKRAramBlock                                         */
void* const __vt__12JKRAramBlock[4] = {
	NULL, /* RTTI */
	NULL,
	(void*)__dt__12JKRAramBlockFv,
	/* padding */
	NULL,
};

/* 802D3304-802D3378 0074+00 rc=3 efc=1 .text      __ct__12JKRAramBlockFUlUlUlUcb                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm JKRAramBlock::JKRAramBlock(u32 field_0, u32 field_1, u32 field_2, char field_3, bool field_4) {
	nofralloc
#include "asm/JSystem/JKernel/JKRAramBlock/__ct__12JKRAramBlockFUlUlUlUcb.s"
}
#pragma pop


/* 802D3378-802D3434 00BC+00 rc=1 efc=0 .text      __dt__12JKRAramBlockFv                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm JKRAramBlock::~JKRAramBlock() {
	nofralloc
#include "asm/JSystem/JKernel/JKRAramBlock/__dt__12JKRAramBlockFv.s"
}
#pragma pop


/* 802D3434-802D34D0 009C+00 rc=1 efc=1 .text      allocHead__12JKRAramBlockFUlUcP11JKRAramHeap                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRAramBlock::allocHead(u32 field_0, char field_1, JKRAramHeap* field_2) {
	nofralloc
#include "asm/JSystem/JKernel/JKRAramBlock/allocHead__12JKRAramBlockFUlUcP11JKRAramHeap.s"
}
#pragma pop


/* 802D34D0-802D3574 00A4+00 rc=1 efc=1 .text      allocTail__12JKRAramBlockFUlUcP11JKRAramHeap                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRAramBlock::allocTail(u32 field_0, char field_1, JKRAramHeap* field_2) {
	nofralloc
#include "asm/JSystem/JKernel/JKRAramBlock/allocTail__12JKRAramBlockFUlUcP11JKRAramHeap.s"
}
#pragma pop


