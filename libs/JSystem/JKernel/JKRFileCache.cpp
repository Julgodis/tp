// 
// Generated By: dol2asm
// Translation Unit: JKRFileCache
// 

#include "dol2asm.h"
#include "dolphin/types.h"
#include "JSystem/JKernel/JKRFileCache.h"

// 
// Types:
// 

struct JKRHeap {
	/* 802CE4D4 */ void alloc(u32, int);
	/* 802CE474 */ void alloc(u32, int, JKRHeap*);
	/* 802CE500 */ void free(void*, JKRHeap*);
	/* 802CE548 */ void free(void*);
	/* 802CE83C */ void findFromRoot(void*);
};

struct JKRFileCache {
	struct CCacheBlock {
		/* 802D566C */ CCacheBlock(u32, u32, void const*);
	};

	/* 802D49B4 */ void mount(char const*, JKRHeap*, char const*);
	/* 802D4AB4 */ JKRFileCache(char const*, char const*);
	/* 802D4C70 */ ~JKRFileCache();
	/* 802D4D44 */ void becomeCurrent(char const*);
	/* 802D4DD8 */ void getResource(char const*);
	/* 802D4EDC */ void getResource(u32, char const*);
	/* 802D503C */ void readResource(void*, u32, u32, char const*);
	/* 802D4F64 */ void readResource(void*, u32, char const*);
	/* 802D50D4 */ void removeResourceAll();
	/* 802D5164 */ void removeResource(void*);
	/* 802D51F8 */ void detachResource(void*);
	/* 802D526C */ void getResSize(void const*) const;
	/* 802D52A0 */ void countFile(char const*) const;
	/* 802D531C */ void getFirstFile(char const*) const;
	/* 802D53B8 */ void findCacheBlock(void const*) const;
	/* 802D53E4 */ void findCacheBlock(u32) const;
	/* 802D5410 */ void findFile(char*, char const*) const;
	/* 802D551C */ void getDvdPathName(char const*) const;
	/* 802D5624 */ void convStrLower(char*) const;
	/* 802D56C8 */ void getFsResource(char const*);
	/* 802D56F4 */ void getNameResource(u32, char const*);
	/* 802D5720 */ void readFsResource(void*, u32, char const*);
	/* 802D574C */ void readNameResource(void*, u32, u32, char const*);
};

struct JKRFileLoader {
	/* 802D40F0 */ JKRFileLoader();
	/* 802D4148 */ ~JKRFileLoader();
	/* 802D41D4 */ void unmount();
};

struct JKRDvdFinder {
	/* 802D4770 */ JKRDvdFinder(char const*);
};

struct JKRFile {
	/* 802D9518 */ void read(void*, s32, s32);
};

struct JKRDvdFile {
	/* 802D95F8 */ JKRDvdFile(char const*);
	/* 802D9748 */ ~JKRDvdFile();
};

struct JSUPtrLink {
	/* 802DBDFC */ JSUPtrLink(void*);
	/* 802DBE14 */ ~JSUPtrLink();
};

struct JSUPtrList {
	/* 802DBEAC */ ~JSUPtrList();
	/* 802DBF14 */ void initiate();
	/* 802DBF4C */ void append(JSUPtrLink*);
	/* 802DBFF0 */ void prepend(JSUPtrLink*);
	/* 802DC15C */ void remove(JSUPtrLink*);
};

// 
// Forward References:
// 


extern "C" void mount__12JKRFileCacheFPCcP7JKRHeapPCc(); // 1
extern "C" void __ct__12JKRFileCacheFPCcPCc(); // 1
extern "C" void __dt__12JKRFileCacheFv(); // 1
extern "C" void becomeCurrent__12JKRFileCacheFPCc(); // 1
extern "C" void getResource__12JKRFileCacheFPCc(); // 1
extern "C" void getResource__12JKRFileCacheFUlPCc(); // 1
extern "C" void readResource__12JKRFileCacheFPvUlPCc(); // 1
extern "C" void readResource__12JKRFileCacheFPvUlUlPCc(); // 1
extern "C" void removeResourceAll__12JKRFileCacheFv(); // 1
extern "C" void removeResource__12JKRFileCacheFPv(); // 1
extern "C" void detachResource__12JKRFileCacheFPv(); // 1
extern "C" void getResSize__12JKRFileCacheCFPCv(); // 1
extern "C" void countFile__12JKRFileCacheCFPCc(); // 1
extern "C" void getFirstFile__12JKRFileCacheCFPCc(); // 1
extern "C" void findCacheBlock__12JKRFileCacheCFPCv(); // 1
extern "C" void findCacheBlock__12JKRFileCacheCFUl(); // 1
extern "C" void findFile__12JKRFileCacheCFPcPCc(); // 1
extern "C" void getDvdPathName__12JKRFileCacheCFPCc(); // 1
extern "C" void convStrLower__12JKRFileCacheCFPc(); // 1
extern "C" void __ct__Q212JKRFileCache11CCacheBlockFUlUlPCv(); // 1
extern "C" void getFsResource__12JKRFileCacheFPCc(); // 1
extern "C" void getNameResource__12JKRFileCacheFUlPCc(); // 1
extern "C" void readFsResource__12JKRFileCacheFPvUlPCc(); // 1
extern "C" void readNameResource__12JKRFileCacheFPvUlUlPCc(); // 1
extern "C" extern char const* const JKRFileCache__stringBase0;

// 
// External References:
// 

void* operator new(u32, JKRHeap*, int); // 2
void operator delete(void*); // 2

SECTION_INIT void memcpy(); // 1
extern "C" void alloc__7JKRHeapFUliP7JKRHeap(); // 1
extern "C" void alloc__7JKRHeapFUli(); // 1
extern "C" void free__7JKRHeapFPvP7JKRHeap(); // 1
extern "C" void free__7JKRHeapFPv(); // 1
extern "C" void findFromRoot__7JKRHeapFPv(); // 1
extern "C" void* __nw__FUlP7JKRHeapi(); // 1
extern "C" void __dl__FPv(); // 1
extern "C" void __ct__13JKRFileLoaderFv(); // 1
extern "C" void __dt__13JKRFileLoaderFv(); // 1
extern "C" void unmount__13JKRFileLoaderFv(); // 1
extern "C" void __ct__12JKRDvdFinderFPCc(); // 1
extern "C" void read__7JKRFileFPvll(); // 1
extern "C" void __ct__10JKRDvdFileFPCc(); // 1
extern "C" void __dt__10JKRDvdFileFv(); // 1
extern "C" void __ct__10JSUPtrLinkFPv(); // 1
extern "C" void __dt__10JSUPtrLinkFv(); // 1
extern "C" void __dt__10JSUPtrListFv(); // 1
extern "C" void initiate__10JSUPtrListFv(); // 1
extern "C" void append__10JSUPtrListFP10JSUPtrLink(); // 1
extern "C" void prepend__10JSUPtrListFP10JSUPtrLink(); // 1
extern "C" void remove__10JSUPtrListFP10JSUPtrLink(); // 1
extern "C" void DVDChangeDir(); // 1
extern "C" void DVDOpenDir(); // 1
extern "C" void DVDReadDir(); // 1
extern "C" void DVDCloseDir(); // 1
extern "C" void _savegpr_26(); // 1
extern "C" void _savegpr_27(); // 1
extern "C" void _savegpr_28(); // 1
extern "C" void _savegpr_29(); // 1
extern "C" void _restgpr_26(); // 1
extern "C" void _restgpr_27(); // 1
extern "C" void _restgpr_28(); // 1
extern "C" void _restgpr_29(); // 1
extern "C" void tolower(); // 1
extern "C" void strrchr(); // 1
extern "C" void strcmp(); // 1
extern "C" void strcat(); // 1
extern "C" void strcpy(); // 1
extern "C" void strlen(); // 1
extern "C" extern u8 sVolumeList__13JKRFileLoader[12];
extern "C" extern u8 sSystemHeap__7JKRHeap[4];
extern "C" extern u8 sCurrentVolume__13JKRFileLoader[4 + 4 /* padding */];

// 
// Declarations:
// 

/* 802D49B4-802D4AB4 0100+00 r=2 e=2 z=0  None .text      mount__12JKRFileCacheFPCcP7JKRHeapPCc                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRFileCache::mount(char const* param_0, JKRHeap* param_1, char const* param_2) {
	nofralloc
#include "asm/JSystem/JKernel/JKRFileCache/mount__12JKRFileCacheFPCcP7JKRHeapPCc.s"
}
#pragma pop


/* ############################################################################################## */
/* 8039D158-8039D160 0006+02 r=3 e=0 z=0  None .rodata    @stringBase0                                                 */
#pragma push
#pragma force_active on
#pragma section ".dead"
SECTION_DEAD char const* const stringBase_8039D158 = "/";
SECTION_DEAD char const* const stringBase_8039D15A = "dvd";
/* @stringBase0 padding */
SECTION_DEAD static char const* const pad_8039D15E = "\0";
#pragma pop

/* 803CC238-803CC288 004C+04 r=2 e=0 z=0  None .data      __vt__12JKRFileCache                                         */
SECTION_DATA static void* __vt__12JKRFileCache[19 + 1 /* padding */] = {
	/* 0    */ (void*)NULL /* RTTI */,
	/* 1    */ (void*)NULL,
	/* 2    */ (void*)__dt__12JKRFileCacheFv,
	/* 3    */ (void*)unmount__13JKRFileLoaderFv,
	/* 4    */ (void*)becomeCurrent__12JKRFileCacheFPCc,
	/* 5    */ (void*)getResource__12JKRFileCacheFPCc,
	/* 6    */ (void*)getResource__12JKRFileCacheFUlPCc,
	/* 7    */ (void*)readResource__12JKRFileCacheFPvUlPCc,
	/* 8    */ (void*)readResource__12JKRFileCacheFPvUlUlPCc,
	/* 9    */ (void*)removeResourceAll__12JKRFileCacheFv,
	/* 10   */ (void*)removeResource__12JKRFileCacheFPv,
	/* 11   */ (void*)detachResource__12JKRFileCacheFPv,
	/* 12   */ (void*)getResSize__12JKRFileCacheCFPCv,
	/* 13   */ (void*)countFile__12JKRFileCacheCFPCc,
	/* 14   */ (void*)getFirstFile__12JKRFileCacheCFPCc,
	/* 15   */ (void*)getFsResource__12JKRFileCacheFPCc,
	/* 16   */ (void*)getNameResource__12JKRFileCacheFUlPCc,
	/* 17   */ (void*)readFsResource__12JKRFileCacheFPvUlPCc,
	/* 18   */ (void*)readNameResource__12JKRFileCacheFPvUlUlPCc,
	/* padding */
	NULL,
};

/* 802D4AB4-802D4C70 01BC+00 r=1 e=0 z=0  None .text      __ct__12JKRFileCacheFPCcPCc                                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm JKRFileCache::JKRFileCache(char const* param_0, char const* param_1) {
	nofralloc
#include "asm/JSystem/JKernel/JKRFileCache/__ct__12JKRFileCacheFPCcPCc.s"
}
#pragma pop


/* 802D4C70-802D4D44 00D4+00 r=1 e=0 z=0  None .text      __dt__12JKRFileCacheFv                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm JKRFileCache::~JKRFileCache() {
	nofralloc
#include "asm/JSystem/JKernel/JKRFileCache/__dt__12JKRFileCacheFv.s"
}
#pragma pop


/* 802D4D44-802D4DD8 0094+00 r=1 e=0 z=0  None .text      becomeCurrent__12JKRFileCacheFPCc                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRFileCache::becomeCurrent(char const* param_0) {
	nofralloc
#include "asm/JSystem/JKernel/JKRFileCache/becomeCurrent__12JKRFileCacheFPCc.s"
}
#pragma pop


/* 802D4DD8-802D4EDC 0104+00 r=1 e=0 z=0  None .text      getResource__12JKRFileCacheFPCc                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRFileCache::getResource(char const* param_0) {
	nofralloc
#include "asm/JSystem/JKernel/JKRFileCache/getResource__12JKRFileCacheFPCc.s"
}
#pragma pop


/* 802D4EDC-802D4F64 0088+00 r=1 e=0 z=0  None .text      getResource__12JKRFileCacheFUlPCc                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRFileCache::getResource(u32 param_0, char const* param_1) {
	nofralloc
#include "asm/JSystem/JKernel/JKRFileCache/getResource__12JKRFileCacheFUlPCc.s"
}
#pragma pop


/* 802D4F64-802D503C 00D8+00 r=1 e=0 z=0  None .text      readResource__12JKRFileCacheFPvUlPCc                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRFileCache::readResource(void* param_0, u32 param_1, char const* param_2) {
	nofralloc
#include "asm/JSystem/JKernel/JKRFileCache/readResource__12JKRFileCacheFPvUlPCc.s"
}
#pragma pop


/* 802D503C-802D50D4 0098+00 r=1 e=0 z=0  None .text      readResource__12JKRFileCacheFPvUlUlPCc                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRFileCache::readResource(void* param_0, u32 param_1, u32 param_2, char const* param_3) {
	nofralloc
#include "asm/JSystem/JKernel/JKRFileCache/readResource__12JKRFileCacheFPvUlUlPCc.s"
}
#pragma pop


/* 802D50D4-802D5164 0090+00 r=1 e=0 z=0  None .text      removeResourceAll__12JKRFileCacheFv                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRFileCache::removeResourceAll() {
	nofralloc
#include "asm/JSystem/JKernel/JKRFileCache/removeResourceAll__12JKRFileCacheFv.s"
}
#pragma pop


/* 802D5164-802D51F8 0094+00 r=1 e=0 z=0  None .text      removeResource__12JKRFileCacheFPv                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRFileCache::removeResource(void* param_0) {
	nofralloc
#include "asm/JSystem/JKernel/JKRFileCache/removeResource__12JKRFileCacheFPv.s"
}
#pragma pop


/* 802D51F8-802D526C 0074+00 r=1 e=0 z=0  None .text      detachResource__12JKRFileCacheFPv                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRFileCache::detachResource(void* param_0) {
	nofralloc
#include "asm/JSystem/JKernel/JKRFileCache/detachResource__12JKRFileCacheFPv.s"
}
#pragma pop


/* 802D526C-802D52A0 0034+00 r=1 e=0 z=0  None .text      getResSize__12JKRFileCacheCFPCv                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRFileCache::getResSize(void const* param_0) const {
	nofralloc
#include "asm/JSystem/JKernel/JKRFileCache/getResSize__12JKRFileCacheCFPCv.s"
}
#pragma pop


/* 802D52A0-802D531C 007C+00 r=1 e=0 z=0  None .text      countFile__12JKRFileCacheCFPCc                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRFileCache::countFile(char const* param_0) const {
	nofralloc
#include "asm/JSystem/JKernel/JKRFileCache/countFile__12JKRFileCacheCFPCc.s"
}
#pragma pop


/* 802D531C-802D53B8 009C+00 r=1 e=0 z=0  None .text      getFirstFile__12JKRFileCacheCFPCc                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRFileCache::getFirstFile(char const* param_0) const {
	nofralloc
#include "asm/JSystem/JKernel/JKRFileCache/getFirstFile__12JKRFileCacheCFPCc.s"
}
#pragma pop


/* 802D53B8-802D53E4 002C+00 r=3 e=0 z=0  None .text      findCacheBlock__12JKRFileCacheCFPCv                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRFileCache::findCacheBlock(void const* param_0) const {
	nofralloc
#include "asm/JSystem/JKernel/JKRFileCache/findCacheBlock__12JKRFileCacheCFPCv.s"
}
#pragma pop


/* 802D53E4-802D5410 002C+00 r=2 e=0 z=0  None .text      findCacheBlock__12JKRFileCacheCFUl                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRFileCache::findCacheBlock(u32 param_0) const {
	nofralloc
#include "asm/JSystem/JKernel/JKRFileCache/findCacheBlock__12JKRFileCacheCFUl.s"
}
#pragma pop


/* 802D5410-802D551C 010C+00 r=2 e=0 z=0  None .text      findFile__12JKRFileCacheCFPcPCc                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRFileCache::findFile(char* param_0, char const* param_1) const {
	nofralloc
#include "asm/JSystem/JKernel/JKRFileCache/findFile__12JKRFileCacheCFPcPCc.s"
}
#pragma pop


/* 802D551C-802D5624 0108+00 r=5 e=0 z=0  None .text      getDvdPathName__12JKRFileCacheCFPCc                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRFileCache::getDvdPathName(char const* param_0) const {
	nofralloc
#include "asm/JSystem/JKernel/JKRFileCache/getDvdPathName__12JKRFileCacheCFPCc.s"
}
#pragma pop


/* 802D5624-802D566C 0048+00 r=2 e=0 z=0  None .text      convStrLower__12JKRFileCacheCFPc                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRFileCache::convStrLower(char* param_0) const {
	nofralloc
#include "asm/JSystem/JKernel/JKRFileCache/convStrLower__12JKRFileCacheCFPc.s"
}
#pragma pop


/* 802D566C-802D56C8 005C+00 r=1 e=0 z=0  None .text      __ct__Q212JKRFileCache11CCacheBlockFUlUlPCv                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm JKRFileCache::CCacheBlock::CCacheBlock(u32 param_0, u32 param_1, void const* param_2) {
	nofralloc
#include "asm/JSystem/JKernel/JKRFileCache/__ct__Q212JKRFileCache11CCacheBlockFUlUlPCv.s"
}
#pragma pop


/* 802D56C8-802D56F4 002C+00 r=1 e=0 z=0  None .text      getFsResource__12JKRFileCacheFPCc                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRFileCache::getFsResource(char const* param_0) {
	nofralloc
#include "asm/JSystem/JKernel/JKRFileCache/getFsResource__12JKRFileCacheFPCc.s"
}
#pragma pop


/* 802D56F4-802D5720 002C+00 r=1 e=0 z=0  None .text      getNameResource__12JKRFileCacheFUlPCc                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRFileCache::getNameResource(u32 param_0, char const* param_1) {
	nofralloc
#include "asm/JSystem/JKernel/JKRFileCache/getNameResource__12JKRFileCacheFUlPCc.s"
}
#pragma pop


/* 802D5720-802D574C 002C+00 r=1 e=0 z=0  None .text      readFsResource__12JKRFileCacheFPvUlPCc                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRFileCache::readFsResource(void* param_0, u32 param_1, char const* param_2) {
	nofralloc
#include "asm/JSystem/JKernel/JKRFileCache/readFsResource__12JKRFileCacheFPvUlPCc.s"
}
#pragma pop


/* 802D574C-802D5778 002C+00 r=1 e=0 z=0  None .text      readNameResource__12JKRFileCacheFPvUlUlPCc                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRFileCache::readNameResource(void* param_0, u32 param_1, u32 param_2, char const* param_3) {
	nofralloc
#include "asm/JSystem/JKernel/JKRFileCache/readNameResource__12JKRFileCacheFPvUlUlPCc.s"
}
#pragma pop


