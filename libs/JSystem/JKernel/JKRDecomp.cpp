// 
// Generated By: dol2asm
// Translation Unit: JKRDecomp
// 

#include "dol2asm.h"
#include "dolphin/types.h"
#include "JSystem/JKernel/JKRDecomp.h"

// 
// Types:
// 

struct JKRDecompCommand {
	/* 802DBD70 */ JKRDecompCommand();
	/* 802DBDC0 */ ~JKRDecompCommand();
};

struct JKRDecomp {
	/* 802DB680 */ void create(s32);
	/* 802DB6E0 */ JKRDecomp(s32);
	/* 802DB730 */ ~JKRDecomp();
	/* 802DB790 */ void run();
	/* 802DB858 */ void prepareCommand(u8*, u8*, u32, u32, void (*)(u32));
	/* 802DB8D0 */ void sendCommand(JKRDecompCommand*);
	/* 802DB900 */ void orderAsync(u8*, u8*, u32, u32, void (*)(u32));
	/* 802DB934 */ void sync(JKRDecompCommand*, int);
	/* 802DB988 */ void orderSync(u8*, u8*, u32, u32);
	/* 802DB9DC */ void decode(u8*, u8*, u32, u32);
	/* 802DBA58 */ void decodeSZP(u8*, u8*, u32, u32);
	/* 802DBC14 */ void decodeSZS(u8*, u8*, u32, u32);
	/* 802DBCF8 */ void checkCompressed(u8*);
};

struct JKRHeap {
};

struct JKRThread {
	/* 802D1568 */ JKRThread(u32, int, int);
	/* 802D1758 */ ~JKRThread();
};

struct JKRAMCommand {
};

struct JKRAramPiece {
	/* 802D35F4 */ void sendCommand(JKRAMCommand*);
};

// 
// Forward References:
// 


extern "C" void create__9JKRDecompFl(); // 1
extern "C" void __ct__9JKRDecompFl(); // 1
extern "C" void __dt__9JKRDecompFv(); // 1
extern "C" void run__9JKRDecompFv(); // 1
extern "C" void prepareCommand__9JKRDecompFPUcPUcUlUlPFUl_v(); // 1
extern "C" void sendCommand__9JKRDecompFP16JKRDecompCommand(); // 1
extern "C" void orderAsync__9JKRDecompFPUcPUcUlUlPFUl_v(); // 1
extern "C" void sync__9JKRDecompFP16JKRDecompCommandi(); // 1
extern "C" void orderSync__9JKRDecompFPUcPUcUlUl(); // 1
extern "C" void decode__9JKRDecompFPUcPUcUlUl(); // 1
extern "C" void decodeSZP__9JKRDecompFPUcPUcUlUl(); // 1
extern "C" void decodeSZS__9JKRDecompFPUcPUcUlUl(); // 1
extern "C" void checkCompressed__9JKRDecompFPUc(); // 1
extern "C" void __ct__16JKRDecompCommandFv(); // 1
extern "C" void __dt__16JKRDecompCommandFv(); // 1

// 
// External References:
// 

void* operator new(u32, JKRHeap*, int); // 2
void operator delete(void*); // 2

extern "C" void* __nw__FUlP7JKRHeapi(); // 1
extern "C" void __dl__FPv(); // 1
extern "C" void __ct__9JKRThreadFUlii(); // 1
extern "C" void __dt__9JKRThreadFv(); // 1
extern "C" void sendCommand__12JKRAramPieceFP12JKRAMCommand(); // 1
extern "C" void OSInitMessageQueue(); // 1
extern "C" void OSSendMessage(); // 1
extern "C" void OSReceiveMessage(); // 1
extern "C" void OSResumeThread(); // 1
extern "C" void _savegpr_27(); // 1
extern "C" void _savegpr_28(); // 1
extern "C" void _restgpr_27(); // 1
extern "C" void _restgpr_28(); // 1
extern "C" extern u8 sSystemHeap__7JKRHeap[4];

// 
// Declarations:
// 

/* ############################################################################################## */
/* 804514B0-804514B8 0004+04 rc=1 efc=0 rfr=False None .sbss      sDecompObject__9JKRDecomp                                    */
static u8 sDecompObject__9JKRDecomp[4 + 4 /* padding */];

/* 802DB680-802DB6E0 0060+00 rc=1 efc=1 rfr=False None .text      create__9JKRDecompFl                                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRDecomp::create(s32 field_0) {
	nofralloc
#include "asm/JSystem/JKernel/JKRDecomp/create__9JKRDecompFl.s"
}
#pragma pop


/* ############################################################################################## */
/* 803CC460-803CC480 0020+00 rc=1 efc=0 rfr=False None .data      sMessageBuffer__9JKRDecomp                                   */
SECTION_DATA static u8 sMessageBuffer__9JKRDecomp[32] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 803CC480-803CC4A0 0020+00 rc=2 efc=0 rfr=False None .data      sMessageQueue__9JKRDecomp                                    */
SECTION_DATA static u8 sMessageQueue__9JKRDecomp[32] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 803CC4A0-803CC4B0 0010+00 rc=2 efc=0 rfr=False None .data      __vt__9JKRDecomp                                             */
SECTION_DATA static void* __vt__9JKRDecomp[4] = {
	/* 0    */ (void*)NULL /* RTTI */,
	/* 1    */ (void*)NULL,
	/* 2    */ (void*)__dt__9JKRDecompFv,
	/* 3    */ (void*)run__9JKRDecompFv,
};

/* 802DB6E0-802DB730 0050+00 rc=1 efc=0 rfr=False None .text      __ct__9JKRDecompFl                                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm JKRDecomp::JKRDecomp(s32 field_0) {
	nofralloc
#include "asm/JSystem/JKernel/JKRDecomp/__ct__9JKRDecompFl.s"
}
#pragma pop


/* 802DB730-802DB790 0060+00 rc=1 efc=0 rfr=False None .text      __dt__9JKRDecompFv                                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm JKRDecomp::~JKRDecomp() {
	nofralloc
#include "asm/JSystem/JKernel/JKRDecomp/__dt__9JKRDecompFv.s"
}
#pragma pop


/* 802DB790-802DB858 00C8+00 rc=1 efc=0 rfr=False None .text      run__9JKRDecompFv                                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRDecomp::run() {
	nofralloc
#include "asm/JSystem/JKernel/JKRDecomp/run__9JKRDecompFv.s"
}
#pragma pop


/* 802DB858-802DB8D0 0078+00 rc=1 efc=0 rfr=False None .text      prepareCommand__9JKRDecompFPUcPUcUlUlPFUl_v                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRDecomp::prepareCommand(u8* field_0, u8* field_1, u32 field_2, u32 field_3, void (*)(u32)) {
	nofralloc
#include "asm/JSystem/JKernel/JKRDecomp/prepareCommand__9JKRDecompFPUcPUcUlUlPFUl_v.s"
}
#pragma pop


/* 802DB8D0-802DB900 0030+00 rc=2 efc=1 rfr=False None .text      sendCommand__9JKRDecompFP16JKRDecompCommand                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRDecomp::sendCommand(JKRDecompCommand* field_0) {
	nofralloc
#include "asm/JSystem/JKernel/JKRDecomp/sendCommand__9JKRDecompFP16JKRDecompCommand.s"
}
#pragma pop


/* 802DB900-802DB934 0034+00 rc=1 efc=0 rfr=False None .text      orderAsync__9JKRDecompFPUcPUcUlUlPFUl_v                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRDecomp::orderAsync(u8* field_0, u8* field_1, u32 field_2, u32 field_3, void (*)(u32)) {
	nofralloc
#include "asm/JSystem/JKernel/JKRDecomp/orderAsync__9JKRDecompFPUcPUcUlUlPFUl_v.s"
}
#pragma pop


/* 802DB934-802DB988 0054+00 rc=1 efc=0 rfr=False None .text      sync__9JKRDecompFP16JKRDecompCommandi                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRDecomp::sync(JKRDecompCommand* field_0, int field_1) {
	nofralloc
#include "asm/JSystem/JKernel/JKRDecomp/sync__9JKRDecompFP16JKRDecompCommandi.s"
}
#pragma pop


/* 802DB988-802DB9DC 0054+00 rc=5 efc=5 rfr=False None .text      orderSync__9JKRDecompFPUcPUcUlUl                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRDecomp::orderSync(u8* field_0, u8* field_1, u32 field_2, u32 field_3) {
	nofralloc
#include "asm/JSystem/JKernel/JKRDecomp/orderSync__9JKRDecompFPUcPUcUlUl.s"
}
#pragma pop


/* 802DB9DC-802DBA58 007C+00 rc=1 efc=0 rfr=False None .text      decode__9JKRDecompFPUcPUcUlUl                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRDecomp::decode(u8* field_0, u8* field_1, u32 field_2, u32 field_3) {
	nofralloc
#include "asm/JSystem/JKernel/JKRDecomp/decode__9JKRDecompFPUcPUcUlUl.s"
}
#pragma pop


/* 802DBA58-802DBC14 01BC+00 rc=1 efc=0 rfr=False None .text      decodeSZP__9JKRDecompFPUcPUcUlUl                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRDecomp::decodeSZP(u8* field_0, u8* field_1, u32 field_2, u32 field_3) {
	nofralloc
#include "asm/JSystem/JKernel/JKRDecomp/decodeSZP__9JKRDecompFPUcPUcUlUl.s"
}
#pragma pop


/* 802DBC14-802DBCF8 00E4+00 rc=1 efc=0 rfr=False None .text      decodeSZS__9JKRDecompFPUcPUcUlUl                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRDecomp::decodeSZS(u8* field_0, u8* field_1, u32 field_2, u32 field_3) {
	nofralloc
#include "asm/JSystem/JKernel/JKRDecomp/decodeSZS__9JKRDecompFPUcPUcUlUl.s"
}
#pragma pop


/* 802DBCF8-802DBD70 0078+00 rc=5 efc=4 rfr=False None .text      checkCompressed__9JKRDecompFPUc                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRDecomp::checkCompressed(u8* field_0) {
	nofralloc
#include "asm/JSystem/JKernel/JKRDecomp/checkCompressed__9JKRDecompFPUc.s"
}
#pragma pop


/* 802DBD70-802DBDC0 0050+00 rc=1 efc=0 rfr=False None .text      __ct__16JKRDecompCommandFv                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm JKRDecompCommand::JKRDecompCommand() {
	nofralloc
#include "asm/JSystem/JKernel/JKRDecomp/__ct__16JKRDecompCommandFv.s"
}
#pragma pop


/* 802DBDC0-802DBDFC 003C+00 rc=1 efc=0 rfr=False None .text      __dt__16JKRDecompCommandFv                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm JKRDecompCommand::~JKRDecompCommand() {
	nofralloc
#include "asm/JSystem/JKernel/JKRDecomp/__dt__16JKRDecompCommandFv.s"
}
#pragma pop


