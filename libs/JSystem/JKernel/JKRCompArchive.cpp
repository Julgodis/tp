// 
// Generated By: dol2asm
// Translation Unit: JKRCompArchive
// 

#include "dolphin/types.h"

// 
// Forward References:
// 

extern "C" extern void __ct__14JKRCompArchiveFlQ210JKRArchive15EMountDirection();
extern "C" extern void __dt__14JKRCompArchiveFv();
extern "C" extern void open__14JKRCompArchiveFl();
extern "C" extern void fetchResource__14JKRCompArchiveFPQ210JKRArchive12SDIFileEntryPUl();
extern "C" extern void fetchResource__14JKRCompArchiveFPvUlPQ210JKRArchive12SDIFileEntryPUl();
extern "C" extern void removeResourceAll__14JKRCompArchiveFv();
extern "C" extern void removeResource__14JKRCompArchiveFPv();
extern "C" extern void getExpandedResSize__14JKRCompArchiveCFPCv();
SECTION_RODATA extern const u8 JKRCompArchive__stringBase0[64];
SECTION_DATA extern void*const __vt__14JKRCompArchive[20];

// 
// External References:
// 

SECTION_INIT extern void memset();
extern "C" extern void alloc__7JKRHeapFUliP7JKRHeap();
extern "C" extern void alloc__7JKRHeapFUli();
extern "C" extern void free__7JKRHeapFPvP7JKRHeap();
extern "C" extern void free__7JKRHeapFPv();
extern "C" extern void copyMemory__7JKRHeapFPvPvUl();
extern "C" extern void __nw__FUlP7JKRHeapi();
extern "C" extern void __dl__FPv();
extern "C" extern void mainRamToAram__7JKRAramFPUcUlUl15JKRExpandSwitchUlP7JKRHeapiPUl();
extern "C" extern void aramToMainRam__7JKRAramFUlPUcUl15JKRExpandSwitchUlP7JKRHeapiPUl();
extern "C" extern void alloc__11JKRAramHeapFUlQ211JKRAramHeap10EAllocMode();
extern "C" extern void unmount__13JKRFileLoaderFv();
extern "C" extern void becomeCurrent__10JKRArchiveFPCc();
extern "C" extern void getResource__10JKRArchiveFPCc();
extern "C" extern void getResource__10JKRArchiveFUlPCc();
extern "C" extern void readResource__10JKRArchiveFPvUlUlPCc();
extern "C" extern void readResource__10JKRArchiveFPvUlPCc();
extern "C" extern void detachResource__10JKRArchiveFPv();
extern "C" extern void getResSize__10JKRArchiveCFPCv();
extern "C" extern void countFile__10JKRArchiveCFPCc();
extern "C" extern void getFirstFile__10JKRArchiveCFPCc();
extern "C" extern void __ct__10JKRArchiveFlQ210JKRArchive10EMountMode();
extern "C" extern void __dt__10JKRArchiveFv();
extern "C" extern void findPtrResource__10JKRArchiveCFPCv();
extern "C" extern void setExpandSize__10JKRArchiveFPQ210JKRArchive12SDIFileEntryUl();
extern "C" extern void getExpandSize__10JKRArchiveCFPQ210JKRArchive12SDIFileEntry();
extern "C" extern void fetchResource_subroutine__13JKRMemArchiveFPUcUlPUcUli();
extern "C" extern void fetchResource_subroutine__14JKRAramArchiveFUlUlPUcUli();
extern "C" extern void fetchResource_subroutine__14JKRAramArchiveFUlUlP7JKRHeapiPPUc();
extern "C" extern void fetchResource_subroutine__13JKRDvdArchiveFlUlUlPUcUlii();
extern "C" extern void fetchResource_subroutine__13JKRDvdArchiveFlUlUlP7JKRHeapiiPPUc();
extern "C" extern void __ct__10JKRDvdFileFl();
extern "C" extern void loadToMainRAM__12JKRDvdRipperFlPUc15JKRExpandSwitchUlP7JKRHeapQ212JKRDvdRipper15EAllocDirectionUlPiPUl();
extern "C" extern void loadToAram__16JKRDvdAramRipperFlUl15JKRExpandSwitchUlUlPUl();
extern "C" extern void orderSync__9JKRDecompFPUcPUcUlUl();
extern "C" extern void prepend__10JSUPtrListFP10JSUPtrLink();
extern "C" extern void remove__10JSUPtrListFP10JSUPtrLink();
extern "C" extern void panic_f__12JUTExceptionFPCciPCce();
extern "C" extern void DCInvalidateRange();
extern "C" extern void _savegpr_25();
extern "C" extern void _savegpr_26();
extern "C" extern void _savegpr_28();
extern "C" extern void _savegpr_29();
extern "C" extern void _restgpr_25();
extern "C" extern void _restgpr_26();
extern "C" extern void _restgpr_28();
extern "C" extern void _restgpr_29();
extern "C" extern void abs();
SECTION_BSS extern u8 sVolumeList__13JKRFileLoader[12];
SECTION_SBSS extern u8 sSystemHeap__7JKRHeap[4];
SECTION_SBSS extern u8 sAramObject__7JKRAram[4];

// 
// Declarations:
// 

/* ############################################################################################## */
/* 803CC3E8-803CC438 0050+00 .data      __vt__14JKRCompArchive                                       */
void* const __vt__14JKRCompArchive[20] = {
	NULL, /* RTTI */
	NULL,
	(void*)__dt__14JKRCompArchiveFv,
	(void*)unmount__13JKRFileLoaderFv,
	(void*)becomeCurrent__10JKRArchiveFPCc,
	(void*)getResource__10JKRArchiveFPCc,
	(void*)getResource__10JKRArchiveFUlPCc,
	(void*)readResource__10JKRArchiveFPvUlPCc,
	(void*)readResource__10JKRArchiveFPvUlUlPCc,
	(void*)removeResourceAll__14JKRCompArchiveFv,
	(void*)removeResource__14JKRCompArchiveFPv,
	(void*)detachResource__10JKRArchiveFPv,
	(void*)getResSize__10JKRArchiveCFPCv,
	(void*)countFile__10JKRArchiveCFPCc,
	(void*)getFirstFile__10JKRArchiveCFPCc,
	(void*)getExpandedResSize__14JKRCompArchiveCFPCv,
	(void*)fetchResource__14JKRCompArchiveFPQ210JKRArchive12SDIFileEntryPUl,
	(void*)fetchResource__14JKRCompArchiveFPvUlPQ210JKRArchive12SDIFileEntryPUl,
	(void*)setExpandSize__10JKRArchiveFPQ210JKRArchive12SDIFileEntryUl,
	(void*)getExpandSize__10JKRArchiveCFPQ210JKRArchive12SDIFileEntry,
};

/* 802D87D4-802D887C 00A8+00 .text      __ct__14JKRCompArchiveFlQ210JKRArchive15EMountDirection      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
ASM_FUNCTION(__ct__14JKRCompArchiveFlQ210JKRArchive15EMountDirection) {
	nofralloc
#include "asm/JSystem/JKernel/JKRCompArchive/__ct__14JKRCompArchiveFlQ210JKRArchive15EMountDirection.s"
}
#pragma pop


/* 802D887C-802D89BC 0140+00 .text      __dt__14JKRCompArchiveFv                                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
ASM_FUNCTION(__dt__14JKRCompArchiveFv) {
	nofralloc
#include "asm/JSystem/JKernel/JKRCompArchive/__dt__14JKRCompArchiveFv.s"
}
#pragma pop


/* 802D89BC-802D8F40 0584+00 .text      open__14JKRCompArchiveFl                                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
ASM_FUNCTION(open__14JKRCompArchiveFl) {
	nofralloc
#include "asm/JSystem/JKernel/JKRCompArchive/open__14JKRCompArchiveFl.s"
}
#pragma pop


/* 802D8F40-802D90C0 0180+00 .text      fetchResource__14JKRCompArchiveFPQ210JKRArchive12SDIFileEntryPUl */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
ASM_FUNCTION(fetchResource__14JKRCompArchiveFPQ210JKRArchive12SDIFileEntryPUl) {
	nofralloc
#include "asm/JSystem/JKernel/JKRCompArchive/fetchResource__14JKRCompArchiveFPQ210JKRArchive12SDIFileEntryPUl.s"
}
#pragma pop


/* ############################################################################################## */
/* 8039D220-8039D260 0039+07 .rodata    @stringBase0                                                 */
#pragma push
#pragma force_active on
#pragma section ".dead"
SECTION_DEAD char* const stringBase_8039D220 = "JKRCompArchive.cpp";
SECTION_DEAD char* const stringBase_8039D233 = "%s";
SECTION_DEAD char* const stringBase_8039D236 = "illegal archive.";
SECTION_DEAD char* const stringBase_8039D247 = "illegal resource.";
/* @stringBase0 padding */
SECTION_DEAD char* const pad_8039D259 = "\0\0\0\0\0\0";
#pragma pop

/* 802D90C0-802D9260 01A0+00 .text      fetchResource__14JKRCompArchiveFPvUlPQ210JKRArchive12SDIFileEntryPUl */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
ASM_FUNCTION(fetchResource__14JKRCompArchiveFPvUlPQ210JKRArchive12SDIFileEntryPUl) {
	nofralloc
#include "asm/JSystem/JKernel/JKRCompArchive/fetchResource__14JKRCompArchiveFPvUlPQ210JKRArchive12SDIFileEntryPUl.s"
}
#pragma pop


/* 802D9260-802D92F4 0094+00 .text      removeResourceAll__14JKRCompArchiveFv                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
ASM_FUNCTION(removeResourceAll__14JKRCompArchiveFv) {
	nofralloc
#include "asm/JSystem/JKernel/JKRCompArchive/removeResourceAll__14JKRCompArchiveFv.s"
}
#pragma pop


/* 802D92F4-802D9360 006C+00 .text      removeResource__14JKRCompArchiveFPv                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
ASM_FUNCTION(removeResource__14JKRCompArchiveFPv) {
	nofralloc
#include "asm/JSystem/JKernel/JKRCompArchive/removeResource__14JKRCompArchiveFPv.s"
}
#pragma pop


/* 802D9360-802D9518 01B8+00 .text      getExpandedResSize__14JKRCompArchiveCFPCv                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
ASM_FUNCTION(getExpandedResSize__14JKRCompArchiveCFPCv) {
	nofralloc
#include "asm/JSystem/JKernel/JKRCompArchive/getExpandedResSize__14JKRCompArchiveCFPCv.s"
}
#pragma pop


/* ############################################################################################## */
