// 
// Generated By: dol2asm
// Translation Unit: JKRDvdAramRipper
// 

#include "dolphin/types.h"

// 
// Types:
// 

struct JKRADCommand {
	/* 802DAF1C */ JKRADCommand();
	/* 802DAF5C */ ~JKRADCommand();
};

struct JKRExpandSwitch {
};

struct JKRDvdFile {
	/* 802D9584 */ JKRDvdFile();
	/* 802D9748 */ ~JKRDvdFile();
	/* 802D98C4 */ void open(s32);
};

struct JKRDvdAramRipper {
	/* 802DA918 */ void loadToAram(JKRDvdFile*, u32, JKRExpandSwitch, u32, u32, u32*);
	/* 802DA874 */ void loadToAram(s32, u32, JKRExpandSwitch, u32, u32, u32*);
	/* 802DAA74 */ void callCommand_Async(JKRADCommand*);
	/* 802DAE48 */ void syncAram(JKRADCommand*, int);
};

struct JKRFile {
};

struct JSUFileInputStream {
	/* 802DADD8 */ ~JSUFileInputStream();
	/* 802DC638 */ JSUFileInputStream(JKRFile*);
};

template <typename A0>
struct JSUList { };
/* JSUList<JKRADCommand> */
struct JSUList__template10 {
	/* 802DB62C */ ~JSUList__template10();
};

struct JKRHeap {
	/* 802CE4D4 */ void alloc(u32, int);
	/* 802CE500 */ void free(void*, JKRHeap*);
};

struct JKRAramHeap {
	struct EAllocMode {
	};

	/* 802D2FBC */ void alloc(u32, JKRAramHeap::EAllocMode);
};

struct JKRAramBlock {
};

struct JKRAramPiece {
	/* 802D3838 */ void orderSync(int, u32, u32, u32, JKRAramBlock*);
};

struct JKRAramStreamCommand {
};

struct JKRAramStream {
	/* 802D3ED0 */ void write_StreamToAram_Async(JSUFileInputStream*, u32, u32, u32, u32*);
	/* 802D3FA0 */ void sync(JKRAramStreamCommand*, int);
};

struct JKRDecomp {
	/* 802DBCF8 */ void checkCompressed(u8*);
};

struct JSUPtrLink {
	/* 802DBDFC */ JSUPtrLink(void*);
	/* 802DBE14 */ ~JSUPtrLink();
};

struct JSUPtrList {
	/* 802DBEAC */ ~JSUPtrList();
	/* 802DBF14 */ void initiate();
	/* 802DBF4C */ void append(JSUPtrLink*);
	/* 802DC15C */ void remove(JSUPtrLink*);
};

struct JSUInputStream {
	/* 802DC23C */ ~JSUInputStream();
};

// 
// Forward References:
// 

extern "C" void loadToAram_Async__16JKRDvdAramRipperFP10JKRDvdFileUl15JKRExpandSwitchPFUl_vUlUlPUl(); // 1
void JKRDecompressFromDVDToAram(JKRDvdFile*, u32, u32, u32, u32, u32, u32*); // 2
void decompSZS_subroutine(u8*, u32); // 2
void firstSrcData(); // 2
void nextSrcData(u8*); // 2
void dmaBufferFlush(u32); // 2
extern "C" void __sinit_JKRDvdAramRipper_cpp(); // 1

extern "C" void loadToAram__16JKRDvdAramRipperFlUl15JKRExpandSwitchUlUlPUl(); // 1
extern "C" void loadToAram__16JKRDvdAramRipperFP10JKRDvdFileUl15JKRExpandSwitchUlUlPUl(); // 1
extern "C" void loadToAram_Async__16JKRDvdAramRipperFP10JKRDvdFileUl15JKRExpandSwitchPFUl_vUlUlPUl(); // 1
extern "C" void callCommand_Async__16JKRDvdAramRipperFP12JKRADCommand(); // 1
extern "C" void __dt__18JSUFileInputStreamFv(); // 1
extern "C" void syncAram__16JKRDvdAramRipperFP12JKRADCommandi(); // 1
extern "C" void __ct__12JKRADCommandFv(); // 1
extern "C" void __dt__12JKRADCommandFv(); // 1
extern "C" void JKRDecompressFromDVDToAram__FP10JKRDvdFileUlUlUlUlUlPUl(); // 1
extern "C" void decompSZS_subroutine__FPUcUl(); // 1
extern "C" void JKRDvdAramRipper__firstSrcData__Fv(); // 1
extern "C" void JKRDvdAramRipper__nextSrcData__FPUc(); // 1
extern "C" void dmaBufferFlush__FUl(); // 1
extern "C" void __sinit_JKRDvdAramRipper_cpp(); // 1
extern "C" void func_802DB62C(); // 1
SECTION_BSS extern u8 JKRDvdAramRipper__lit_301[12];
SECTION_BSS extern u8 sDvdAramAsyncList__16JKRDvdAramRipper[12];
SECTION_BSS extern u8 JKRDvdAramRipper__decompMutex[24];
SECTION_SDATA extern u32 data_804508D0;
SECTION_SDATA extern u32 sSZSBufferSize__16JKRDvdAramRipper;
SECTION_SBSS extern u8 JKRDvdAramRipper__szpBuf[4];
SECTION_SBSS extern u8 JKRDvdAramRipper__szpEnd[4];
SECTION_SBSS extern u8 JKRDvdAramRipper__refBuf[4];
SECTION_SBSS extern u8 JKRDvdAramRipper__refEnd[4];
SECTION_SBSS extern u8 JKRDvdAramRipper__refCurrent[4];
SECTION_SBSS extern u8 dmaBuf[4];
SECTION_SBSS extern u8 dmaEnd[4];
SECTION_SBSS extern u8 dmaCurrent[4];
SECTION_SBSS extern u8 JKRDvdAramRipper__srcOffset[4];
SECTION_SBSS extern u8 JKRDvdAramRipper__transLeft[4];
SECTION_SBSS extern u8 JKRDvdAramRipper__srcLimit[4];
SECTION_SBSS extern u8 JKRDvdAramRipper__srcFile[4];
SECTION_SBSS extern u8 JKRDvdAramRipper__fileOffset[4];
SECTION_SBSS extern u8 JKRDvdAramRipper__readCount[4];
SECTION_SBSS extern u8 JKRDvdAramRipper__maxDest[4];
SECTION_SBSS extern u8 data_804514A4[4];
SECTION_SBSS extern u8 JKRDvdAramRipper__tsPtr[4];
SECTION_SBSS extern u8 JKRDvdAramRipper__tsArea[4];

// 
// External References:
// 

SECTION_INIT void memcpy(); // 1
void* operator new(u32, JKRHeap*, int); // 2
void operator delete(void*); // 2
extern "C" void DCInvalidateRange(); // 1
extern "C" void OSDisableInterrupts(); // 1
extern "C" void OSRestoreInterrupts(); // 1
extern "C" void OSInitMutex(); // 1
extern "C" void OSLockMutex(); // 1
extern "C" void OSUnlockMutex(); // 1
extern "C" void OSGetCurrentThread(); // 1
extern "C" void DVDReadPrio(); // 1
extern "C" void VIWaitForRetrace(); // 1
extern "C" void __register_global_object(); // 1
extern "C" void _savegpr_23(); // 1
extern "C" void _savegpr_24(); // 1
extern "C" void _savegpr_25(); // 1
extern "C" void _savegpr_26(); // 1
extern "C" void _savegpr_29(); // 1
extern "C" void _restgpr_23(); // 1
extern "C" void _restgpr_24(); // 1
extern "C" void _restgpr_25(); // 1
extern "C" void _restgpr_26(); // 1
extern "C" void _restgpr_29(); // 1

SECTION_INIT void memcpy(); // 1
extern "C" void alloc__7JKRHeapFUli(); // 1
extern "C" void free__7JKRHeapFPvP7JKRHeap(); // 1
extern "C" void* __nw__FUlP7JKRHeapi(); // 1
extern "C" void __dl__FPv(); // 1
extern "C" void alloc__11JKRAramHeapFUlQ211JKRAramHeap10EAllocMode(); // 1
extern "C" void orderSync__12JKRAramPieceFiUlUlUlP12JKRAramBlock(); // 1
extern "C" void write_StreamToAram_Async__13JKRAramStreamFP18JSUFileInputStreamUlUlUlPUl(); // 1
extern "C" void sync__13JKRAramStreamFP20JKRAramStreamCommandi(); // 1
extern "C" void __ct__10JKRDvdFileFv(); // 1
extern "C" void __dt__10JKRDvdFileFv(); // 1
extern "C" void open__10JKRDvdFileFl(); // 1
extern "C" void checkCompressed__9JKRDecompFPUc(); // 1
extern "C" void __ct__10JSUPtrLinkFPv(); // 1
extern "C" void __dt__10JSUPtrLinkFv(); // 1
extern "C" void __dt__10JSUPtrListFv(); // 1
extern "C" void initiate__10JSUPtrListFv(); // 1
extern "C" void append__10JSUPtrListFP10JSUPtrLink(); // 1
extern "C" void remove__10JSUPtrListFP10JSUPtrLink(); // 1
extern "C" void __dt__14JSUInputStreamFv(); // 1
extern "C" void __ct__18JSUFileInputStreamFP7JKRFile(); // 1
extern "C" void DCInvalidateRange(); // 1
extern "C" void OSDisableInterrupts(); // 1
extern "C" void OSRestoreInterrupts(); // 1
extern "C" void OSInitMutex(); // 1
extern "C" void OSLockMutex(); // 1
extern "C" void OSUnlockMutex(); // 1
extern "C" void OSGetCurrentThread(); // 1
extern "C" void DVDReadPrio(); // 1
extern "C" void VIWaitForRetrace(); // 1
extern "C" void __register_global_object(); // 1
extern "C" void _savegpr_23(); // 1
extern "C" void _savegpr_24(); // 1
extern "C" void _savegpr_25(); // 1
extern "C" void _savegpr_26(); // 1
extern "C" void _savegpr_29(); // 1
extern "C" void _restgpr_23(); // 1
extern "C" void _restgpr_24(); // 1
extern "C" void _restgpr_25(); // 1
extern "C" void _restgpr_26(); // 1
extern "C" void _restgpr_29(); // 1
SECTION_DATA extern void* const __vt__20JSURandomInputStream[9];
SECTION_DATA extern void* const __vt__18JSUFileInputStream[9 + 1 /* padding */];
SECTION_SBSS extern u8 sSystemHeap__7JKRHeap[4];
SECTION_SBSS extern u8 sAramObject__7JKRAram[4];

// 
// Declarations:
// 

/* 802DA874-802DA918 00A4+00 rc=0 efc=0 .text      loadToAram__16JKRDvdAramRipperFlUl15JKRExpandSwitchUlUlPUl   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRDvdAramRipper::loadToAram(s32 field_0, u32 field_1, JKRExpandSwitch field_2, u32 field_3, u32 field_4, u32* field_5) {
	nofralloc
#include "asm/JSystem/JKernel/JKRDvdAramRipper/loadToAram__16JKRDvdAramRipperFlUl15JKRExpandSwitchUlUlPUl.s"
}
#pragma pop


/* 802DA918-802DA9C0 00A8+00 rc=0 efc=0 .text      loadToAram__16JKRDvdAramRipperFP10JKRDvdFileUl15JKRExpandSwitchUlUlPUl */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRDvdAramRipper::loadToAram(JKRDvdFile* field_0, u32 field_1, JKRExpandSwitch field_2, u32 field_3, u32 field_4, u32* field_5) {
	nofralloc
#include "asm/JSystem/JKernel/JKRDvdAramRipper/loadToAram__16JKRDvdAramRipperFP10JKRDvdFileUl15JKRExpandSwitchUlUlPUl.s"
}
#pragma pop


/* 802DA9C0-802DAA74 00B4+00 rc=0 efc=0 .text      loadToAram_Async__16JKRDvdAramRipperFP10JKRDvdFileUl15JKRExpandSwitchPFUl_vUlUlPUl */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void loadToAram_Async__16JKRDvdAramRipperFP10JKRDvdFileUl15JKRExpandSwitchPFUl_vUlUlPUl() {
	nofralloc
#include "asm/JSystem/JKernel/JKRDvdAramRipper/func_802DA9C0.s"
}
#pragma pop


/* ############################################################################################## */
/* 804343A8-804343B4 000C+00 rc=0 efc=0 .bss       @301                                                         */
u8 JKRDvdAramRipper__lit_301[12];

/* 804343B4-804343C0 000C+00 rc=0 efc=0 .bss       sDvdAramAsyncList__16JKRDvdAramRipper                        */
u8 sDvdAramAsyncList__16JKRDvdAramRipper[12];

/* 804508D0-804508D4 0004+00 rc=0 efc=0 .sdata     None                                                         */
u32 data_804508D0 = 0x01000000;

/* 802DAA74-802DADD8 0364+00 rc=0 efc=0 .text      callCommand_Async__16JKRDvdAramRipperFP12JKRADCommand        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRDvdAramRipper::callCommand_Async(JKRADCommand* field_0) {
	nofralloc
#include "asm/JSystem/JKernel/JKRDvdAramRipper/callCommand_Async__16JKRDvdAramRipperFP12JKRADCommand.s"
}
#pragma pop


/* 802DADD8-802DAE48 0070+00 rc=0 efc=0 .text      __dt__18JSUFileInputStreamFv                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm JSUFileInputStream::~JSUFileInputStream() {
	nofralloc
#include "asm/JSystem/JKernel/JKRDvdAramRipper/__dt__18JSUFileInputStreamFv.s"
}
#pragma pop


/* 802DAE48-802DAF1C 00D4+00 rc=0 efc=0 .text      syncAram__16JKRDvdAramRipperFP12JKRADCommandi                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRDvdAramRipper::syncAram(JKRADCommand* field_0, int field_1) {
	nofralloc
#include "asm/JSystem/JKernel/JKRDvdAramRipper/syncAram__16JKRDvdAramRipperFP12JKRADCommandi.s"
}
#pragma pop


/* 802DAF1C-802DAF5C 0040+00 rc=0 efc=0 .text      __ct__12JKRADCommandFv                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm JKRADCommand::JKRADCommand() {
	nofralloc
#include "asm/JSystem/JKernel/JKRDvdAramRipper/__ct__12JKRADCommandFv.s"
}
#pragma pop


/* 802DAF5C-802DAFE8 008C+00 rc=0 efc=0 .text      __dt__12JKRADCommandFv                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm JKRADCommand::~JKRADCommand() {
	nofralloc
#include "asm/JSystem/JKernel/JKRDvdAramRipper/__dt__12JKRADCommandFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 804343C0-804343D8 0018+00 rc=0 efc=0 .bss       decompMutex                                                  */
u8 JKRDvdAramRipper__decompMutex[24];

/* 804508D4-804508D8 0004+00 rc=0 efc=0 .sdata     sSZSBufferSize__16JKRDvdAramRipper                           */
u32 sSZSBufferSize__16JKRDvdAramRipper = 0x00000400;

/* 80451468-8045146C 0004+00 rc=0 efc=0 .sbss      szpBuf                                                       */
u8 JKRDvdAramRipper__szpBuf[4];

/* 8045146C-80451470 0004+00 rc=0 efc=0 .sbss      szpEnd                                                       */
u8 JKRDvdAramRipper__szpEnd[4];

/* 80451470-80451474 0004+00 rc=0 efc=0 .sbss      refBuf                                                       */
u8 JKRDvdAramRipper__refBuf[4];

/* 80451474-80451478 0004+00 rc=0 efc=0 .sbss      refEnd                                                       */
u8 JKRDvdAramRipper__refEnd[4];

/* 80451478-8045147C 0004+00 rc=0 efc=0 .sbss      refCurrent                                                   */
u8 JKRDvdAramRipper__refCurrent[4];

/* 8045147C-80451480 0004+00 rc=0 efc=0 .sbss      dmaBuf                                                       */
u8 dmaBuf[4];

/* 80451480-80451484 0004+00 rc=0 efc=0 .sbss      dmaEnd                                                       */
u8 dmaEnd[4];

/* 80451484-80451488 0004+00 rc=0 efc=0 .sbss      dmaCurrent                                                   */
u8 dmaCurrent[4];

/* 80451488-8045148C 0004+00 rc=0 efc=0 .sbss      srcOffset                                                    */
u8 JKRDvdAramRipper__srcOffset[4];

/* 8045148C-80451490 0004+00 rc=0 efc=0 .sbss      transLeft                                                    */
u8 JKRDvdAramRipper__transLeft[4];

/* 80451490-80451494 0004+00 rc=0 efc=0 .sbss      srcLimit                                                     */
u8 JKRDvdAramRipper__srcLimit[4];

/* 80451494-80451498 0004+00 rc=0 efc=0 .sbss      srcFile                                                      */
u8 JKRDvdAramRipper__srcFile[4];

/* 80451498-8045149C 0004+00 rc=0 efc=0 .sbss      fileOffset                                                   */
u8 JKRDvdAramRipper__fileOffset[4];

/* 8045149C-804514A0 0004+00 rc=0 efc=0 .sbss      readCount                                                    */
u8 JKRDvdAramRipper__readCount[4];

/* 804514A0-804514A4 0004+00 rc=0 efc=0 .sbss      maxDest                                                      */
u8 JKRDvdAramRipper__maxDest[4];

/* 804514A4-804514A8 0004+00 rc=0 efc=0 .sbss      None                                                         */
u8 data_804514A4[4];

/* 804514A8-804514AC 0004+00 rc=0 efc=0 .sbss      tsPtr                                                        */
u8 JKRDvdAramRipper__tsPtr[4];

/* 804514AC-804514B0 0004+00 rc=0 efc=0 .sbss      tsArea                                                       */
u8 JKRDvdAramRipper__tsArea[4];

/* 802DAFE8-802DB160 0178+00 rc=0 efc=0 .text      JKRDecompressFromDVDToAram__FP10JKRDvdFileUlUlUlUlUlPUl      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRDecompressFromDVDToAram(JKRDvdFile* field_0, u32 field_1, u32 field_2, u32 field_3, u32 field_4, u32 field_5, u32* field_6) {
	nofralloc
#include "asm/JSystem/JKernel/JKRDvdAramRipper/JKRDecompressFromDVDToAram__FP10JKRDvdFileUlUlUlUlUlPUl.s"
}
#pragma pop


/* 802DB160-802DB3E8 0288+00 rc=0 efc=0 .text      decompSZS_subroutine__FPUcUl                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void decompSZS_subroutine(u8* field_0, u32 field_1) {
	nofralloc
#include "asm/JSystem/JKernel/JKRDvdAramRipper/decompSZS_subroutine__FPUcUl.s"
}
#pragma pop


/* 802DB3E8-802DB49C 00B4+00 rc=0 efc=0 .text      firstSrcData__Fv                                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void firstSrcData() {
	nofralloc
#include "asm/JSystem/JKernel/JKRDvdAramRipper/JKRDvdAramRipper__firstSrcData__Fv.s"
}
#pragma pop


/* 802DB49C-802DB580 00E4+00 rc=0 efc=0 .text      nextSrcData__FPUc                                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void nextSrcData(u8* field_0) {
	nofralloc
#include "asm/JSystem/JKernel/JKRDvdAramRipper/JKRDvdAramRipper__nextSrcData__FPUc.s"
}
#pragma pop


/* 802DB580-802DB5E8 0068+00 rc=0 efc=0 .text      dmaBufferFlush__FUl                                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dmaBufferFlush(u32 field_0) {
	nofralloc
#include "asm/JSystem/JKernel/JKRDvdAramRipper/dmaBufferFlush__FUl.s"
}
#pragma pop


/* 802DB5E8-802DB62C 0044+00 rc=0 efc=0 .text      __sinit_JKRDvdAramRipper_cpp                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void __sinit_JKRDvdAramRipper_cpp() {
	nofralloc
#include "asm/JSystem/JKernel/JKRDvdAramRipper/__sinit_JKRDvdAramRipper_cpp.s"
}
#pragma pop


/* 802DB62C-802DB680 0054+00 rc=0 efc=0 .text      __dt__23JSUList<12JKRADCommand>Fv                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm JSUList__template10::~JSUList__template10() {
	nofralloc
#include "asm/JSystem/JKernel/JKRDvdAramRipper/func_802DB62C.s"
}
#pragma pop


