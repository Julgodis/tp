// 
// Generated By: dol2asm
// Translation Unit: JKRMemArchive
// 

#include "dolphin/types.h"

// 
// Forward References:
// 

extern "C" extern void __ct__13JKRMemArchiveFlQ210JKRArchive15EMountDirection();
extern "C" extern void __ct__13JKRMemArchiveFPvUl15JKRMemBreakFlag();
extern "C" extern void __dt__13JKRMemArchiveFv();
extern "C" extern void open__13JKRMemArchiveFlQ210JKRArchive15EMountDirection();
extern "C" extern void open__13JKRMemArchiveFPvUl15JKRMemBreakFlag();
extern "C" extern void fetchResource__13JKRMemArchiveFPQ210JKRArchive12SDIFileEntryPUl();
extern "C" extern void fetchResource__13JKRMemArchiveFPvUlPQ210JKRArchive12SDIFileEntryPUl();
extern "C" extern void removeResourceAll__13JKRMemArchiveFv();
extern "C" extern void removeResource__13JKRMemArchiveFPv();
extern "C" extern void fetchResource_subroutine__13JKRMemArchiveFPUcUlPUcUli();
extern "C" extern void getExpandedResSize__13JKRMemArchiveCFPCv();
SECTION_RODATA extern const u8 JKRMemArchive__stringBase0[40];
SECTION_DATA extern void*const __vt__13JKRMemArchive[20];

// 
// External References:
// 

SECTION_INIT extern void memcpy();
extern "C" extern void free__7JKRHeapFPvP7JKRHeap();
extern "C" extern void findFromRoot__7JKRHeapFPv();
extern "C" extern void __dl__FPv();
extern "C" extern void unmount__13JKRFileLoaderFv();
extern "C" extern void becomeCurrent__10JKRArchiveFPCc();
extern "C" extern void getResource__10JKRArchiveFPCc();
extern "C" extern void getResource__10JKRArchiveFUlPCc();
extern "C" extern void readResource__10JKRArchiveFPvUlUlPCc();
extern "C" extern void readResource__10JKRArchiveFPvUlPCc();
extern "C" extern void detachResource__10JKRArchiveFPv();
extern "C" extern void getResSize__10JKRArchiveCFPCv();
extern "C" extern void countFile__10JKRArchiveCFPCc();
extern "C" extern void getFirstFile__10JKRArchiveCFPCc();
extern "C" extern void __ct__10JKRArchiveFlQ210JKRArchive10EMountMode();
extern "C" extern void __dt__10JKRArchiveFv();
extern "C" extern void findPtrResource__10JKRArchiveCFPCv();
extern "C" extern void setExpandSize__10JKRArchiveFPQ210JKRArchive12SDIFileEntryUl();
extern "C" extern void getExpandSize__10JKRArchiveCFPQ210JKRArchive12SDIFileEntry();
extern "C" extern void loadToMainRAM__12JKRDvdRipperFlPUc15JKRExpandSwitchUlP7JKRHeapQ212JKRDvdRipper15EAllocDirectionUlPiPUl();
extern "C" extern void orderSync__9JKRDecompFPUcPUcUlUl();
extern "C" extern void prepend__10JSUPtrListFP10JSUPtrLink();
extern "C" extern void remove__10JSUPtrListFP10JSUPtrLink();
extern "C" extern void panic_f__12JUTExceptionFPCciPCce();
extern "C" extern void DCInvalidateRange();
extern "C" extern void _savegpr_28();
extern "C" extern void _savegpr_29();
extern "C" extern void _restgpr_28();
extern "C" extern void _restgpr_29();
SECTION_BSS extern u8 sVolumeList__13JKRFileLoader[12];

// 
// Declarations:
// 

/* ############################################################################################## */
/* 803CC2D8-803CC328 0050+00 .data      __vt__13JKRMemArchive                                        */
void* const __vt__13JKRMemArchive[20] = {
	NULL, /* RTTI */
	NULL,
	(void*)__dt__13JKRMemArchiveFv,
	(void*)unmount__13JKRFileLoaderFv,
	(void*)becomeCurrent__10JKRArchiveFPCc,
	(void*)getResource__10JKRArchiveFPCc,
	(void*)getResource__10JKRArchiveFUlPCc,
	(void*)readResource__10JKRArchiveFPvUlPCc,
	(void*)readResource__10JKRArchiveFPvUlUlPCc,
	(void*)removeResourceAll__13JKRMemArchiveFv,
	(void*)removeResource__13JKRMemArchiveFPv,
	(void*)detachResource__10JKRArchiveFPv,
	(void*)getResSize__10JKRArchiveCFPCv,
	(void*)countFile__10JKRArchiveCFPCc,
	(void*)getFirstFile__10JKRArchiveCFPCc,
	(void*)getExpandedResSize__13JKRMemArchiveCFPCv,
	(void*)fetchResource__13JKRMemArchiveFPQ210JKRArchive12SDIFileEntryPUl,
	(void*)fetchResource__13JKRMemArchiveFPvUlPQ210JKRArchive12SDIFileEntryPUl,
	(void*)setExpandSize__10JKRArchiveFPQ210JKRArchive12SDIFileEntryUl,
	(void*)getExpandSize__10JKRArchiveCFPQ210JKRArchive12SDIFileEntry,
};

/* 802D69B8-802D6A6C 00B4+00 .text      __ct__13JKRMemArchiveFlQ210JKRArchive15EMountDirection       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
ASM_FUNCTION(__ct__13JKRMemArchiveFlQ210JKRArchive15EMountDirection) {
	nofralloc
#include "asm/JSystem/JKernel/JKRMemArchive/__ct__13JKRMemArchiveFlQ210JKRArchive15EMountDirection.s"
}
#pragma pop


/* 802D6A6C-802D6B24 00B8+00 .text      __ct__13JKRMemArchiveFPvUl15JKRMemBreakFlag                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
ASM_FUNCTION(__ct__13JKRMemArchiveFPvUl15JKRMemBreakFlag) {
	nofralloc
#include "asm/JSystem/JKernel/JKRMemArchive/__ct__13JKRMemArchiveFPvUl15JKRMemBreakFlag.s"
}
#pragma pop


/* 802D6B24-802D6BCC 00A8+00 .text      __dt__13JKRMemArchiveFv                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
ASM_FUNCTION(__dt__13JKRMemArchiveFv) {
	nofralloc
#include "asm/JSystem/JKernel/JKRMemArchive/__dt__13JKRMemArchiveFv.s"
}
#pragma pop


/* 802D6BCC-802D6D30 0164+00 .text      open__13JKRMemArchiveFlQ210JKRArchive15EMountDirection       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
ASM_FUNCTION(open__13JKRMemArchiveFlQ210JKRArchive15EMountDirection) {
	nofralloc
#include "asm/JSystem/JKernel/JKRMemArchive/open__13JKRMemArchiveFlQ210JKRArchive15EMountDirection.s"
}
#pragma pop


/* 802D6D30-802D6DDC 00AC+00 .text      open__13JKRMemArchiveFPvUl15JKRMemBreakFlag                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
ASM_FUNCTION(open__13JKRMemArchiveFPvUl15JKRMemBreakFlag) {
	nofralloc
#include "asm/JSystem/JKernel/JKRMemArchive/open__13JKRMemArchiveFPvUl15JKRMemBreakFlag.s"
}
#pragma pop


/* 802D6DDC-802D6E10 0034+00 .text      fetchResource__13JKRMemArchiveFPQ210JKRArchive12SDIFileEntryPUl */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
ASM_FUNCTION(fetchResource__13JKRMemArchiveFPQ210JKRArchive12SDIFileEntryPUl) {
	nofralloc
#include "asm/JSystem/JKernel/JKRMemArchive/fetchResource__13JKRMemArchiveFPQ210JKRArchive12SDIFileEntryPUl.s"
}
#pragma pop


/* 802D6E10-802D6ED0 00C0+00 .text      fetchResource__13JKRMemArchiveFPvUlPQ210JKRArchive12SDIFileEntryPUl */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
ASM_FUNCTION(fetchResource__13JKRMemArchiveFPvUlPQ210JKRArchive12SDIFileEntryPUl) {
	nofralloc
#include "asm/JSystem/JKernel/JKRMemArchive/fetchResource__13JKRMemArchiveFPvUlPQ210JKRArchive12SDIFileEntryPUl.s"
}
#pragma pop


/* 802D6ED0-802D6F20 0050+00 .text      removeResourceAll__13JKRMemArchiveFv                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
ASM_FUNCTION(removeResourceAll__13JKRMemArchiveFv) {
	nofralloc
#include "asm/JSystem/JKernel/JKRMemArchive/removeResourceAll__13JKRMemArchiveFv.s"
}
#pragma pop


/* 802D6F20-802D6F5C 003C+00 .text      removeResource__13JKRMemArchiveFPv                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
ASM_FUNCTION(removeResource__13JKRMemArchiveFPv) {
	nofralloc
#include "asm/JSystem/JKernel/JKRMemArchive/removeResource__13JKRMemArchiveFPv.s"
}
#pragma pop


/* ############################################################################################## */
/* 8039D160-8039D188 0027+01 .rodata    @stringBase0                                                 */
SECTION_RODATA const u8 JKRMemArchive__stringBase0[40] = {
	0x4A, 0x4B, 0x52, 0x4D, 0x65, 0x6D, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2E, 0x63, 0x70,
	0x70, 0x00, 0x25, 0x73, 0x00, 0x3F, 0x3F, 0x3F, 0x20, 0x62, 0x61, 0x64, 0x20, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6E, 0x63, 0x65, 0x0A, 0x00,
	/* padding */
	0x00,
};

/* 802D6F5C-802D7030 00D4+00 .text      fetchResource_subroutine__13JKRMemArchiveFPUcUlPUcUli        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
ASM_FUNCTION(fetchResource_subroutine__13JKRMemArchiveFPUcUlPUcUli) {
	nofralloc
#include "asm/JSystem/JKernel/JKRMemArchive/fetchResource_subroutine__13JKRMemArchiveFPUcUlPUcUli.s"
}
#pragma pop


/* 802D7030-802D70C0 0090+00 .text      getExpandedResSize__13JKRMemArchiveCFPCv                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
ASM_FUNCTION(getExpandedResSize__13JKRMemArchiveCFPCv) {
	nofralloc
#include "asm/JSystem/JKernel/JKRMemArchive/getExpandedResSize__13JKRMemArchiveCFPCv.s"
}
#pragma pop


/* ############################################################################################## */
