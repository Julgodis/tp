// 
// Generated By: dol2asm
// Translation Unit: JKRDvdRipper
// 

#include "dol2asm.h"
#include "dolphin/types.h"
#include "JSystem/JKernel/JKRDvdRipper.h"

// 
// Types:
// 

struct JKRDvdFile {
	/* 802D9584 */ JKRDvdFile();
	/* 802D9748 */ ~JKRDvdFile();
	/* 802D9850 */ void open(char const*);
	/* 802D98C4 */ void open(s32);
};

struct JKRHeap {
	/* 802CE4D4 */ void alloc(u32, int);
	/* 802CE474 */ void alloc(u32, int, JKRHeap*);
	/* 802CE500 */ void free(void*, JKRHeap*);
};

struct JKRExpandSwitch {
};

struct JKRDvdRipper {
	struct EAllocDirection {
	};

	/* 802D9B98 */ void loadToMainRAM(char const*, u8*, JKRExpandSwitch, u32, JKRHeap*, JKRDvdRipper::EAllocDirection, u32, int*, u32*);
	/* 802D9D10 */ void loadToMainRAM(JKRDvdFile*, u8*, JKRExpandSwitch, u32, JKRHeap*, JKRDvdRipper::EAllocDirection, u32, int*, u32*);
	/* 802D9C54 */ void loadToMainRAM(s32, u8*, JKRExpandSwitch, u32, JKRHeap*, JKRDvdRipper::EAllocDirection, u32, int*, u32*);
	/* 802DA7D4 */ void isErrorRetry();
};

template <typename A0>
struct JSUList { };
/* JSUList<JKRDMCommand> */
struct JSUList__template9 {
	/* 802DA820 */ ~JSUList__template9();
};

struct JKRDecomp {
	/* 802DB988 */ void orderSync(u8*, u8*, u32, u32);
	/* 802DBCF8 */ void checkCompressed(u8*);
};

struct JSUPtrList {
	/* 802DBEAC */ ~JSUPtrList();
	/* 802DBF14 */ void initiate();
};

struct JUTException {
	/* 802E21FC */ void panic_f(char const*, int, char const*, ...);
};

// 
// Forward References:
// 

static void JKRDecompressFromDVD(JKRDvdFile*, void*, u32, u32, u32, u32, u32*); // 2
static void decompSZS_subroutine(u8*, u8*); // 2
static void firstSrcData(); // 2
static void nextSrcData(u8*); // 2

extern "C" void loadToMainRAM__12JKRDvdRipperFPCcPUc15JKRExpandSwitchUlP7JKRHeapQ212JKRDvdRipper15EAllocDirectionUlPiPUl(); // 1
extern "C" void loadToMainRAM__12JKRDvdRipperFlPUc15JKRExpandSwitchUlP7JKRHeapQ212JKRDvdRipper15EAllocDirectionUlPiPUl(); // 1
extern "C" void loadToMainRAM__12JKRDvdRipperFP10JKRDvdFilePUc15JKRExpandSwitchUlP7JKRHeapQ212JKRDvdRipper15EAllocDirectionUlPiPUl(); // 1
extern "C" static void JKRDecompressFromDVD__FP10JKRDvdFilePvUlUlUlUlPUl(); // 1
extern "C" static void JKRDvdRipper__decompSZS_subroutine__FPUcPUc(); // 1
extern "C" static void JKRDvdRipper__firstSrcData__Fv(); // 1
extern "C" static void JKRDvdRipper__nextSrcData__FPUc(); // 1
extern "C" void isErrorRetry__12JKRDvdRipperFv(); // 1
extern "C" void __sinit_JKRDvdRipper_cpp(); // 1
extern "C" void func_802DA820(); // 1
extern "C" extern char const* const JKRDvdRipper__stringBase0;
extern "C" extern u32 sSZSBufferSize__12JKRDvdRipper;

// 
// External References:
// 

void operator delete(void*); // 2

SECTION_INIT void memcpy(); // 1
extern "C" void alloc__7JKRHeapFUliP7JKRHeap(); // 1
extern "C" void alloc__7JKRHeapFUli(); // 1
extern "C" void free__7JKRHeapFPvP7JKRHeap(); // 1
extern "C" void __dl__FPv(); // 1
extern "C" void __ct__10JKRDvdFileFv(); // 1
extern "C" void __dt__10JKRDvdFileFv(); // 1
extern "C" void open__10JKRDvdFileFPCc(); // 1
extern "C" void open__10JKRDvdFileFl(); // 1
extern "C" void orderSync__9JKRDecompFPUcPUcUlUl(); // 1
extern "C" void checkCompressed__9JKRDecompFPUc(); // 1
extern "C" void __dt__10JSUPtrListFv(); // 1
extern "C" void initiate__10JSUPtrListFv(); // 1
extern "C" void panic_f__12JUTExceptionFPCciPCce(); // 1
extern "C" void DCInvalidateRange(); // 1
extern "C" void DCStoreRangeNoSync(); // 1
extern "C" void OSDisableInterrupts(); // 1
extern "C" void OSRestoreInterrupts(); // 1
extern "C" void OSInitMutex(); // 1
extern "C" void OSLockMutex(); // 1
extern "C" void OSUnlockMutex(); // 1
extern "C" void DVDReadPrio(); // 1
extern "C" void VIWaitForRetrace(); // 1
extern "C" void __register_global_object(); // 1
extern "C" void _savegpr_18(); // 1
extern "C" void _savegpr_23(); // 1
extern "C" void _savegpr_24(); // 1
extern "C" void _savegpr_28(); // 1
extern "C" void _savegpr_29(); // 1
extern "C" void _restgpr_18(); // 1
extern "C" void _restgpr_23(); // 1
extern "C" void _restgpr_24(); // 1
extern "C" void _restgpr_28(); // 1
extern "C" void _restgpr_29(); // 1
extern "C" extern u8 sSystemHeap__7JKRHeap[4];

// 
// Declarations:
// 

/* 802D9B98-802D9C54 00BC+00 r=1 e=1 z=0  None .text      loadToMainRAM__12JKRDvdRipperFPCcPUc15JKRExpandSwitchUlP7JKRHeapQ212JKRDvdRipper15EAllocDirectionUlPiPUl */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRDvdRipper::loadToMainRAM(char const* param_0, u8* param_1, JKRExpandSwitch param_2, u32 param_3, JKRHeap* param_4, JKRDvdRipper::EAllocDirection param_5, u32 param_6, int* param_7, u32* param_8) {
	nofralloc
#include "asm/JSystem/JKernel/JKRDvdRipper/func_802D9B98.s"
}
#pragma pop


/* 802D9C54-802D9D10 00BC+00 r=9 e=9 z=0  None .text      loadToMainRAM__12JKRDvdRipperFlPUc15JKRExpandSwitchUlP7JKRHeapQ212JKRDvdRipper15EAllocDirectionUlPiPUl */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRDvdRipper::loadToMainRAM(s32 param_0, u8* param_1, JKRExpandSwitch param_2, u32 param_3, JKRHeap* param_4, JKRDvdRipper::EAllocDirection param_5, u32 param_6, int* param_7, u32* param_8) {
	nofralloc
#include "asm/JSystem/JKernel/JKRDvdRipper/func_802D9C54.s"
}
#pragma pop


/* ############################################################################################## */
/* 8039D290-8039D2F0 0059+07 r=1 e=0 z=0  None .rodata    @stringBase0                                                 */
#pragma push
#pragma force_active on
#pragma section ".dead"
SECTION_DEAD char const* const stringBase_8039D290 = "JKRDvdRipper.cpp";
SECTION_DEAD char const* const stringBase_8039D2A1 = "%s";
SECTION_DEAD char const* const stringBase_8039D2A4 = 
    "Sorry, not applied for SZP archive.";
SECTION_DEAD char const* const stringBase_8039D2C8 = 
    "Not support SZP with offset read";
/* @stringBase0 padding */
SECTION_DEAD static char const* const pad_8039D2E9 = "\0\0\0\0\0\0";
#pragma pop

/* 804508C8-804508CC 0004+00 r=3 e=0 z=0  None .sdata     None                                                         */
SECTION_SDATA static u32 data_804508C8 = 0x01000000;

/* 802D9D10-802DA1E4 04D4+00 r=2 e=0 z=0  None .text      loadToMainRAM__12JKRDvdRipperFP10JKRDvdFilePUc15JKRExpandSwitchUlP7JKRHeapQ212JKRDvdRipper15EAllocDirectionUlPiPUl */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRDvdRipper::loadToMainRAM(JKRDvdFile* param_0, u8* param_1, JKRExpandSwitch param_2, u32 param_3, JKRHeap* param_4, JKRDvdRipper::EAllocDirection param_5, u32 param_6, int* param_7, u32* param_8) {
	nofralloc
#include "asm/JSystem/JKernel/JKRDvdRipper/func_802D9D10.s"
}
#pragma pop


/* ############################################################################################## */
/* 80434378-80434384 000C+00 r=1 e=0 z=0  None .bss       @491                                                         */
static u8 JKRDvdRipper__lit_491[12];

/* 80434384-80434390 000C+00 r=1 e=0 z=0  None .bss       sDvdAsyncList__12JKRDvdRipper                                */
static u8 sDvdAsyncList__12JKRDvdRipper[12];

/* 80434390-804343A8 0018+00 r=1 e=0 z=0  None .bss       decompMutex                                                  */
static u8 JKRDvdRipper__decompMutex[24];

/* 804508CC-804508D0 0004+00 r=2 e=1 z=0  None .sdata     sSZSBufferSize__12JKRDvdRipper                               */
SECTION_SDATA u32 sSZSBufferSize__12JKRDvdRipper = 0x00000400;

/* 80451428-8045142C 0004+00 r=3 e=0 z=0  None .sbss      szpBuf                                                       */
static u8 JKRDvdRipper__szpBuf[4];

/* 8045142C-80451430 0004+00 r=3 e=0 z=0  None .sbss      szpEnd                                                       */
static u8 JKRDvdRipper__szpEnd[4];

/* 80451430-80451434 0004+00 r=2 e=0 z=0  None .sbss      refBuf                                                       */
static u8 JKRDvdRipper__refBuf[4];

/* 80451434-80451438 0004+00 r=2 e=0 z=0  None .sbss      refEnd                                                       */
static u8 JKRDvdRipper__refEnd[4];

/* 80451438-8045143C 0004+00 r=2 e=0 z=0  None .sbss      refCurrent                                                   */
static u8 JKRDvdRipper__refCurrent[4];

/* 8045143C-80451440 0004+00 r=3 e=0 z=0  None .sbss      srcOffset                                                    */
static u8 JKRDvdRipper__srcOffset[4];

/* 80451440-80451444 0004+00 r=4 e=0 z=0  None .sbss      transLeft                                                    */
static u8 JKRDvdRipper__transLeft[4];

/* 80451444-80451448 0004+00 r=3 e=0 z=0  None .sbss      srcLimit                                                     */
static u8 JKRDvdRipper__srcLimit[4];

/* 80451448-8045144C 0004+00 r=3 e=0 z=0  None .sbss      srcFile                                                      */
static u8 JKRDvdRipper__srcFile[4];

/* 8045144C-80451450 0004+00 r=2 e=0 z=0  None .sbss      fileOffset                                                   */
static u8 JKRDvdRipper__fileOffset[4];

/* 80451450-80451454 0004+00 r=2 e=0 z=0  None .sbss      readCount                                                    */
static u8 JKRDvdRipper__readCount[4];

/* 80451454-80451458 0004+00 r=2 e=0 z=0  None .sbss      maxDest                                                      */
static u8 JKRDvdRipper__maxDest[4];

/* 80451458-8045145C 0004+00 r=1 e=0 z=0  None .sbss      None                                                         */
static u8 data_80451458[4];

/* 8045145C-80451460 0004+00 r=2 e=0 z=0  None .sbss      tsPtr                                                        */
static u8 JKRDvdRipper__tsPtr[4];

/* 80451460-80451468 0004+04 r=1 e=0 z=0  None .sbss      tsArea                                                       */
static u8 JKRDvdRipper__tsArea[4 + 4 /* padding */];

/* 802DA1E4-802DA35C 0178+00 r=1 e=0 z=0  None .text      JKRDecompressFromDVD__FP10JKRDvdFilePvUlUlUlUlPUl            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm static void JKRDecompressFromDVD(JKRDvdFile* param_0, void* param_1, u32 param_2, u32 param_3, u32 param_4, u32 param_5, u32* param_6) {
	nofralloc
#include "asm/JSystem/JKernel/JKRDvdRipper/JKRDecompressFromDVD__FP10JKRDvdFilePvUlUlUlUlPUl.s"
}
#pragma pop


/* 802DA35C-802DA60C 02B0+00 r=1 e=0 z=0  None .text      decompSZS_subroutine__FPUcPUc                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm static void decompSZS_subroutine(u8* param_0, u8* param_1) {
	nofralloc
#include "asm/JSystem/JKernel/JKRDvdRipper/JKRDvdRipper__decompSZS_subroutine__FPUcPUc.s"
}
#pragma pop


/* 802DA60C-802DA6D8 00CC+00 r=1 e=0 z=0  None .text      firstSrcData__Fv                                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm static void firstSrcData() {
	nofralloc
#include "asm/JSystem/JKernel/JKRDvdRipper/JKRDvdRipper__firstSrcData__Fv.s"
}
#pragma pop


/* 802DA6D8-802DA7D4 00FC+00 r=1 e=0 z=0  None .text      nextSrcData__FPUc                                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm static void nextSrcData(u8* param_0) {
	nofralloc
#include "asm/JSystem/JKernel/JKRDvdRipper/JKRDvdRipper__nextSrcData__FPUc.s"
}
#pragma pop


/* 802DA7D4-802DA7DC 0008+00 r=1 e=0 z=0  None .text      isErrorRetry__12JKRDvdRipperFv                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRDvdRipper::isErrorRetry() {
	nofralloc
#include "asm/JSystem/JKernel/JKRDvdRipper/isErrorRetry__12JKRDvdRipperFv.s"
}
#pragma pop


/* 802DA7DC-802DA820 0044+00 r=1 e=1 z=0  None .text      __sinit_JKRDvdRipper_cpp                                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void __sinit_JKRDvdRipper_cpp() {
	nofralloc
#include "asm/JSystem/JKernel/JKRDvdRipper/__sinit_JKRDvdRipper_cpp.s"
}
#pragma pop


/* 802DA820-802DA874 0054+00 r=1 e=0 z=0  None .text      __dt__23JSUList<12JKRDMCommand>Fv                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm JSUList__template9::~JSUList__template9() {
	nofralloc
#include "asm/JSystem/JKernel/JKRDvdRipper/func_802DA820.s"
}
#pragma pop


