// 
// Generated By: dol2asm
// Translation Unit: JKRDvdArchive
// 

#include "dolphin/types.h"

// 
// Types:
// 

struct JKRHeap {
	/* 802CE4D4 */ void alloc(u32, int);
	/* 802CE474 */ void alloc(u32, int, JKRHeap*);
	/* 802CE500 */ void free(void*, JKRHeap*);
	/* 802CE548 */ void free(void*);
	/* 802CEB18 */ void copyMemory(void*, void*, u32);
};

struct JKRArchive {
	struct EMountDirection {
	};

	struct SDIFileEntry {
	};

	struct EMountMode {
	};

	/* 802D5A38 */ void becomeCurrent(char const*);
	/* 802D5C64 */ void getResource(u32, char const*);
	/* 802D5BE8 */ void getResource(char const*);
	/* 802D5D8C */ void readResource(void*, u32, u32, char const*);
	/* 802D5E30 */ void readResource(void*, u32, char const*);
	/* 802D5FB4 */ void removeResourceAll();
	/* 802D603C */ void removeResource(void*);
	/* 802D609C */ void detachResource(void*);
	/* 802D60D8 */ void getResSize(void const*) const;
	/* 802D6150 */ void countFile(char const*) const;
	/* 802D61B0 */ void getFirstFile(char const*) const;
	/* 802D6294 */ JKRArchive(s32, JKRArchive::EMountMode);
	/* 802D6334 */ ~JKRArchive();
	/* 802D6734 */ void findPtrResource(void const*) const;
	/* 802D693C */ void setExpandSize(JKRArchive::SDIFileEntry*, u32);
	/* 802D6978 */ void getExpandSize(JKRArchive::SDIFileEntry*) const;
};

struct JKRDvdArchive {
	/* 802D7BF0 */ JKRDvdArchive(s32, JKRArchive::EMountDirection);
	/* 802D7C98 */ ~JKRDvdArchive();
	/* 802D7DB4 */ void open(s32);
	/* 802D8168 */ void fetchResource(void*, u32, JKRArchive::SDIFileEntry*, u32*);
	/* 802D8050 */ void fetchResource(JKRArchive::SDIFileEntry*, u32*);
	/* 802D826C */ void fetchResource_subroutine(s32, u32, u32, u8*, u32, int, int);
	/* 802D8474 */ void fetchResource_subroutine(s32, u32, u32, JKRHeap*, int, int, u8**);
	/* 802D8698 */ void getExpandedResSize(void const*) const;
};

struct JKRFileLoader {
	/* 802D41D4 */ void unmount();
};

struct JKRDvdFile {
	/* 802D96A0 */ JKRDvdFile(s32);
};

struct JKRExpandSwitch {
};

struct JKRDvdRipper {
	struct EAllocDirection {
	};

	/* 802D9C54 */ void loadToMainRAM(s32, u8*, JKRExpandSwitch, u32, JKRHeap*, JKRDvdRipper::EAllocDirection, u32, int*, u32*);
};

struct JSUPtrLink {
};

struct JSUPtrList {
	/* 802DBFF0 */ void prepend(JSUPtrLink*);
	/* 802DC15C */ void remove(JSUPtrLink*);
};

struct JUTException {
	/* 802E21FC */ void panic_f(char const*, int, char const*, ...);
};

// 
// Forward References:
// 


extern "C" void __ct__13JKRDvdArchiveFlQ210JKRArchive15EMountDirection(); // 1
extern "C" void __dt__13JKRDvdArchiveFv(); // 1
extern "C" void open__13JKRDvdArchiveFl(); // 1
extern "C" void fetchResource__13JKRDvdArchiveFPQ210JKRArchive12SDIFileEntryPUl(); // 1
extern "C" void fetchResource__13JKRDvdArchiveFPvUlPQ210JKRArchive12SDIFileEntryPUl(); // 1
extern "C" void fetchResource_subroutine__13JKRDvdArchiveFlUlUlPUcUlii(); // 1
extern "C" void fetchResource_subroutine__13JKRDvdArchiveFlUlUlP7JKRHeapiiPPUc(); // 1
extern "C" void getExpandedResSize__13JKRDvdArchiveCFPCv(); // 1
SECTION_RODATA extern const char* const JKRDvdArchive__stringBase0;
SECTION_DATA extern void* const __vt__13JKRDvdArchive[20];

// 
// External References:
// 

SECTION_INIT void memset(); // 1
void* operator new(u32, JKRHeap*, int); // 2
void operator delete(void*); // 2
extern "C" void DCInvalidateRange(); // 1
extern "C" void _savegpr_25(); // 1
extern "C" void _savegpr_26(); // 1
extern "C" void _savegpr_27(); // 1
extern "C" void _savegpr_28(); // 1
extern "C" void _savegpr_29(); // 1
extern "C" void _restgpr_25(); // 1
extern "C" void _restgpr_26(); // 1
extern "C" void _restgpr_27(); // 1
extern "C" void _restgpr_28(); // 1
extern "C" void _restgpr_29(); // 1
extern "C" void abs(); // 1

SECTION_INIT void memset(); // 1
extern "C" void alloc__7JKRHeapFUliP7JKRHeap(); // 1
extern "C" void alloc__7JKRHeapFUli(); // 1
extern "C" void free__7JKRHeapFPvP7JKRHeap(); // 1
extern "C" void free__7JKRHeapFPv(); // 1
extern "C" void copyMemory__7JKRHeapFPvPvUl(); // 1
extern "C" void* __nw__FUlP7JKRHeapi(); // 1
extern "C" void __dl__FPv(); // 1
extern "C" void unmount__13JKRFileLoaderFv(); // 1
extern "C" void becomeCurrent__10JKRArchiveFPCc(); // 1
extern "C" void getResource__10JKRArchiveFPCc(); // 1
extern "C" void getResource__10JKRArchiveFUlPCc(); // 1
extern "C" void readResource__10JKRArchiveFPvUlUlPCc(); // 1
extern "C" void readResource__10JKRArchiveFPvUlPCc(); // 1
extern "C" void removeResourceAll__10JKRArchiveFv(); // 1
extern "C" void removeResource__10JKRArchiveFPv(); // 1
extern "C" void detachResource__10JKRArchiveFPv(); // 1
extern "C" void getResSize__10JKRArchiveCFPCv(); // 1
extern "C" void countFile__10JKRArchiveCFPCc(); // 1
extern "C" void getFirstFile__10JKRArchiveCFPCc(); // 1
extern "C" void __ct__10JKRArchiveFlQ210JKRArchive10EMountMode(); // 1
extern "C" void __dt__10JKRArchiveFv(); // 1
extern "C" void findPtrResource__10JKRArchiveCFPCv(); // 1
extern "C" void setExpandSize__10JKRArchiveFPQ210JKRArchive12SDIFileEntryUl(); // 1
extern "C" void getExpandSize__10JKRArchiveCFPQ210JKRArchive12SDIFileEntry(); // 1
extern "C" void __ct__10JKRDvdFileFl(); // 1
extern "C" void loadToMainRAM__12JKRDvdRipperFlPUc15JKRExpandSwitchUlP7JKRHeapQ212JKRDvdRipper15EAllocDirectionUlPiPUl(); // 1
extern "C" void prepend__10JSUPtrListFP10JSUPtrLink(); // 1
extern "C" void remove__10JSUPtrListFP10JSUPtrLink(); // 1
extern "C" void panic_f__12JUTExceptionFPCciPCce(); // 1
extern "C" void DCInvalidateRange(); // 1
extern "C" void _savegpr_25(); // 1
extern "C" void _savegpr_26(); // 1
extern "C" void _savegpr_27(); // 1
extern "C" void _savegpr_28(); // 1
extern "C" void _savegpr_29(); // 1
extern "C" void _restgpr_25(); // 1
extern "C" void _restgpr_26(); // 1
extern "C" void _restgpr_27(); // 1
extern "C" void _restgpr_28(); // 1
extern "C" void _restgpr_29(); // 1
extern "C" void abs(); // 1
SECTION_BSS extern u8 sVolumeList__13JKRFileLoader[12];
SECTION_SBSS extern u8 sSystemHeap__7JKRHeap[4];

// 
// Declarations:
// 

/* ############################################################################################## */
/* 803CC398-803CC3E8 0050+00 rc=0 efc=0 .data      __vt__13JKRDvdArchive                                        */
void* const __vt__13JKRDvdArchive[20] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__13JKRDvdArchiveFv,
	(void*)unmount__13JKRFileLoaderFv,
	(void*)becomeCurrent__10JKRArchiveFPCc,
	(void*)getResource__10JKRArchiveFPCc,
	(void*)getResource__10JKRArchiveFUlPCc,
	(void*)readResource__10JKRArchiveFPvUlPCc,
	(void*)readResource__10JKRArchiveFPvUlUlPCc,
	(void*)removeResourceAll__10JKRArchiveFv,
	(void*)removeResource__10JKRArchiveFPv,
	(void*)detachResource__10JKRArchiveFPv,
	(void*)getResSize__10JKRArchiveCFPCv,
	(void*)countFile__10JKRArchiveCFPCc,
	(void*)getFirstFile__10JKRArchiveCFPCc,
	(void*)getExpandedResSize__13JKRDvdArchiveCFPCv,
	(void*)fetchResource__13JKRDvdArchiveFPQ210JKRArchive12SDIFileEntryPUl,
	(void*)fetchResource__13JKRDvdArchiveFPvUlPQ210JKRArchive12SDIFileEntryPUl,
	(void*)setExpandSize__10JKRArchiveFPQ210JKRArchive12SDIFileEntryUl,
	(void*)getExpandSize__10JKRArchiveCFPQ210JKRArchive12SDIFileEntry,
};

/* 802D7BF0-802D7C98 00A8+00 rc=0 efc=0 .text      __ct__13JKRDvdArchiveFlQ210JKRArchive15EMountDirection       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm JKRDvdArchive::JKRDvdArchive(s32 field_0, JKRArchive::EMountDirection field_1) {
	nofralloc
#include "asm/JSystem/JKernel/JKRDvdArchive/__ct__13JKRDvdArchiveFlQ210JKRArchive15EMountDirection.s"
}
#pragma pop


/* 802D7C98-802D7DB4 011C+00 rc=0 efc=0 .text      __dt__13JKRDvdArchiveFv                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm JKRDvdArchive::~JKRDvdArchive() {
	nofralloc
#include "asm/JSystem/JKernel/JKRDvdArchive/__dt__13JKRDvdArchiveFv.s"
}
#pragma pop


/* 802D7DB4-802D8050 029C+00 rc=0 efc=0 .text      open__13JKRDvdArchiveFl                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRDvdArchive::open(s32 field_0) {
	nofralloc
#include "asm/JSystem/JKernel/JKRDvdArchive/open__13JKRDvdArchiveFl.s"
}
#pragma pop


/* 802D8050-802D8168 0118+00 rc=0 efc=0 .text      fetchResource__13JKRDvdArchiveFPQ210JKRArchive12SDIFileEntryPUl */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRDvdArchive::fetchResource(JKRArchive::SDIFileEntry* field_0, u32* field_1) {
	nofralloc
#include "asm/JSystem/JKernel/JKRDvdArchive/fetchResource__13JKRDvdArchiveFPQ210JKRArchive12SDIFileEntryPUl.s"
}
#pragma pop


/* 802D8168-802D826C 0104+00 rc=0 efc=0 .text      fetchResource__13JKRDvdArchiveFPvUlPQ210JKRArchive12SDIFileEntryPUl */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRDvdArchive::fetchResource(void* field_0, u32 field_1, JKRArchive::SDIFileEntry* field_2, u32* field_3) {
	nofralloc
#include "asm/JSystem/JKernel/JKRDvdArchive/fetchResource__13JKRDvdArchiveFPvUlPQ210JKRArchive12SDIFileEntryPUl.s"
}
#pragma pop


/* ############################################################################################## */
/* 8039D1B0-8039D220 006D+03 rc=0 efc=0 .rodata    @stringBase0                                                 */
#pragma push
#pragma force_active on
#pragma section ".dead"
const char* const stringBase_8039D1B0 = "JKRDvdArchive.cpp";
const char* const stringBase_8039D1C2 = "%s";
const char* const stringBase_8039D1C5 = 
    "Sorry, not applied for SZP archive.\n";
const char* const stringBase_8039D1EA = "??? bad sequence\n";
const char* const stringBase_8039D1FC = 
    "Sorry, not applied SZP archive.\n";
/* @stringBase0 padding */
char* const pad_8039D21D = "\0\0";
#pragma pop

/* 802D826C-802D8474 0208+00 rc=0 efc=0 .text      fetchResource_subroutine__13JKRDvdArchiveFlUlUlPUcUlii       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRDvdArchive::fetchResource_subroutine(s32 field_0, u32 field_1, u32 field_2, u8* field_3, u32 field_4, int field_5, int field_6) {
	nofralloc
#include "asm/JSystem/JKernel/JKRDvdArchive/fetchResource_subroutine__13JKRDvdArchiveFlUlUlPUcUlii.s"
}
#pragma pop


/* 802D8474-802D8698 0224+00 rc=0 efc=0 .text      fetchResource_subroutine__13JKRDvdArchiveFlUlUlP7JKRHeapiiPPUc */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRDvdArchive::fetchResource_subroutine(s32 field_0, u32 field_1, u32 field_2, JKRHeap* field_3, int field_4, int field_5, u8** field_6) {
	nofralloc
#include "asm/JSystem/JKernel/JKRDvdArchive/fetchResource_subroutine__13JKRDvdArchiveFlUlUlP7JKRHeapiiPPUc.s"
}
#pragma pop


/* 802D8698-802D87D4 013C+00 rc=0 efc=0 .text      getExpandedResSize__13JKRDvdArchiveCFPCv                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRDvdArchive::getExpandedResSize(void const* field_0) const {
	nofralloc
#include "asm/JSystem/JKernel/JKRDvdArchive/getExpandedResSize__13JKRDvdArchiveCFPCv.s"
}
#pragma pop


