// 
// Generated By: dol2asm
// Translation Unit: JASAiCtrl
// 

#include "dol2asm.h"
#include "dolphin/types.h"
#include "JSystem/JAudio2/JASAiCtrl.h"

// 
// Types:
// 

struct JKRHeap {
};

struct JASProbe {
	/* 80290EE4 */ void start(s32, char const*);
	/* 80290F24 */ void stop(s32);
};

struct JASPortCmd {
	/* 80291060 */ void execAllCommand();
};

struct JASOutputRate {
};

struct JASMixMode {
};

struct JASLfo {
	/* 8029BDD8 */ void incCounter(f32);
};

struct JASDsp {
	/* 8029D9E4 */ void syncFrame(u32, u32, u32);
	/* 8029DAA0 */ void invalChannelAll();
};

struct JASDriver {
	/* 8029C388 */ void initAI(void (*)(void));
	/* 8029C4E4 */ void startDMA();
	/* 8029C504 */ void stopDMA();
	/* 8029C524 */ void setOutputRate(JASOutputRate);
	/* 8029C568 */ void updateDac();
	/* 8029C6C4 */ void updateDSP();
	/* 8029C7E0 */ void readDspBuffer(s16*, u32);
	/* 8029C900 */ void finishDSPFrame();
	/* 8029C9DC */ void registerMixCallback(s16* (*)(s32), JASMixMode);
	/* 8029C9E8 */ void getDacRate();
	/* 8029C9F0 */ void getSubFrames();
	/* 8029C9F8 */ void getDacSize();
	/* 8029CA04 */ void getFrameSamples();
	/* 8029CA10 */ void mixMonoTrack(s16*, u32, s16* (*)(s32));
	/* 8029CAC0 */ void mixMonoTrackWide(s16*, u32, s16* (*)(s32));
	/* 8029CB70 */ void mixExtraTrack(s16*, u32, s16* (*)(s32));
	/* 8029CC50 */ void mixInterleaveTrack(s16*, u32, s16* (*)(s32));
	/* 8029CCD4 */ void getSubFrameCounter();
	/* 8029E2A8 */ void subframeCallback();
	/* 8029E2D0 */ void DSPSyncCallback();
};

struct JASDSPChannel {
	/* 8029D89C */ void updateAll();
	/* 8029D910 */ void killActiveChannel();
};

struct JASChannel {
	/* 8029BC0C */ void initBankDisposeMsgQueue();
	/* 8029BC48 */ void receiveBankDisposeMsg();
};

struct JASCalc {
	/* 8028F2E8 */ void imixcopy(s16 const*, s16 const*, s16*, u32);
	/* 8028F480 */ void bzero(void*, u32);
	/*          */ template <typename A1, typename B1>
	/*          */ void clamp(/* s32 */);
	/* 8028F69C */ /* clamp<s16, s32> */
	void clamp__template0(s32);

};

// 
// Forward References:
// 


extern "C" void initAI__9JASDriverFPFv_v(); // 1
extern "C" void startDMA__9JASDriverFv(); // 1
extern "C" void stopDMA__9JASDriverFv(); // 1
extern "C" void setOutputRate__9JASDriverF13JASOutputRate(); // 1
extern "C" void updateDac__9JASDriverFv(); // 1
extern "C" void updateDSP__9JASDriverFv(); // 1
extern "C" void readDspBuffer__9JASDriverFPsUl(); // 1
extern "C" void finishDSPFrame__9JASDriverFv(); // 1
extern "C" void registerMixCallback__9JASDriverFPFl_Ps10JASMixMode(); // 1
extern "C" void getDacRate__9JASDriverFv(); // 1
extern "C" void getSubFrames__9JASDriverFv(); // 1
extern "C" void getDacSize__9JASDriverFv(); // 1
extern "C" void getFrameSamples__9JASDriverFv(); // 1
extern "C" void mixMonoTrack__9JASDriverFPsUlPFl_Ps(); // 1
extern "C" void mixMonoTrackWide__9JASDriverFPsUlPFl_Ps(); // 1
extern "C" void mixExtraTrack__9JASDriverFPsUlPFl_Ps(); // 1
extern "C" void mixInterleaveTrack__9JASDriverFPsUlPFl_Ps(); // 1
extern "C" void getSubFrameCounter__9JASDriverFv(); // 1
extern "C" extern char const* const JASAiCtrl__stringBase0;

// 
// External References:
// 

void JASReport(char const*, ...); // 2
void* operator new[](u32, JKRHeap*, int); // 2

extern "C" void imixcopy__7JASCalcFPCsPCsPsUl(); // 1
extern "C" void bzero__7JASCalcFPvUl(); // 1
extern "C" void func_8028F69C(); // 1
extern "C" void start__8JASProbeFlPCc(); // 1
extern "C" void stop__8JASProbeFl(); // 1
extern "C" void JASReport__FPCce(); // 1
extern "C" void execAllCommand__10JASPortCmdFv(); // 1
extern "C" void initBankDisposeMsgQueue__10JASChannelFv(); // 1
extern "C" void receiveBankDisposeMsg__10JASChannelFv(); // 1
extern "C" void incCounter__6JASLfoFf(); // 1
extern "C" void updateAll__13JASDSPChannelFv(); // 1
extern "C" void killActiveChannel__13JASDSPChannelFv(); // 1
extern "C" void syncFrame__6JASDspFUlUlUl(); // 1
extern "C" void invalChannelAll__6JASDspFv(); // 1
extern "C" void subframeCallback__9JASDriverFv(); // 1
extern "C" void DSPSyncCallback__9JASDriverFv(); // 1
extern "C" void* __nwa__FUlP7JKRHeapi(); // 1
extern "C" void DCInvalidateRange(); // 1
extern "C" void DCStoreRange(); // 1
extern "C" void OSDisableInterrupts(); // 1
extern "C" void OSRestoreInterrupts(); // 1
extern "C" void OSGetTick(); // 1
extern "C" void AIRegisterDMACallback(); // 1
extern "C" void AIInitDMA(); // 1
extern "C" void AIStartDMA(); // 1
extern "C" void AIStopDMA(); // 1
extern "C" void AISetDSPSampleRate(); // 1
extern "C" void AIInit(); // 1
extern "C" void _savegpr_25(); // 1
extern "C" void _savegpr_27(); // 1
extern "C" void _savegpr_28(); // 1
extern "C" void _savegpr_29(); // 1
extern "C" void _restgpr_25(); // 1
extern "C" void _restgpr_27(); // 1
extern "C" void _restgpr_28(); // 1
extern "C" void _restgpr_29(); // 1
extern "C" extern u8 sFreeRunLfo__6JASLfo[24];
extern "C" extern u8 JASDram[4];
extern "C" extern u8 snIntCount__14JASAudioThread[4 + 4 /* padding */];

// 
// Declarations:
// 

/* ############################################################################################## */
/* 80431C58-80431C68 000C+04 s=2 e=0 z=0  None .bss       sDmaDacBuffer__9JASDriver                                    */
static u8 sDmaDacBuffer__9JASDriver[12 + 4 /* padding */];

/* 804507A8-804507AC 0004+00 s=3 e=0 z=0  None .sdata     None                                                         */
SECTION_SDATA static u32 data_804507A8 = 0x03000000;

/* 804512A0-804512A4 0004+00 s=3 e=0 z=0  None .sbss      sDspDacBuffer__9JASDriver                                    */
static u8 sDspDacBuffer__9JASDriver[4];

/* 804512A4-804512A8 0004+00 s=3 e=0 z=0  None .sbss      sDspDacWriteBuffer__9JASDriver                               */
static u8 sDspDacWriteBuffer__9JASDriver[4];

/* 804512A8-804512AC 0004+00 s=3 e=0 z=0  None .sbss      sDspDacReadBuffer__9JASDriver                                */
static u8 sDspDacReadBuffer__9JASDriver[4];

/* 804512AC-804512B0 0004+00 s=3 e=0 z=0  None .sbss      sDspStatus__9JASDriver                                       */
static u8 sDspStatus__9JASDriver[4];

/* 804512B0-804512B4 0004+00 s=1 e=0 z=0  None .sbss      sDspDacCallback__9JASDriver                                  */
static u8 sDspDacCallback__9JASDriver[4];

/* 804512B4-804512B8 0004+00 s=1 e=0 z=0  None .sbss      lastRspMadep__9JASDriver                                     */
static u8 lastRspMadep__9JASDriver[4];

/* 804512B8-804512BC 0004+00 s=1 e=0 z=0  None .sbss      dacCallbackFunc__9JASDriver                                  */
static u8 dacCallbackFunc__9JASDriver[4];

/* 804512BC-804512C0 0004+00 s=2 e=0 z=0  None .sbss      extMixCallback__9JASDriver                                   */
static u8 extMixCallback__9JASDriver[4];

/* 804512C0-804512C4 0004+00 s=2 e=0 z=0  None .sbss      sOutputRate__9JASDriver                                      */
static u8 sOutputRate__9JASDriver[4];

/* 8029C388-8029C4E4 015C+00 s=0 e=1 z=0  None .text      initAI__9JASDriverFPFv_v                                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JASDriver::initAI(void (*)(void)) {
	nofralloc
#include "asm/JSystem/JAudio2/JASAiCtrl/initAI__9JASDriverFPFv_v.s"
}
#pragma pop


/* 8029C4E4-8029C504 0020+00 s=0 e=1 z=0  None .text      startDMA__9JASDriverFv                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JASDriver::startDMA() {
	nofralloc
#include "asm/JSystem/JAudio2/JASAiCtrl/startDMA__9JASDriverFv.s"
}
#pragma pop


/* 8029C504-8029C524 0020+00 s=0 e=1 z=0  None .text      stopDMA__9JASDriverFv                                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JASDriver::stopDMA() {
	nofralloc
#include "asm/JSystem/JAudio2/JASAiCtrl/stopDMA__9JASDriverFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 804507AC-804507B0 0004+00 s=2 e=0 z=0  None .sdata     sMixMode__9JASDriver                                         */
SECTION_SDATA static u32 sMixMode__9JASDriver = 0x00000002;

/* 804507B0-804507B4 0004+00 s=2 e=0 z=0  None .sdata     sDacRate__9JASDriver                                         */
SECTION_SDATA static u32 sDacRate__9JASDriver = 0x46FA3900;

/* 804507B4-804507B8 0004+00 s=4 e=0 z=0  None .sdata     sSubFrames__9JASDriver                                       */
SECTION_SDATA static u32 sSubFrames__9JASDriver = 0x00000007;

/* 80455720-80455724 0004+00 s=1 e=0 z=0  None .sdata2    @233                                                         */
SECTION_SDATA2 static u32 lit_233 = 0x46FA0000;

/* 80455724-80455728 0004+00 s=1 e=0 z=0  None .sdata2    @234                                                         */
SECTION_SDATA2 static u32 lit_234 = 0x473B8000;

/* 80455728-8045572C 0004+00 s=1 e=0 z=0  None .sdata2    @235                                                         */
SECTION_SDATA2 static u32 lit_235 = 0x3F801D27;

/* 8029C524-8029C568 0044+00 s=1 e=0 z=0  None .text      setOutputRate__9JASDriverF13JASOutputRate                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JASDriver::setOutputRate(JASOutputRate param_0) {
	nofralloc
#include "asm/JSystem/JAudio2/JASAiCtrl/setOutputRate__9JASDriverF13JASOutputRate.s"
}
#pragma pop


/* ############################################################################################## */
/* 8039B2E0-8039B2F0 0010+00 s=1 e=0 z=0  None .rodata    sMixFuncs__9JASDriver                                        */
SECTION_RODATA static void* const sMixFuncs__9JASDriver[4] = {
	(void*)mixMonoTrack__9JASDriverFPsUlPFl_Ps,
	(void*)mixMonoTrackWide__9JASDriverFPsUlPFl_Ps,
	(void*)mixExtraTrack__9JASDriverFPsUlPFl_Ps,
	(void*)mixInterleaveTrack__9JASDriverFPsUlPFl_Ps,
};

/* 804512C4-804512C8 0004+00 s=2 e=0 z=0  None .sbss      sSubFrameCounter__9JASDriver                                 */
static u8 sSubFrameCounter__9JASDriver[4];

/* 804512C8-804512CC 0004+00 s=1 e=0 z=0  None .sbss      dacp$239                                                     */
static u8 data_804512C8[4];

/* 804512CC-804512D0 0004+00 s=1 e=0 z=0  None .sbss      None                                                         */
static u8 data_804512CC[4];

/* 8029C568-8029C6C4 015C+00 s=0 e=1 z=0  None .text      updateDac__9JASDriverFv                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JASDriver::updateDac() {
	nofralloc
#include "asm/JSystem/JAudio2/JASAiCtrl/updateDac__9JASDriverFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 8039B2F0-8039B338 0048+00 s=5 e=0 z=0  None .rodata    @stringBase0                                                 */
#pragma push
#pragma force_active on
#pragma section ".dead"
SECTION_DEAD char const* const stringBase_8039B2F0 = "SFR-UPDATE";
SECTION_DEAD char const* const stringBase_8039B2FB = "kill DSP channel";
SECTION_DEAD char const* const stringBase_8039B30C = "DSP-MAIN";
SECTION_DEAD char const* const stringBase_8039B315 = "MONO-MIX";
SECTION_DEAD char const* const stringBase_8039B31E = "MONO(W)-MIX";
SECTION_DEAD char const* const stringBase_8039B32A = "DSPMIX";
SECTION_DEAD char const* const stringBase_8039B331 = "MIXING";
#pragma pop

/* 803C78B8-803C78E0 0028+00 s=1 e=0 z=0  None .data      history$267                                                  */
SECTION_DATA static u8 data_803C78B8[40] = {
	0x00, 0x0F, 0x42, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 804512D0-804512D4 0004+00 s=1 e=0 z=0  None .sbss      old_time$264                                                 */
static u8 data_804512D0[4];

/* 804512D4-804512D8 0004+00 s=1 e=0 z=0  None .sbss      None                                                         */
static u8 data_804512D4[4];

/* 8045572C-80455730 0004+00 s=1 e=0 z=0  None .sdata2    @275                                                         */
SECTION_SDATA2 static u32 lit_275 = 0x3F8CCCCD;

/* 80455730-80455738 0004+04 s=1 e=0 z=0  None .sdata2    @276                                                         */
SECTION_SDATA2 static f32 lit_276[1 + 1 /* padding */] = {
	32028.5f,
	/* padding */
	0.0f,
};

/* 80455738-80455740 0008+00 s=1 e=0 z=0  None .sdata2    @278                                                         */
SECTION_SDATA2 static u8 lit_278[8] = {
	0x43, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 8029C6C4-8029C7E0 011C+00 s=1 e=1 z=0  None .text      updateDSP__9JASDriverFv                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JASDriver::updateDSP() {
	nofralloc
#include "asm/JSystem/JAudio2/JASAiCtrl/updateDSP__9JASDriverFv.s"
}
#pragma pop


/* 8029C7E0-8029C900 0120+00 s=1 e=0 z=0  None .text      readDspBuffer__9JASDriverFPsUl                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JASDriver::readDspBuffer(s16* param_0, u32 param_1) {
	nofralloc
#include "asm/JSystem/JAudio2/JASAiCtrl/readDspBuffer__9JASDriverFPsUl.s"
}
#pragma pop


/* 8029C900-8029C9DC 00DC+00 s=1 e=1 z=0  None .text      finishDSPFrame__9JASDriverFv                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JASDriver::finishDSPFrame() {
	nofralloc
#include "asm/JSystem/JAudio2/JASAiCtrl/finishDSPFrame__9JASDriverFv.s"
}
#pragma pop


/* 8029C9DC-8029C9E8 000C+00 s=0 e=0 z=0  None .text      registerMixCallback__9JASDriverFPFl_Ps10JASMixMode           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JASDriver::registerMixCallback(s16* (*)(s32), JASMixMode param_1) {
	nofralloc
#include "asm/JSystem/JAudio2/JASAiCtrl/registerMixCallback__9JASDriverFPFl_Ps10JASMixMode.s"
}
#pragma pop


/* 8029C9E8-8029C9F0 0008+00 s=1 e=5 z=0  None .text      getDacRate__9JASDriverFv                                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JASDriver::getDacRate() {
	nofralloc
#include "asm/JSystem/JAudio2/JASAiCtrl/getDacRate__9JASDriverFv.s"
}
#pragma pop


/* 8029C9F0-8029C9F8 0008+00 s=2 e=2 z=0  None .text      getSubFrames__9JASDriverFv                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JASDriver::getSubFrames() {
	nofralloc
#include "asm/JSystem/JAudio2/JASAiCtrl/getSubFrames__9JASDriverFv.s"
}
#pragma pop


/* 8029C9F8-8029CA04 000C+00 s=2 e=0 z=0  None .text      getDacSize__9JASDriverFv                                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JASDriver::getDacSize() {
	nofralloc
#include "asm/JSystem/JAudio2/JASAiCtrl/getDacSize__9JASDriverFv.s"
}
#pragma pop


/* 8029CA04-8029CA10 000C+00 s=3 e=0 z=0  None .text      getFrameSamples__9JASDriverFv                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JASDriver::getFrameSamples() {
	nofralloc
#include "asm/JSystem/JAudio2/JASAiCtrl/getFrameSamples__9JASDriverFv.s"
}
#pragma pop


/* 8029CA10-8029CAC0 00B0+00 s=1 e=0 z=0  None .text      mixMonoTrack__9JASDriverFPsUlPFl_Ps                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JASDriver::mixMonoTrack(s16* param_0, u32 param_1, s16* (*)(s32)) {
	nofralloc
#include "asm/JSystem/JAudio2/JASAiCtrl/mixMonoTrack__9JASDriverFPsUlPFl_Ps.s"
}
#pragma pop


/* 8029CAC0-8029CB70 00B0+00 s=1 e=0 z=0  None .text      mixMonoTrackWide__9JASDriverFPsUlPFl_Ps                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JASDriver::mixMonoTrackWide(s16* param_0, u32 param_1, s16* (*)(s32)) {
	nofralloc
#include "asm/JSystem/JAudio2/JASAiCtrl/mixMonoTrackWide__9JASDriverFPsUlPFl_Ps.s"
}
#pragma pop


/* 8029CB70-8029CC50 00E0+00 s=1 e=0 z=0  None .text      mixExtraTrack__9JASDriverFPsUlPFl_Ps                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JASDriver::mixExtraTrack(s16* param_0, u32 param_1, s16* (*)(s32)) {
	nofralloc
#include "asm/JSystem/JAudio2/JASAiCtrl/mixExtraTrack__9JASDriverFPsUlPFl_Ps.s"
}
#pragma pop


/* 8029CC50-8029CCD4 0084+00 s=1 e=0 z=0  None .text      mixInterleaveTrack__9JASDriverFPsUlPFl_Ps                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JASDriver::mixInterleaveTrack(s16* param_0, u32 param_1, s16* (*)(s32)) {
	nofralloc
#include "asm/JSystem/JAudio2/JASAiCtrl/mixInterleaveTrack__9JASDriverFPsUlPFl_Ps.s"
}
#pragma pop


/* 8029CCD4-8029CCDC 0008+00 s=0 e=1 z=0  None .text      getSubFrameCounter__9JASDriverFv                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JASDriver::getSubFrameCounter() {
	nofralloc
#include "asm/JSystem/JAudio2/JASAiCtrl/getSubFrameCounter__9JASDriverFv.s"
}
#pragma pop


