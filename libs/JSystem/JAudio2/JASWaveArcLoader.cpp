// 
// Generated By: dol2asm
// Translation Unit: JASWaveArcLoader
// 

#include "dolphin/types.h"

// 
// Types:
// 

struct JASWaveArcLoader {
	/* 8029A0A0 */ void getRootHeap();
	/* 8029A0D0 */ void setCurrentDir(char const*);
	/* 8029A130 */ void getCurrentDir();
};

struct JASDisposer {
	/* 80290BCC */ void onDispose();
	/* 8029A7B8 */ ~JASDisposer();
};

struct JASHeap {
	/* 80290140 */ JASHeap(JASDisposer*);
	/* 8029021C */ void alloc(JASHeap*, u32);
	/* 802903F4 */ void allocTail(JASHeap*, u32);
	/* 802904E4 */ void free();
};

struct JASWaveArc {
	/* 80298FA0 */ void onLoadDone();
	/* 80298FA4 */ void onEraseDone();
	/* 8029A13C */ JASWaveArc();
	/* 8029A1B4 */ ~JASWaveArc();
	/* 8029A258 */ void loadSetup(u32);
	/* 8029A2EC */ void eraseSetup();
	/* 8029A378 */ void loadToAramCallback(void*);
	/* 8029A404 */ void sendLoadCmd();
	/* 8029A4C0 */ void load(JASHeap*);
	/* 8029A580 */ void loadTail(JASHeap*);
	/* 8029A640 */ void erase();
	/* 8029A664 */ void onDispose();
	/* 8029A6AC */ void setEntryNum(s32);
	/* 8029A70C */ void setFileName(char const*);
};

struct JASDvd {
	/* 8028FEFC */ void getThreadPointer();
};

struct JASKernel {
	/* 80290AC0 */ void getSystemHeap();
	/* 80290B08 */ void getAramHeap();
};

struct JKRHeap {
};

struct JKRExpandSwitch {
};

struct JKRDvdAramRipper {
	/* 802DA874 */ void loadToAram(s32, u32, JKRExpandSwitch, u32, u32, u32*);
};

struct JSUPtrLink {
	/* 802DBE14 */ ~JSUPtrLink();
};

struct JSUPtrList {
	/* 802DBEAC */ ~JSUPtrList();
};

// 
// Forward References:
// 


extern "C" void getRootHeap__16JASWaveArcLoaderFv(); // 1
extern "C" void setCurrentDir__16JASWaveArcLoaderFPCc(); // 1
extern "C" void getCurrentDir__16JASWaveArcLoaderFv(); // 1
extern "C" void __ct__10JASWaveArcFv(); // 1
extern "C" void __dt__10JASWaveArcFv(); // 1
extern "C" void loadSetup__10JASWaveArcFUl(); // 1
extern "C" void eraseSetup__10JASWaveArcFv(); // 1
extern "C" void loadToAramCallback__10JASWaveArcFPv(); // 1
extern "C" void sendLoadCmd__10JASWaveArcFv(); // 1
extern "C" void load__10JASWaveArcFP7JASHeap(); // 1
extern "C" void loadTail__10JASWaveArcFP7JASHeap(); // 1
extern "C" void erase__10JASWaveArcFv(); // 1
extern "C" void onDispose__10JASWaveArcFv(); // 1
extern "C" void setEntryNum__10JASWaveArcFl(); // 1
extern "C" void setFileName__10JASWaveArcFPCc(); // 1
extern "C" void __dt__11JASDisposerFv(); // 1
SECTION_DATA extern u8 sCurrentDir__16JASWaveArcLoader[64];
SECTION_DATA extern void* const __vt__10JASWaveArc[6];
SECTION_DATA extern void* const __vt__11JASDisposer[4];
SECTION_SBSS extern u8 sAramHeap__16JASWaveArcLoader[4 + 4 /* padding */];

// 
// External References:
// 

extern "C" void sendCmdMsg__13JASTaskThreadFPFPv_vPCvUl(); // 1
void* operator new[](u32, JKRHeap*, int); // 2
void operator delete(void*); // 2
void operator delete[](void*); // 2
extern "C" void OSInitMutex(); // 1
extern "C" void OSLockMutex(); // 1
extern "C" void OSUnlockMutex(); // 1
extern "C" void DVDConvertPathToEntrynum(); // 1
extern "C" void DVDFastOpen(); // 1
extern "C" void DVDClose(); // 1
extern "C" void _savegpr_27(); // 1
extern "C" void _restgpr_27(); // 1
extern "C" void strcat(); // 1
extern "C" void strcpy(); // 1
extern "C" void strlen(); // 1

extern "C" void sendCmdMsg__13JASTaskThreadFPFPv_vPCvUl(); // 1
extern "C" void getThreadPointer__6JASDvdFv(); // 1
extern "C" void __ct__7JASHeapFP11JASDisposer(); // 1
extern "C" void alloc__7JASHeapFP7JASHeapUl(); // 1
extern "C" void allocTail__7JASHeapFP7JASHeapUl(); // 1
extern "C" void free__7JASHeapFv(); // 1
extern "C" void getSystemHeap__9JASKernelFv(); // 1
extern "C" void getAramHeap__9JASKernelFv(); // 1
extern "C" void onDispose__11JASDisposerFv(); // 1
extern "C" void onLoadDone__10JASWaveArcFv(); // 1
extern "C" void onEraseDone__10JASWaveArcFv(); // 1
extern "C" void* __nwa__FUlP7JKRHeapi(); // 1
extern "C" void __dl__FPv(); // 1
extern "C" void __dla__FPv(); // 1
extern "C" void loadToAram__16JKRDvdAramRipperFlUl15JKRExpandSwitchUlUlPUl(); // 1
extern "C" void __dt__10JSUPtrLinkFv(); // 1
extern "C" void __dt__10JSUPtrListFv(); // 1
extern "C" void OSInitMutex(); // 1
extern "C" void OSLockMutex(); // 1
extern "C" void OSUnlockMutex(); // 1
extern "C" void DVDConvertPathToEntrynum(); // 1
extern "C" void DVDFastOpen(); // 1
extern "C" void DVDClose(); // 1
extern "C" void _savegpr_27(); // 1
extern "C" void _restgpr_27(); // 1
extern "C" void strcat(); // 1
extern "C" void strcpy(); // 1
extern "C" void strlen(); // 1

// 
// Declarations:
// 

/* ############################################################################################## */
/* 80451290-80451298 0004+04 rc=0 efc=0 .sbss      sAramHeap__16JASWaveArcLoader                                */
u8 sAramHeap__16JASWaveArcLoader[4 + 4 /* padding */];

/* 8029A0A0-8029A0D0 0030+00 rc=0 efc=0 .text      getRootHeap__16JASWaveArcLoaderFv                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JASWaveArcLoader::getRootHeap() {
	nofralloc
#include "asm/JSystem/JAudio2/JASWaveArcLoader/getRootHeap__16JASWaveArcLoaderFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 803C77E0-803C7820 0040+00 rc=0 efc=0 .data      sCurrentDir__16JASWaveArcLoader                              */
u8 sCurrentDir__16JASWaveArcLoader[64] = {
	0x2F, 0x41, 0x75, 0x64, 0x69, 0x6F, 0x52, 0x65, 0x73, 0x2F, 0x57, 0x61, 0x76, 0x65, 0x73, 0x2F,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 8029A0D0-8029A130 0060+00 rc=0 efc=0 .text      setCurrentDir__16JASWaveArcLoaderFPCc                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JASWaveArcLoader::setCurrentDir(char const* field_0) {
	nofralloc
#include "asm/JSystem/JAudio2/JASWaveArcLoader/setCurrentDir__16JASWaveArcLoaderFPCc.s"
}
#pragma pop


/* 8029A130-8029A13C 000C+00 rc=0 efc=0 .text      getCurrentDir__16JASWaveArcLoaderFv                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JASWaveArcLoader::getCurrentDir() {
	nofralloc
#include "asm/JSystem/JAudio2/JASWaveArcLoader/getCurrentDir__16JASWaveArcLoaderFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 803C7820-803C7838 0018+00 rc=0 efc=0 .data      __vt__10JASWaveArc                                           */
void* const __vt__10JASWaveArc[6] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__10JASWaveArcFv,
	(void*)onDispose__10JASWaveArcFv,
	(void*)onLoadDone__10JASWaveArcFv,
	(void*)onEraseDone__10JASWaveArcFv,
};

/* 803C7838-803C7848 0010+00 rc=0 efc=0 .data      __vt__11JASDisposer                                          */
void* const __vt__11JASDisposer[4] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__11JASDisposerFv,
	(void*)onDispose__11JASDisposerFv,
};

/* 8029A13C-8029A1B4 0078+00 rc=0 efc=0 .text      __ct__10JASWaveArcFv                                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm JASWaveArc::JASWaveArc() {
	nofralloc
#include "asm/JSystem/JAudio2/JASWaveArcLoader/__ct__10JASWaveArcFv.s"
}
#pragma pop


/* 8029A1B4-8029A258 00A4+00 rc=0 efc=0 .text      __dt__10JASWaveArcFv                                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm JASWaveArc::~JASWaveArc() {
	nofralloc
#include "asm/JSystem/JAudio2/JASWaveArcLoader/__dt__10JASWaveArcFv.s"
}
#pragma pop


/* 8029A258-8029A2EC 0094+00 rc=0 efc=0 .text      loadSetup__10JASWaveArcFUl                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JASWaveArc::loadSetup(u32 field_0) {
	nofralloc
#include "asm/JSystem/JAudio2/JASWaveArcLoader/loadSetup__10JASWaveArcFUl.s"
}
#pragma pop


/* 8029A2EC-8029A378 008C+00 rc=0 efc=0 .text      eraseSetup__10JASWaveArcFv                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JASWaveArc::eraseSetup() {
	nofralloc
#include "asm/JSystem/JAudio2/JASWaveArcLoader/eraseSetup__10JASWaveArcFv.s"
}
#pragma pop


/* 8029A378-8029A404 008C+00 rc=0 efc=0 .text      loadToAramCallback__10JASWaveArcFPv                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JASWaveArc::loadToAramCallback(void* field_0) {
	nofralloc
#include "asm/JSystem/JAudio2/JASWaveArcLoader/loadToAramCallback__10JASWaveArcFPv.s"
}
#pragma pop


/* 8029A404-8029A4C0 00BC+00 rc=0 efc=0 .text      sendLoadCmd__10JASWaveArcFv                                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JASWaveArc::sendLoadCmd() {
	nofralloc
#include "asm/JSystem/JAudio2/JASWaveArcLoader/sendLoadCmd__10JASWaveArcFv.s"
}
#pragma pop


/* 8029A4C0-8029A580 00C0+00 rc=0 efc=0 .text      load__10JASWaveArcFP7JASHeap                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JASWaveArc::load(JASHeap* field_0) {
	nofralloc
#include "asm/JSystem/JAudio2/JASWaveArcLoader/load__10JASWaveArcFP7JASHeap.s"
}
#pragma pop


/* 8029A580-8029A640 00C0+00 rc=0 efc=0 .text      loadTail__10JASWaveArcFP7JASHeap                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JASWaveArc::loadTail(JASHeap* field_0) {
	nofralloc
#include "asm/JSystem/JAudio2/JASWaveArcLoader/loadTail__10JASWaveArcFP7JASHeap.s"
}
#pragma pop


/* 8029A640-8029A664 0024+00 rc=0 efc=0 .text      erase__10JASWaveArcFv                                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JASWaveArc::erase() {
	nofralloc
#include "asm/JSystem/JAudio2/JASWaveArcLoader/erase__10JASWaveArcFv.s"
}
#pragma pop


/* 8029A664-8029A6AC 0048+00 rc=0 efc=0 .text      onDispose__10JASWaveArcFv                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JASWaveArc::onDispose() {
	nofralloc
#include "asm/JSystem/JAudio2/JASWaveArcLoader/onDispose__10JASWaveArcFv.s"
}
#pragma pop


/* 8029A6AC-8029A70C 0060+00 rc=0 efc=0 .text      setEntryNum__10JASWaveArcFl                                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JASWaveArc::setEntryNum(s32 field_0) {
	nofralloc
#include "asm/JSystem/JAudio2/JASWaveArcLoader/setEntryNum__10JASWaveArcFl.s"
}
#pragma pop


/* 8029A70C-8029A7B8 00AC+00 rc=0 efc=0 .text      setFileName__10JASWaveArcFPCc                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JASWaveArc::setFileName(char const* field_0) {
	nofralloc
#include "asm/JSystem/JAudio2/JASWaveArcLoader/setFileName__10JASWaveArcFPCc.s"
}
#pragma pop


/* 8029A7B8-8029A800 0048+00 rc=0 efc=0 .text      __dt__11JASDisposerFv                                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm JASDisposer::~JASDisposer() {
	nofralloc
#include "asm/JSystem/JAudio2/JASWaveArcLoader/__dt__11JASDisposerFv.s"
}
#pragma pop


