// 
// Generated By: dol2asm
// Translation Unit: JPAResource
// 

#include "dolphin/types.h"

// 
// Types:
// 

// build JPAResource (JPAResource) False/False
// build JPAEmitterWorkData (JPAEmitterWorkData) False/False
/* top-level dependencies (begin JPAEmitterWorkData) */
/* top-level dependencies (end JPAEmitterWorkData) */
struct JPAEmitterWorkData {
};

// build JKRHeap (JKRHeap) False/False
/* top-level dependencies (begin JKRHeap) */
/* top-level dependencies (end JKRHeap) */
struct JKRHeap {
	/* 802CE474 */ void alloc(u32, int, JKRHeap*);
};

// build JPABaseParticle (JPABaseParticle) False/False
// build JPAEmitterWorkData (JPAEmitterWorkData) True/True
/* top-level dependencies (begin JPABaseParticle) */
// outer dependency: JPAEmitterWorkData
/* top-level dependencies (end JPABaseParticle) */
struct JPABaseParticle {
	// JPAEmitterWorkData
	/* 8027FFD0 */ void calc_p(JPAEmitterWorkData*);
	/* 80280260 */ void calc_c(JPAEmitterWorkData*);
};

// build JPABaseEmitter (JPABaseEmitter) False/False
/* top-level dependencies (begin JPABaseEmitter) */
/* top-level dependencies (end JPABaseEmitter) */
struct JPABaseEmitter {
	/* 8027EDD4 */ void processTillStartFrame();
	/* 8027EE14 */ void processTermination();
};

/* top-level dependencies (begin JPAResource) */
// outer dependency: JPAEmitterWorkData
// outer dependency: JKRHeap
// outer dependency: JPABaseParticle
// outer dependency: JPABaseEmitter
/* top-level dependencies (end JPAResource) */
struct JPAResource {
	// JPAEmitterWorkData
	// JKRHeap
	// JPABaseParticle
	// JPABaseEmitter
	/* 80274010 */ JPAResource();
	/* 80274080 */ void init(JKRHeap*);
	/* 802755E8 */ void calc(JPAEmitterWorkData*, JPABaseEmitter*);
	/* 80275A94 */ void draw(JPAEmitterWorkData*, JPABaseEmitter*);
	/* 80275B74 */ void drawP(JPAEmitterWorkData*);
	/* 80275EB0 */ void drawC(JPAEmitterWorkData*);
	/* 802761A8 */ void setPTev();
	/* 8027642C */ void setCTev(JPAEmitterWorkData*);
	/* 8027658C */ void calc_p(JPAEmitterWorkData*, JPABaseParticle*);
	/* 80276608 */ void calc_c(JPAEmitterWorkData*, JPABaseParticle*);
	/* 80276684 */ void calcField(JPAEmitterWorkData*, JPABaseParticle*);
	/* 80276700 */ void calcKey(JPAEmitterWorkData*);
	/* 80276840 */ void calcWorkData_c(JPAEmitterWorkData*);
	/* 80276A0C */ void calcWorkData_d(JPAEmitterWorkData*);
};

// build JKRHeap (JKRHeap) True/True
// build JPAEmitterWorkData (JPAEmitterWorkData) True/True
// build JPABaseEmitter (JPABaseEmitter) True/True
// build JPABaseParticle (JPABaseParticle) True/True
// build JPAFieldBase (JPAFieldBase) False/False
// build JPAEmitterWorkData (JPAEmitterWorkData) True/True
// build JPAFieldBlock (JPAFieldBlock) False/False
/* top-level dependencies (begin JPAFieldBlock) */
/* top-level dependencies (end JPAFieldBlock) */
struct JPAFieldBlock {
};

/* top-level dependencies (begin JPAFieldBase) */
// outer dependency: JPAEmitterWorkData
// outer dependency: JPAFieldBlock
/* top-level dependencies (end JPAFieldBase) */
struct JPAFieldBase {
	// JPAEmitterWorkData
	// JPAFieldBlock
	/* 80276A8C */ void prepare(JPAEmitterWorkData*, JPAFieldBlock*);
};

// build JPAFieldBlock (JPAFieldBlock) True/True
// build JPABaseShape (JPABaseShape) False/False
// build JPAEmitterWorkData (JPAEmitterWorkData) True/True
/* top-level dependencies (begin JPABaseShape) */
// outer dependency: JPAEmitterWorkData
/* top-level dependencies (end JPABaseShape) */
struct JPABaseShape {
	// JPAEmitterWorkData
	/* 8027A7E8 */ void setGX(JPAEmitterWorkData*) const;
};

// build JPADynamicsBlock (JPADynamicsBlock) False/False
// build JPAEmitterWorkData (JPAEmitterWorkData) True/True
/* top-level dependencies (begin JPADynamicsBlock) */
// outer dependency: JPAEmitterWorkData
/* top-level dependencies (end JPADynamicsBlock) */
struct JPADynamicsBlock {
	// JPAEmitterWorkData
	/* 8027BBE8 */ void create(JPAEmitterWorkData*);
};

// build JPAKeyBlock (JPAKeyBlock) False/False
/* top-level dependencies (begin JPAKeyBlock) */
/* top-level dependencies (end JPAKeyBlock) */
struct JPAKeyBlock {
	/* 8027D740 */ void calc(f32);
};

// build JUTTexture (JUTTexture) False/False
// build _GXTexMapID (_GXTexMapID) False/False
/* top-level dependencies (begin _GXTexMapID) */
/* top-level dependencies (end _GXTexMapID) */
struct _GXTexMapID {
};

/* top-level dependencies (begin JUTTexture) */
// outer dependency: _GXTexMapID
/* top-level dependencies (end JUTTexture) */
struct JUTTexture {
	// _GXTexMapID
	/* 802DE840 */ void load(_GXTexMapID);
};

// build _GXTexMapID (_GXTexMapID) True/True
// 
// Forward References:
// 


extern "C" void __ct__11JPAResourceFv();
extern "C" void init__11JPAResourceFP7JKRHeap();
extern "C" void calc__11JPAResourceFP18JPAEmitterWorkDataP14JPABaseEmitter();
extern "C" void draw__11JPAResourceFP18JPAEmitterWorkDataP14JPABaseEmitter();
extern "C" void drawP__11JPAResourceFP18JPAEmitterWorkData();
extern "C" void drawC__11JPAResourceFP18JPAEmitterWorkData();
extern "C" void setPTev__11JPAResourceFv();
extern "C" void setCTev__11JPAResourceFP18JPAEmitterWorkData();
extern "C" void calc_p__11JPAResourceFP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void calc_c__11JPAResourceFP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void calcField__11JPAResourceFP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void calcKey__11JPAResourceFP18JPAEmitterWorkData();
extern "C" void calcWorkData_c__11JPAResourceFP18JPAEmitterWorkData();
extern "C" void calcWorkData_d__11JPAResourceFP18JPAEmitterWorkData();
extern "C" void prepare__12JPAFieldBaseFP18JPAEmitterWorkDataP13JPAFieldBlock();
SECTION_DATA extern u8 jpa_pos[324 + 28 /* padding */];
SECTION_DATA extern u8 jpa_crd[32];
SECTION_DATA extern void*lit_2829[11];
SECTION_DATA extern void*lit_2828[11];
SECTION_DATA extern void*lit_3454[18];
SECTION_SDATA2 extern f32 lit_3189;
SECTION_SDATA2 extern f32 lit_3190;
SECTION_SDATA2 extern f32 lit_3191;
SECTION_SDATA2 extern u8 lit_3192[4];
SECTION_SDATA2 extern f64 lit_3194;

// 
// External References:
// 

void JPASetPointSize(JPAEmitterWorkData*);
void JPASetLineWidth(JPAEmitterWorkData*);
void JPASetPointSize(JPAEmitterWorkData*, JPABaseParticle*);
void JPASetLineWidth(JPAEmitterWorkData*, JPABaseParticle*);
void JPARegistPrm(JPAEmitterWorkData*);
void JPARegistEnv(JPAEmitterWorkData*);
void JPARegistPrmEnv(JPAEmitterWorkData*);
void JPARegistAlpha(JPAEmitterWorkData*, JPABaseParticle*);
void JPARegistPrmAlpha(JPAEmitterWorkData*, JPABaseParticle*);
void JPARegistPrmAlphaEnv(JPAEmitterWorkData*, JPABaseParticle*);
void JPARegistAlphaEnv(JPAEmitterWorkData*, JPABaseParticle*);
void JPARegistEnv(JPAEmitterWorkData*, JPABaseParticle*);
void JPACalcClrIdxNormal(JPAEmitterWorkData*);
void JPACalcClrIdxNormal(JPAEmitterWorkData*, JPABaseParticle*);
void JPACalcClrIdxRepeat(JPAEmitterWorkData*);
void JPACalcClrIdxRepeat(JPAEmitterWorkData*, JPABaseParticle*);
void JPACalcClrIdxReverse(JPAEmitterWorkData*);
void JPACalcClrIdxReverse(JPAEmitterWorkData*, JPABaseParticle*);
void JPACalcClrIdxMerge(JPAEmitterWorkData*);
void JPACalcClrIdxMerge(JPAEmitterWorkData*, JPABaseParticle*);
void JPACalcClrIdxRandom(JPAEmitterWorkData*);
void JPACalcClrIdxRandom(JPAEmitterWorkData*, JPABaseParticle*);
void JPACalcPrm(JPAEmitterWorkData*);
void JPACalcPrm(JPAEmitterWorkData*, JPABaseParticle*);
void JPACalcEnv(JPAEmitterWorkData*);
void JPACalcEnv(JPAEmitterWorkData*, JPABaseParticle*);
void JPACalcColorCopy(JPAEmitterWorkData*, JPABaseParticle*);
void JPAGenTexCrdMtxIdt(JPAEmitterWorkData*);
void JPAGenTexCrdMtxAnm(JPAEmitterWorkData*);
void JPAGenTexCrdMtxPrj(JPAEmitterWorkData*);
void JPAGenCalcTexCrdMtxAnm(JPAEmitterWorkData*);
void JPALoadCalcTexCrdMtxAnm(JPAEmitterWorkData*, JPABaseParticle*);
void JPALoadTex(JPAEmitterWorkData*);
void JPALoadTexAnm(JPAEmitterWorkData*);
void JPALoadTexAnm(JPAEmitterWorkData*, JPABaseParticle*);
void JPACalcTexIdxNormal(JPAEmitterWorkData*);
void JPACalcTexIdxNormal(JPAEmitterWorkData*, JPABaseParticle*);
void JPACalcTexIdxRepeat(JPAEmitterWorkData*);
void JPACalcTexIdxRepeat(JPAEmitterWorkData*, JPABaseParticle*);
void JPACalcTexIdxReverse(JPAEmitterWorkData*);
void JPACalcTexIdxReverse(JPAEmitterWorkData*, JPABaseParticle*);
void JPACalcTexIdxMerge(JPAEmitterWorkData*);
void JPACalcTexIdxMerge(JPAEmitterWorkData*, JPABaseParticle*);
void JPACalcTexIdxRandom(JPAEmitterWorkData*);
void JPACalcTexIdxRandom(JPAEmitterWorkData*, JPABaseParticle*);
void JPALoadPosMtxCam(JPAEmitterWorkData*);
void JPADrawBillboard(JPAEmitterWorkData*, JPABaseParticle*);
void JPADrawRotBillboard(JPAEmitterWorkData*, JPABaseParticle*);
void JPADrawYBillboard(JPAEmitterWorkData*, JPABaseParticle*);
void JPADrawRotYBillboard(JPAEmitterWorkData*, JPABaseParticle*);
void JPADrawDirection(JPAEmitterWorkData*, JPABaseParticle*);
void JPADrawRotDirection(JPAEmitterWorkData*, JPABaseParticle*);
void JPADrawDBillboard(JPAEmitterWorkData*, JPABaseParticle*);
void JPADrawRotation(JPAEmitterWorkData*, JPABaseParticle*);
void JPADrawPoint(JPAEmitterWorkData*, JPABaseParticle*);
void JPADrawLine(JPAEmitterWorkData*, JPABaseParticle*);
void JPADrawStripe(JPAEmitterWorkData*);
void JPADrawStripeX(JPAEmitterWorkData*);
void JPADrawEmitterCallBackB(JPAEmitterWorkData*);
void JPADrawParticleCallBack(JPAEmitterWorkData*, JPABaseParticle*);
void JPACalcScaleX(JPAEmitterWorkData*, JPABaseParticle*);
void JPACalcScaleY(JPAEmitterWorkData*, JPABaseParticle*);
void JPACalcScaleCopy(JPAEmitterWorkData*, JPABaseParticle*);
void JPACalcScaleAnmNormal(JPAEmitterWorkData*, JPABaseParticle*);
void JPACalcScaleAnmRepeatX(JPAEmitterWorkData*, JPABaseParticle*);
void JPACalcScaleAnmRepeatY(JPAEmitterWorkData*, JPABaseParticle*);
void JPACalcScaleAnmReverseX(JPAEmitterWorkData*, JPABaseParticle*);
void JPACalcScaleAnmReverseY(JPAEmitterWorkData*, JPABaseParticle*);
void JPACalcAlphaAnm(JPAEmitterWorkData*, JPABaseParticle*);
void JPACalcAlphaFlickAnm(JPAEmitterWorkData*, JPABaseParticle*);
void JPARegistChildPrmEnv(JPAEmitterWorkData*);
void JPACalcChildAlphaOut(JPAEmitterWorkData*, JPABaseParticle*);
void JPACalcChildScaleOut(JPAEmitterWorkData*, JPABaseParticle*);
void JPALoadExTex(JPAEmitterWorkData*);
extern "C" void func_80280588();
void JPAGetXYZRotateMtx(s16, s16, s16, f32 (* )[4]);
extern "C" void PSMTXCopy();
extern "C" void PSMTXConcat();
extern "C" void PSMTXScale();
extern "C" void PSMTXMultVec();
extern "C" void PSMTXMultVecSR();
extern "C" void GXSetArray();
extern "C" void GXSetTexCoordGen2();
extern "C" void GXSetNumTexGens();
extern "C" void GXSetMisc();
extern "C" void GXSetTevIndirect();
extern "C" void GXSetIndTexMtx();
extern "C" void GXSetIndTexCoordScale();
extern "C" void GXSetIndTexOrder();
extern "C" void GXSetNumIndStages();
extern "C" void GXSetTevDirect();
extern "C" void GXSetTevColorIn();
extern "C" void GXSetTevAlphaIn();
extern "C" void GXSetTevColorOp();
extern "C" void GXSetTevAlphaOp();
extern "C" void GXSetTevOrder();
extern "C" void GXSetNumTevStages();
extern "C" void GXSetClipMode();
extern "C" void __save_gpr();
extern "C" void _savegpr_25();
extern "C" void _savegpr_27();
extern "C" void _savegpr_28();
extern "C" void __restore_gpr();
extern "C" void _restgpr_25();
extern "C" void _restgpr_27();
extern "C" void _restgpr_28();

extern "C" void JPASetPointSize__FP18JPAEmitterWorkData();
extern "C" void JPASetLineWidth__FP18JPAEmitterWorkData();
extern "C" void JPASetPointSize__FP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void JPASetLineWidth__FP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void JPARegistPrm__FP18JPAEmitterWorkData();
extern "C" void JPARegistEnv__FP18JPAEmitterWorkData();
extern "C" void JPARegistPrmEnv__FP18JPAEmitterWorkData();
extern "C" void JPARegistAlpha__FP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void JPARegistPrmAlpha__FP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void JPARegistPrmAlphaEnv__FP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void JPARegistAlphaEnv__FP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void JPARegistEnv__FP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void JPACalcClrIdxNormal__FP18JPAEmitterWorkData();
extern "C" void JPACalcClrIdxNormal__FP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void JPACalcClrIdxRepeat__FP18JPAEmitterWorkData();
extern "C" void JPACalcClrIdxRepeat__FP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void JPACalcClrIdxReverse__FP18JPAEmitterWorkData();
extern "C" void JPACalcClrIdxReverse__FP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void JPACalcClrIdxMerge__FP18JPAEmitterWorkData();
extern "C" void JPACalcClrIdxMerge__FP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void JPACalcClrIdxRandom__FP18JPAEmitterWorkData();
extern "C" void JPACalcClrIdxRandom__FP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void JPACalcPrm__FP18JPAEmitterWorkData();
extern "C" void JPACalcPrm__FP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void JPACalcEnv__FP18JPAEmitterWorkData();
extern "C" void JPACalcEnv__FP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void JPACalcColorCopy__FP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void JPAGenTexCrdMtxIdt__FP18JPAEmitterWorkData();
extern "C" void JPAGenTexCrdMtxAnm__FP18JPAEmitterWorkData();
extern "C" void JPAGenTexCrdMtxPrj__FP18JPAEmitterWorkData();
extern "C" void JPAGenCalcTexCrdMtxAnm__FP18JPAEmitterWorkData();
extern "C" void JPALoadCalcTexCrdMtxAnm__FP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void JPALoadTex__FP18JPAEmitterWorkData();
extern "C" void JPALoadTexAnm__FP18JPAEmitterWorkData();
extern "C" void JPALoadTexAnm__FP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void JPACalcTexIdxNormal__FP18JPAEmitterWorkData();
extern "C" void JPACalcTexIdxNormal__FP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void JPACalcTexIdxRepeat__FP18JPAEmitterWorkData();
extern "C" void JPACalcTexIdxRepeat__FP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void JPACalcTexIdxReverse__FP18JPAEmitterWorkData();
extern "C" void JPACalcTexIdxReverse__FP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void JPACalcTexIdxMerge__FP18JPAEmitterWorkData();
extern "C" void JPACalcTexIdxMerge__FP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void JPACalcTexIdxRandom__FP18JPAEmitterWorkData();
extern "C" void JPACalcTexIdxRandom__FP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void JPALoadPosMtxCam__FP18JPAEmitterWorkData();
extern "C" void JPADrawBillboard__FP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void JPADrawRotBillboard__FP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void JPADrawYBillboard__FP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void JPADrawRotYBillboard__FP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void JPADrawDirection__FP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void JPADrawRotDirection__FP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void JPADrawDBillboard__FP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void JPADrawRotation__FP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void JPADrawPoint__FP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void JPADrawLine__FP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void JPADrawStripe__FP18JPAEmitterWorkData();
extern "C" void JPADrawStripeX__FP18JPAEmitterWorkData();
extern "C" void JPADrawEmitterCallBackB__FP18JPAEmitterWorkData();
extern "C" void JPADrawParticleCallBack__FP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void setGX__12JPABaseShapeCFP18JPAEmitterWorkData();
extern "C" void JPACalcScaleX__FP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void JPACalcScaleY__FP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void JPACalcScaleCopy__FP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void JPACalcScaleAnmNormal__FP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void JPACalcScaleAnmRepeatX__FP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void JPACalcScaleAnmRepeatY__FP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void JPACalcScaleAnmReverseX__FP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void JPACalcScaleAnmReverseY__FP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void JPACalcAlphaAnm__FP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void JPACalcAlphaFlickAnm__FP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void JPARegistChildPrmEnv__FP18JPAEmitterWorkData();
extern "C" void JPACalcChildAlphaOut__FP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void JPACalcChildScaleOut__FP18JPAEmitterWorkDataP15JPABaseParticle();
extern "C" void JPALoadExTex__FP18JPAEmitterWorkData();
extern "C" void create__16JPADynamicsBlockFP18JPAEmitterWorkData();
extern "C" void calc__11JPAKeyBlockFf();
extern "C" void processTillStartFrame__14JPABaseEmitterFv();
extern "C" void processTermination__14JPABaseEmitterFv();
extern "C" void calc_p__15JPABaseParticleFP18JPAEmitterWorkData();
extern "C" void calc_c__15JPABaseParticleFP18JPAEmitterWorkData();
extern "C" void func_80280588();
extern "C" void JPAGetXYZRotateMtx__FsssPA4_f();
extern "C" void alloc__7JKRHeapFUliP7JKRHeap();
extern "C" void load__10JUTTextureF11_GXTexMapID();
extern "C" void PSMTXCopy();
extern "C" void PSMTXConcat();
extern "C" void PSMTXScale();
extern "C" void PSMTXMultVec();
extern "C" void PSMTXMultVecSR();
extern "C" void GXSetArray();
extern "C" void GXSetTexCoordGen2();
extern "C" void GXSetNumTexGens();
extern "C" void GXSetMisc();
extern "C" void GXSetTevIndirect();
extern "C" void GXSetIndTexMtx();
extern "C" void GXSetIndTexCoordScale();
extern "C" void GXSetIndTexOrder();
extern "C" void GXSetNumIndStages();
extern "C" void GXSetTevDirect();
extern "C" void GXSetTevColorIn();
extern "C" void GXSetTevAlphaIn();
extern "C" void GXSetTevColorOp();
extern "C" void GXSetTevAlphaOp();
extern "C" void GXSetTevOrder();
extern "C" void GXSetNumTevStages();
extern "C" void GXSetClipMode();
extern "C" void __save_gpr();
extern "C" void _savegpr_25();
extern "C" void _savegpr_27();
extern "C" void _savegpr_28();
extern "C" void __restore_gpr();
extern "C" void _restgpr_25();
extern "C" void _restgpr_27();
extern "C" void _restgpr_28();

// 
// Declarations:
// 

/* 80274010-80274080 0070+00 rc=1 efc=1 .text      __ct__11JPAResourceFv                                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm JPAResource::JPAResource() {
	nofralloc
#include "asm/JSystem/JParticle/JPAResource/__ct__11JPAResourceFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 803C40C0-803C4220 0144+1C rc=2 efc=0 .data      jpa_pos                                                      */
u8 jpa_pos[352] = {
	0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x32, 0xCE, 0x00, 0x00, 0xCE, 0x00, 0xE7, 0x00, 0x00, 0x19,
	0x00, 0x00, 0x19, 0xCE, 0x00, 0xE7, 0xCE, 0x00, 0xCE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCE,
	0x00, 0xCE, 0xCE, 0x00, 0x00, 0x19, 0x00, 0x32, 0x19, 0x00, 0x32, 0xE7, 0x00, 0x00, 0xE7, 0x00,
	0xE7, 0x19, 0x00, 0x19, 0x19, 0x00, 0x19, 0xE7, 0x00, 0xE7, 0xE7, 0x00, 0xCE, 0x19, 0x00, 0x00,
	0x19, 0x00, 0x00, 0xE7, 0x00, 0xCE, 0xE7, 0x00, 0x00, 0x32, 0x00, 0x32, 0x32, 0x00, 0x32, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xE7, 0x32, 0x00, 0x19, 0x32, 0x00, 0x19, 0x00, 0x00, 0xE7, 0x00, 0x00,
	0xCE, 0x32, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0xCE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32,
	0x00, 0x00, 0x32, 0x00, 0x32, 0x00, 0x00, 0x32, 0xE7, 0x00, 0x00, 0x19, 0x00, 0x00, 0x19, 0x00,
	0x32, 0xE7, 0x00, 0x32, 0xCE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0xCE, 0x00, 0x32,
	0x00, 0x00, 0xE7, 0x32, 0x00, 0xE7, 0x32, 0x00, 0x19, 0x00, 0x00, 0x19, 0xE7, 0x00, 0xE7, 0x19,
	0x00, 0xE7, 0x19, 0x00, 0x19, 0xE7, 0x00, 0x19, 0xCE, 0x00, 0xE7, 0x00, 0x00, 0xE7, 0x00, 0x00,
	0x19, 0xCE, 0x00, 0x19, 0x00, 0x00, 0xCE, 0x32, 0x00, 0xCE, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xE7, 0x00, 0xCE, 0x19, 0x00, 0xCE, 0x19, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xCE, 0x00, 0xCE, 0x00,
	0x00, 0xCE, 0x00, 0x00, 0x00, 0xCE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0xCE,
	0x32, 0x00, 0xCE, 0x00, 0x00, 0x00, 0xE7, 0x00, 0x00, 0x19, 0x00, 0xCE, 0x19, 0x00, 0xCE, 0xE7,
	0x00, 0x00, 0xCE, 0x00, 0x00, 0x00, 0x00, 0xCE, 0x00, 0x00, 0xCE, 0xCE, 0x00, 0x19, 0x00, 0x00,
	0x19, 0x32, 0x00, 0xE7, 0x32, 0x00, 0xE7, 0x00, 0x00, 0x19, 0xE7, 0x00, 0x19, 0x19, 0x00, 0xE7,
	0x19, 0x00, 0xE7, 0xE7, 0x00, 0x19, 0xCE, 0x00, 0x19, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xE7, 0xCE,
	0x00, 0x32, 0x00, 0x00, 0x32, 0x32, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x32, 0xE7, 0x00,
	0x32, 0x19, 0x00, 0x00, 0x19, 0x00, 0x00, 0xE7, 0x00, 0x32, 0xCE, 0x00, 0x32, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xCE,
	/* padding */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 803C4220-803C4240 0020+00 rc=2 efc=0 .data      jpa_crd                                                      */
u8 jpa_crd[32] = {
	0x00, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x02, 0x00, 0x02, 0x01, 0x00, 0x01,
	0x00, 0x00, 0x01, 0x00, 0x01, 0x02, 0x00, 0x02, 0x00, 0x00, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02,
};

/* 803C4240-803C426C 002C+00 rc=1 efc=0 .data      @2829                                                        */
void* lit_2829[11] = {
	(void*)(((char*)init__11JPAResourceFP7JKRHeap)+0x1488),
	(void*)(((char*)init__11JPAResourceFP7JKRHeap)+0x149C),
	(void*)(((char*)init__11JPAResourceFP7JKRHeap)+0x13D0),
	(void*)(((char*)init__11JPAResourceFP7JKRHeap)+0x1430),
	(void*)(((char*)init__11JPAResourceFP7JKRHeap)+0x1430),
	(void*)(((char*)init__11JPAResourceFP7JKRHeap)+0x14AC),
	(void*)(((char*)init__11JPAResourceFP7JKRHeap)+0x14AC),
	(void*)(((char*)init__11JPAResourceFP7JKRHeap)+0x1474),
	(void*)(((char*)init__11JPAResourceFP7JKRHeap)+0x1474),
	(void*)(((char*)init__11JPAResourceFP7JKRHeap)+0x1460),
	(void*)(((char*)init__11JPAResourceFP7JKRHeap)+0x1400),
};

/* 803C426C-803C4298 002C+00 rc=1 efc=0 .data      @2828                                                        */
void* lit_2828[11] = {
	(void*)(((char*)init__11JPAResourceFP7JKRHeap)+0x112C),
	(void*)(((char*)init__11JPAResourceFP7JKRHeap)+0x1140),
	(void*)(((char*)init__11JPAResourceFP7JKRHeap)+0x1074),
	(void*)(((char*)init__11JPAResourceFP7JKRHeap)+0x10D4),
	(void*)(((char*)init__11JPAResourceFP7JKRHeap)+0x10D4),
	(void*)(((char*)init__11JPAResourceFP7JKRHeap)+0x1150),
	(void*)(((char*)init__11JPAResourceFP7JKRHeap)+0x1150),
	(void*)(((char*)init__11JPAResourceFP7JKRHeap)+0x1118),
	(void*)(((char*)init__11JPAResourceFP7JKRHeap)+0x1118),
	(void*)(((char*)init__11JPAResourceFP7JKRHeap)+0x1104),
	(void*)(((char*)init__11JPAResourceFP7JKRHeap)+0x10A4),
};

/* 80274080-802755E8 1568+00 rc=3 efc=1 .text      init__11JPAResourceFP7JKRHeap                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JPAResource::init(JKRHeap* field_0) {
	nofralloc
#include "asm/JSystem/JParticle/JPAResource/init__11JPAResourceFP7JKRHeap.s"
}
#pragma pop


/* 802755E8-80275A94 04AC+00 rc=1 efc=1 .text      calc__11JPAResourceFP18JPAEmitterWorkDataP14JPABaseEmitter   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JPAResource::calc(JPAEmitterWorkData* field_0, JPABaseEmitter* field_1) {
	nofralloc
#include "asm/JSystem/JParticle/JPAResource/calc__11JPAResourceFP18JPAEmitterWorkDataP14JPABaseEmitter.s"
}
#pragma pop


/* 80275A94-80275B74 00E0+00 rc=1 efc=1 .text      draw__11JPAResourceFP18JPAEmitterWorkDataP14JPABaseEmitter   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JPAResource::draw(JPAEmitterWorkData* field_0, JPABaseEmitter* field_1) {
	nofralloc
#include "asm/JSystem/JParticle/JPAResource/draw__11JPAResourceFP18JPAEmitterWorkDataP14JPABaseEmitter.s"
}
#pragma pop


/* ############################################################################################## */
/* 80455290-80455294 0004+00 rc=2 efc=0 .sdata2    @3189                                                        */
f32 lit_3189 = 51.0f / 50.0f;

/* 80455294-80455298 0004+00 rc=2 efc=0 .sdata2    @3190                                                        */
f32 lit_3190 = 2.0f / 5.0f;

/* 80455298-8045529C 0004+00 rc=1 efc=0 .sdata2    @3191                                                        */
f32 lit_3191 = 1.0f;

/* 8045529C-804552A0 0004+00 rc=2 efc=0 .sdata2    @3192                                                        */
u8 lit_3192[4] = {
	0x00, 0x00, 0x00, 0x00,
};

/* 804552A0-804552A8 0008+00 rc=3 efc=0 .sdata2    @3194                                                        */
f64 lit_3194 = 4503599627370496.0 /* cast u32 to float */;

/* 80275B74-80275EB0 033C+00 rc=1 efc=0 .text      drawP__11JPAResourceFP18JPAEmitterWorkData                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JPAResource::drawP(JPAEmitterWorkData* field_0) {
	nofralloc
#include "asm/JSystem/JParticle/JPAResource/drawP__11JPAResourceFP18JPAEmitterWorkData.s"
}
#pragma pop


/* 80275EB0-802761A8 02F8+00 rc=1 efc=0 .text      drawC__11JPAResourceFP18JPAEmitterWorkData                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JPAResource::drawC(JPAEmitterWorkData* field_0) {
	nofralloc
#include "asm/JSystem/JParticle/JPAResource/drawC__11JPAResourceFP18JPAEmitterWorkData.s"
}
#pragma pop


/* 802761A8-8027642C 0284+00 rc=1 efc=0 .text      setPTev__11JPAResourceFv                                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JPAResource::setPTev() {
	nofralloc
#include "asm/JSystem/JParticle/JPAResource/setPTev__11JPAResourceFv.s"
}
#pragma pop


/* 8027642C-8027658C 0160+00 rc=1 efc=0 .text      setCTev__11JPAResourceFP18JPAEmitterWorkData                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JPAResource::setCTev(JPAEmitterWorkData* field_0) {
	nofralloc
#include "asm/JSystem/JParticle/JPAResource/setCTev__11JPAResourceFP18JPAEmitterWorkData.s"
}
#pragma pop


/* 8027658C-80276608 007C+00 rc=1 efc=1 .text      calc_p__11JPAResourceFP18JPAEmitterWorkDataP15JPABaseParticle */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JPAResource::calc_p(JPAEmitterWorkData* field_0, JPABaseParticle* field_1) {
	nofralloc
#include "asm/JSystem/JParticle/JPAResource/calc_p__11JPAResourceFP18JPAEmitterWorkDataP15JPABaseParticle.s"
}
#pragma pop


/* 80276608-80276684 007C+00 rc=1 efc=1 .text      calc_c__11JPAResourceFP18JPAEmitterWorkDataP15JPABaseParticle */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JPAResource::calc_c(JPAEmitterWorkData* field_0, JPABaseParticle* field_1) {
	nofralloc
#include "asm/JSystem/JParticle/JPAResource/calc_c__11JPAResourceFP18JPAEmitterWorkDataP15JPABaseParticle.s"
}
#pragma pop


/* 80276684-80276700 007C+00 rc=2 efc=2 .text      calcField__11JPAResourceFP18JPAEmitterWorkDataP15JPABaseParticle */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JPAResource::calcField(JPAEmitterWorkData* field_0, JPABaseParticle* field_1) {
	nofralloc
#include "asm/JSystem/JParticle/JPAResource/calcField__11JPAResourceFP18JPAEmitterWorkDataP15JPABaseParticle.s"
}
#pragma pop


/* ############################################################################################## */
/* 803C4298-803C42E0 002C+1C rc=1 efc=0 .data      @3454                                                        */
void* lit_3454[18] = {
	(void*)(((char*)calcKey__11JPAResourceFP18JPAEmitterWorkData)+0x90),
	(void*)(((char*)calcKey__11JPAResourceFP18JPAEmitterWorkData)+0x9C),
	(void*)(((char*)calcKey__11JPAResourceFP18JPAEmitterWorkData)+0x110),
	(void*)(((char*)calcKey__11JPAResourceFP18JPAEmitterWorkData)+0xB4),
	(void*)(((char*)calcKey__11JPAResourceFP18JPAEmitterWorkData)+0xC0),
	(void*)(((char*)calcKey__11JPAResourceFP18JPAEmitterWorkData)+0x110),
	(void*)(((char*)calcKey__11JPAResourceFP18JPAEmitterWorkData)+0xD8),
	(void*)(((char*)calcKey__11JPAResourceFP18JPAEmitterWorkData)+0xE4),
	(void*)(((char*)calcKey__11JPAResourceFP18JPAEmitterWorkData)+0xF0),
	(void*)(((char*)calcKey__11JPAResourceFP18JPAEmitterWorkData)+0xFC),
	(void*)(((char*)calcKey__11JPAResourceFP18JPAEmitterWorkData)+0x108),
	/* padding */
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
};

/* 80276700-80276840 0140+00 rc=2 efc=0 .text      calcKey__11JPAResourceFP18JPAEmitterWorkData                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JPAResource::calcKey(JPAEmitterWorkData* field_0) {
	nofralloc
#include "asm/JSystem/JParticle/JPAResource/calcKey__11JPAResourceFP18JPAEmitterWorkData.s"
}
#pragma pop


/* 80276840-80276A0C 01CC+00 rc=1 efc=0 .text      calcWorkData_c__11JPAResourceFP18JPAEmitterWorkData          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JPAResource::calcWorkData_c(JPAEmitterWorkData* field_0) {
	nofralloc
#include "asm/JSystem/JParticle/JPAResource/calcWorkData_c__11JPAResourceFP18JPAEmitterWorkData.s"
}
#pragma pop


/* 80276A0C-80276A8C 0080+00 rc=1 efc=0 .text      calcWorkData_d__11JPAResourceFP18JPAEmitterWorkData          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JPAResource::calcWorkData_d(JPAEmitterWorkData* field_0) {
	nofralloc
#include "asm/JSystem/JParticle/JPAResource/calcWorkData_d__11JPAResourceFP18JPAEmitterWorkData.s"
}
#pragma pop


/* 80276A8C-80276A90 0004+00 rc=3 efc=3 .text      prepare__12JPAFieldBaseFP18JPAEmitterWorkDataP13JPAFieldBlock */
void JPAFieldBase::prepare(JPAEmitterWorkData* field_0, JPAFieldBlock* field_1) {
	/* empty function */
}


