// 
// Generated By: dol2asm
// Translation Unit: JPAResourceManager
// 

#include "dolphin/types.h"

// 
// Types:
// 

struct ResTIMG {
};

struct JPATexture {
};

struct JKRHeap {
};

struct JPAResource {
};

struct JPAResourceManager {
	/* 80273E10 */ JPAResourceManager(void const*, JKRHeap*);
	/* 80273E68 */ void getResource(u16) const;
	/* 80273EA8 */ void checkUserIndexDuplication(u16) const;
	/* 80273EEC */ void swapTexture(ResTIMG const*, char const*);
	/* 80273F8C */ void registRes(JPAResource*);
	/* 80273FAC */ void registTex(JPATexture*);
	/* 80273FCC */ void getResUserWork(u16) const;
};

struct JPAResourceLoader {
	/* 8027D8A0 */ JPAResourceLoader(u8 const*, JPAResourceManager*);
};

struct JUTTexture {
	/* 802DE2A8 */ void storeTIMG(ResTIMG const*, u8);
};

// 
// Forward References:
// 


extern "C" void __ct__18JPAResourceManagerFPCvP7JKRHeap(); // 1
extern "C" void getResource__18JPAResourceManagerCFUs(); // 1
extern "C" void checkUserIndexDuplication__18JPAResourceManagerCFUs(); // 1
extern "C" void swapTexture__18JPAResourceManagerFPC7ResTIMGPCc(); // 1
extern "C" void registRes__18JPAResourceManagerFP11JPAResource(); // 1
extern "C" void registTex__18JPAResourceManagerFP10JPATexture(); // 1
extern "C" void getResUserWork__18JPAResourceManagerCFUs(); // 1

// 
// External References:
// 

extern "C" void _savegpr_26(); // 1
extern "C" void _restgpr_26(); // 1
extern "C" void strcmp(); // 1

extern "C" void __ct__17JPAResourceLoaderFPCUcP18JPAResourceManager(); // 1
extern "C" void storeTIMG__10JUTTextureFPC7ResTIMGUc(); // 1
extern "C" void _savegpr_26(); // 1
extern "C" void _restgpr_26(); // 1
extern "C" void strcmp(); // 1

// 
// Declarations:
// 

/* 80273E10-80273E68 0058+00 rc=0 efc=0 .text      __ct__18JPAResourceManagerFPCvP7JKRHeap                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm JPAResourceManager::JPAResourceManager(void const* field_0, JKRHeap* field_1) {
	nofralloc
#include "asm/JSystem/JParticle/JPAResourceManager/__ct__18JPAResourceManagerFPCvP7JKRHeap.s"
}
#pragma pop


/* 80273E68-80273EA8 0040+00 rc=0 efc=0 .text      getResource__18JPAResourceManagerCFUs                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JPAResourceManager::getResource(u16 field_0) const {
	nofralloc
#include "asm/JSystem/JParticle/JPAResourceManager/getResource__18JPAResourceManagerCFUs.s"
}
#pragma pop


/* 80273EA8-80273EEC 0044+00 rc=0 efc=0 .text      checkUserIndexDuplication__18JPAResourceManagerCFUs          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JPAResourceManager::checkUserIndexDuplication(u16 field_0) const {
	nofralloc
#include "asm/JSystem/JParticle/JPAResourceManager/checkUserIndexDuplication__18JPAResourceManagerCFUs.s"
}
#pragma pop


/* 80273EEC-80273F8C 00A0+00 rc=0 efc=0 .text      swapTexture__18JPAResourceManagerFPC7ResTIMGPCc              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JPAResourceManager::swapTexture(ResTIMG const* field_0, char const* field_1) {
	nofralloc
#include "asm/JSystem/JParticle/JPAResourceManager/swapTexture__18JPAResourceManagerFPC7ResTIMGPCc.s"
}
#pragma pop


/* 80273F8C-80273FAC 0020+00 rc=0 efc=0 .text      registRes__18JPAResourceManagerFP11JPAResource               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JPAResourceManager::registRes(JPAResource* field_0) {
	nofralloc
#include "asm/JSystem/JParticle/JPAResourceManager/registRes__18JPAResourceManagerFP11JPAResource.s"
}
#pragma pop


/* 80273FAC-80273FCC 0020+00 rc=0 efc=0 .text      registTex__18JPAResourceManagerFP10JPATexture                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JPAResourceManager::registTex(JPATexture* field_0) {
	nofralloc
#include "asm/JSystem/JParticle/JPAResourceManager/registTex__18JPAResourceManagerFP10JPATexture.s"
}
#pragma pop


/* 80273FCC-80274010 0044+00 rc=0 efc=0 .text      getResUserWork__18JPAResourceManagerCFUs                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JPAResourceManager::getResUserWork(u16 field_0) const {
	nofralloc
#include "asm/JSystem/JParticle/JPAResourceManager/getResUserWork__18JPAResourceManagerCFUs.s"
}
#pragma pop


