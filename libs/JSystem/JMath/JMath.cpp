// 
// Generated By: dol2asm
// Translation Unit: JMath
// 

#include "dolphin/types.h"

// 
// Types:
// 

struct Quaternion {
};

struct Vec {
};

// 
// Forward References:
// 

void JMAEulerToQuat(s16, s16, s16, Quaternion*); // 2
void JMAQuatLerp(Quaternion const*, Quaternion const*, f32, Quaternion*); // 2
void JMAFastVECNormalize(Vec const*, Vec*); // 2
void JMAVECScaleAdd(Vec const*, Vec const*, Vec*, f32); // 2
void JMAMTXApplyScale(f32 const (* )[4], f32 (* )[4], f32, f32, f32); // 2

extern "C" void JMAEulerToQuat__FsssP10Quaternion(); // 1
extern "C" void JMAQuatLerp__FPC10QuaternionPC10QuaternionfP10Quaternion(); // 1
extern "C" void JMAFastVECNormalize__FPC3VecP3Vec(); // 1
extern "C" void JMAVECScaleAdd__FPC3VecPC3VecP3Vecf(); // 1
extern "C" void JMAMTXApplyScale__FPA4_CfPA4_ffff(); // 1
SECTION_SDATA2 extern u8 JMath__lit_376[8];
SECTION_SDATA2 extern f32 lit_411[1 + 1 /* padding */];

// 
// External References:
// 


SECTION_BSS extern u8 sincosTable___5JMath[65536];

// 
// Declarations:
// 

/* 80339878-80339938 00C0+00 rc=0 efc=0 .text      JMAEulerToQuat__FsssP10Quaternion                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JMAEulerToQuat(s16 field_0, s16 field_1, s16 field_2, Quaternion* field_3) {
	nofralloc
#include "asm/JSystem/JMath/JMath/JMAEulerToQuat__FsssP10Quaternion.s"
}
#pragma pop


/* ############################################################################################## */
/* 804564C8-804564D0 0008+00 rc=0 efc=0 .sdata2    @376                                                         */
u8 JMath__lit_376[8] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 80339938-80339A30 00F8+00 rc=0 efc=0 .text      JMAQuatLerp__FPC10QuaternionPC10QuaternionfP10Quaternion     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JMAQuatLerp(Quaternion const* field_0, Quaternion const* field_1, f32 field_2, Quaternion* field_3) {
	nofralloc
#include "asm/JSystem/JMath/JMath/JMAQuatLerp__FPC10QuaternionPC10QuaternionfP10Quaternion.s"
}
#pragma pop


/* 80339A30-80339A5C 002C+00 rc=0 efc=0 .text      JMAFastVECNormalize__FPC3VecP3Vec                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JMAFastVECNormalize(Vec const* field_0, Vec* field_1) {
	nofralloc
#include "asm/JSystem/JMath/JMath/JMAFastVECNormalize__FPC3VecP3Vec.s"
}
#pragma pop


/* 80339A5C-80339A84 0028+00 rc=0 efc=0 .text      JMAVECScaleAdd__FPC3VecPC3VecP3Vecf                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JMAVECScaleAdd(Vec const* field_0, Vec const* field_1, Vec* field_2, f32 field_3) {
	nofralloc
#include "asm/JSystem/JMath/JMath/JMAVECScaleAdd__FPC3VecPC3VecP3Vecf.s"
}
#pragma pop


/* ############################################################################################## */
/* 804564D0-804564D8 0004+04 rc=0 efc=0 .sdata2    @411                                                         */
f32 lit_411[1 + 1 /* padding */] = {
	1.0f,
	/* padding */
	0.0f,
};

/* 80339A84-80339AE4 0060+00 rc=0 efc=0 .text      JMAMTXApplyScale__FPA4_CfPA4_ffff                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JMAMTXApplyScale(f32 const (* field_0)[4], f32 (* field_1)[4], f32 field_2, f32 field_3, f32 field_4) {
	nofralloc
#include "asm/JSystem/JMath/JMath/JMAMTXApplyScale__FPA4_CfPA4_ffff.s"
}
#pragma pop


