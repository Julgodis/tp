// 
// Generated By: dol2asm
// Translation Unit: JUTCacheFont
// 

#include "dolphin/types.h"

// 
// Types:
// 

struct _GXTexMapID {
};

struct ResFONT {
};

struct JKRHeap {
};

struct JUTCacheFont {
	struct TGlyphCacheInfo {
	};

	struct TCachePage {
	};

	/* 802DD188 */ JUTCacheFont(ResFONT const*, u32, JKRHeap*);
	/* 802DD208 */ ~JUTCacheFont();
	/* 802DD29C */ void deleteMemBlocks_CacheFont();
	/* 802DD320 */ void initialize_state();
	/* 802DD35C */ void getMemorySize(ResFONT const*, u16*, u32*, u16*, u32*, u16*, u32*, u32*);
	/* 802DD4EC */ void initiate(ResFONT const*, void*, u32, JKRHeap*);
	/* 802DD54C */ void internal_initiate(ResFONT const*, void*, u32, JKRHeap*);
	/* 802DD650 */ void allocArea(void*, u32, JKRHeap*);
	/* 802DD804 */ void allocArray(JKRHeap*);
	/* 802DD8EC */ void setBlock();
	/* 802DDB0C */ void determineBlankPage();
	/* 802DDBBC */ void getGlyphFromAram(JUTCacheFont::TGlyphCacheInfo*, JUTCacheFont::TCachePage*, int*, int*);
	/* 802DDCE4 */ void loadImage(int, _GXTexMapID);
	/* 802DDD98 */ void loadCache_char_subroutine(int*, bool);
	/* 802DDEE0 */ void invalidiateAllCache();
	/* 802DDF68 */ void unlink(JUTCacheFont::TGlyphCacheInfo*);
	/* 802DDFAC */ void prepend(JUTCacheFont::TGlyphCacheInfo*);
};

struct JUTFont {
	struct TWidth {
	};

	/* 802DED24 */ void initialize_state();
};

struct JUtility {
	struct TColor {
	};

};

struct JUTResFont {
	/* 802DDFD8 */ void getResFont() const;
	/* 802DDFE0 */ void getFontType() const;
	/* 802DDFEC */ void getLeading() const;
	/* 802DDFF8 */ void getWidth() const;
	/* 802DE004 */ void getAscent() const;
	/* 802DE010 */ void getDescent() const;
	/* 802DE01C */ void getHeight() const;
	/* 802DEF48 */ JUTResFont();
	/* 802DF000 */ ~JUTResFont();
	/* 802DF08C */ void deleteMemBlocks_ResFont();
	/* 802DF0B0 */ void initialize_state();
	/* 802DF584 */ void setGX(JUtility::TColor, JUtility::TColor);
	/* 802DF48C */ void setGX();
	/* 802DF7C4 */ void drawChar_scale(f32, f32, f32, f32, int, bool);
	/* 802DFC64 */ void getWidthEntry(int, JUTFont::TWidth*) const;
	/* 802DFD0C */ void getCellWidth() const;
	/* 802DFD58 */ void getCellHeight() const;
	/* 802DFDA4 */ void isLeadByte(int) const;
};

struct JKRExpandSwitch {
};

struct JKRAram {
	/* 802D233C */ void mainRamToAram(u8*, u32, u32, JKRExpandSwitch, u32, JKRHeap*, int, u32*);
	/* 802D25B4 */ void aramToMainRam(u32, u8*, u32, JKRExpandSwitch, u32, JKRHeap*, int, u32*);
};

struct JKRAramHeap {
	struct EAllocMode {
	};

	/* 802D2FBC */ void alloc(u32, JKRAramHeap::EAllocMode);
};

struct JUTException {
	/* 802E21FC */ void panic_f(char const*, int, char const*, ...);
};

// 
// Forward References:
// 


extern "C" void __ct__12JUTCacheFontFPC7ResFONTUlP7JKRHeap(); // 1
extern "C" void __dt__12JUTCacheFontFv(); // 1
extern "C" void deleteMemBlocks_CacheFont__12JUTCacheFontFv(); // 1
extern "C" void initialize_state__12JUTCacheFontFv(); // 1
extern "C" void getMemorySize__12JUTCacheFontFPC7ResFONTPUsPUlPUsPUlPUsPUlPUl(); // 1
extern "C" void initiate__12JUTCacheFontFPC7ResFONTPvUlP7JKRHeap(); // 1
extern "C" void internal_initiate__12JUTCacheFontFPC7ResFONTPvUlP7JKRHeap(); // 1
extern "C" void allocArea__12JUTCacheFontFPvUlP7JKRHeap(); // 1
extern "C" void allocArray__12JUTCacheFontFP7JKRHeap(); // 1
extern "C" void setBlock__12JUTCacheFontFv(); // 1
extern "C" void determineBlankPage__12JUTCacheFontFv(); // 1
extern "C" void getGlyphFromAram__12JUTCacheFontFPQ212JUTCacheFont15TGlyphCacheInfoPQ212JUTCacheFont10TCachePagePiPi(); // 1
extern "C" void loadImage__12JUTCacheFontFi11_GXTexMapID(); // 1
extern "C" void loadCache_char_subroutine__12JUTCacheFontFPib(); // 1
extern "C" void invalidiateAllCache__12JUTCacheFontFv(); // 1
extern "C" void unlink__12JUTCacheFontFPQ212JUTCacheFont15TGlyphCacheInfo(); // 1
extern "C" void prepend__12JUTCacheFontFPQ212JUTCacheFont15TGlyphCacheInfo(); // 1
extern "C" void getResFont__10JUTResFontCFv(); // 1
extern "C" void getFontType__10JUTResFontCFv(); // 1
extern "C" void getLeading__10JUTResFontCFv(); // 1
extern "C" void getWidth__10JUTResFontCFv(); // 1
extern "C" void getAscent__10JUTResFontCFv(); // 1
extern "C" void getDescent__10JUTResFontCFv(); // 1
extern "C" void getHeight__10JUTResFontCFv(); // 1
extern "C" extern char const* const JUTCacheFont__stringBase0;

// 
// External References:
// 

SECTION_INIT void memcpy(); // 1
void* operator new(u32, JKRHeap*, int); // 2
void* operator new[](u32, JKRHeap*, int); // 2
void operator delete(void*); // 2
void operator delete[](void*); // 2
extern "C" void JUTReportConsole(); // 1
extern "C" void GXInitTexObj(); // 1
extern "C" void GXInitTexObjLOD(); // 1
extern "C" void GXLoadTexObj(); // 1
extern "C" void __save_gpr(); // 1
extern "C" void _savegpr_21(); // 1
extern "C" void _savegpr_27(); // 1
extern "C" void _savegpr_28(); // 1
extern "C" void _savegpr_29(); // 1
extern "C" void __restore_gpr(); // 1
extern "C" void _restgpr_21(); // 1
extern "C" void _restgpr_27(); // 1
extern "C" void _restgpr_28(); // 1
extern "C" void _restgpr_29(); // 1

SECTION_INIT void memcpy(); // 1
extern "C" void* __nw__FUlP7JKRHeapi(); // 1
extern "C" void* __nwa__FUlP7JKRHeapi(); // 1
extern "C" void __dl__FPv(); // 1
extern "C" void __dla__FPv(); // 1
extern "C" void mainRamToAram__7JKRAramFPUcUlUl15JKRExpandSwitchUlP7JKRHeapiPUl(); // 1
extern "C" void aramToMainRam__7JKRAramFUlPUcUl15JKRExpandSwitchUlP7JKRHeapiPUl(); // 1
extern "C" void alloc__11JKRAramHeapFUlQ211JKRAramHeap10EAllocMode(); // 1
extern "C" void initialize_state__7JUTFontFv(); // 1
extern "C" void __ct__10JUTResFontFv(); // 1
extern "C" void __dt__10JUTResFontFv(); // 1
extern "C" void deleteMemBlocks_ResFont__10JUTResFontFv(); // 1
extern "C" void initialize_state__10JUTResFontFv(); // 1
extern "C" void setGX__10JUTResFontFv(); // 1
extern "C" void setGX__10JUTResFontFQ28JUtility6TColorQ28JUtility6TColor(); // 1
extern "C" void drawChar_scale__10JUTResFontFffffib(); // 1
extern "C" void getWidthEntry__10JUTResFontCFiPQ27JUTFont6TWidth(); // 1
extern "C" void getCellWidth__10JUTResFontCFv(); // 1
extern "C" void getCellHeight__10JUTResFontCFv(); // 1
extern "C" void isLeadByte__10JUTResFontCFi(); // 1
extern "C" void panic_f__12JUTExceptionFPCciPCce(); // 1
extern "C" void JUTReportConsole(); // 1
extern "C" void GXInitTexObj(); // 1
extern "C" void GXInitTexObjLOD(); // 1
extern "C" void GXLoadTexObj(); // 1
extern "C" void __save_gpr(); // 1
extern "C" void _savegpr_21(); // 1
extern "C" void _savegpr_27(); // 1
extern "C" void _savegpr_28(); // 1
extern "C" void _savegpr_29(); // 1
extern "C" void __restore_gpr(); // 1
extern "C" void _restgpr_21(); // 1
extern "C" void _restgpr_27(); // 1
extern "C" void _restgpr_28(); // 1
extern "C" void _restgpr_29(); // 1
extern "C" extern void* const saoAboutEncoding___10JUTResFont[3];
extern "C" extern u8 sAramObject__7JKRAram[4];

// 
// Declarations:
// 

/* ############################################################################################## */
/* 803CC540-803CC590 004C+04 rc=2 efc=0 rfr=False None .data      __vt__12JUTCacheFont                                         */
SECTION_DATA static void* __vt__12JUTCacheFont[19 + 1 /* padding */] = {
	/* 0    */ (void*)NULL /* RTTI */,
	/* 1    */ (void*)NULL,
	/* 2    */ (void*)__dt__12JUTCacheFontFv,
	/* 3    */ (void*)setGX__10JUTResFontFv,
	/* 4    */ (void*)setGX__10JUTResFontFQ28JUtility6TColorQ28JUtility6TColor,
	/* 5    */ (void*)drawChar_scale__10JUTResFontFffffib,
	/* 6    */ (void*)getLeading__10JUTResFontCFv,
	/* 7    */ (void*)getAscent__10JUTResFontCFv,
	/* 8    */ (void*)getDescent__10JUTResFontCFv,
	/* 9    */ (void*)getHeight__10JUTResFontCFv,
	/* 10   */ (void*)getWidth__10JUTResFontCFv,
	/* 11   */ (void*)getWidthEntry__10JUTResFontCFiPQ27JUTFont6TWidth,
	/* 12   */ (void*)getCellWidth__10JUTResFontCFv,
	/* 13   */ (void*)getCellHeight__10JUTResFontCFv,
	/* 14   */ (void*)getFontType__10JUTResFontCFv,
	/* 15   */ (void*)getResFont__10JUTResFontCFv,
	/* 16   */ (void*)isLeadByte__10JUTResFontCFi,
	/* 17   */ (void*)loadImage__12JUTCacheFontFi11_GXTexMapID,
	/* 18   */ (void*)setBlock__12JUTCacheFontFv,
	/* padding */
	NULL,
};

/* 802DD188-802DD208 0080+00 rc=1 efc=1 rfr=False None .text      __ct__12JUTCacheFontFPC7ResFONTUlP7JKRHeap                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm JUTCacheFont::JUTCacheFont(ResFONT const* field_0, u32 field_1, JKRHeap* field_2) {
	nofralloc
#include "asm/JSystem/JUtility/JUTCacheFont/__ct__12JUTCacheFontFPC7ResFONTUlP7JKRHeap.s"
}
#pragma pop


/* 802DD208-802DD29C 0094+00 rc=1 efc=0 rfr=False None .text      __dt__12JUTCacheFontFv                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm JUTCacheFont::~JUTCacheFont() {
	nofralloc
#include "asm/JSystem/JUtility/JUTCacheFont/__dt__12JUTCacheFontFv.s"
}
#pragma pop


/* 802DD29C-802DD320 0084+00 rc=3 efc=0 rfr=False None .text      deleteMemBlocks_CacheFont__12JUTCacheFontFv                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JUTCacheFont::deleteMemBlocks_CacheFont() {
	nofralloc
#include "asm/JSystem/JUtility/JUTCacheFont/deleteMemBlocks_CacheFont__12JUTCacheFontFv.s"
}
#pragma pop


/* 802DD320-802DD35C 003C+00 rc=3 efc=0 rfr=False None .text      initialize_state__12JUTCacheFontFv                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JUTCacheFont::initialize_state() {
	nofralloc
#include "asm/JSystem/JUtility/JUTCacheFont/initialize_state__12JUTCacheFontFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 8039D2F0-8039D360 0070+00 rc=2 efc=0 rfr=False None .rodata    @stringBase0                                                 */
#pragma push
#pragma force_active on
#pragma section ".dead"
SECTION_DEAD static char const* const stringBase_8039D2F0 = 
    "JUTCacheFont: Unknown data block\n";
SECTION_DEAD static char const* const stringBase_8039D312 = "JUTCacheFont.cpp";
SECTION_DEAD static char const* const stringBase_8039D323 = "%s";
SECTION_DEAD static char const* const stringBase_8039D326 = 
    "trouble occurred in JKRMainRamToAram.";
SECTION_DEAD static char const* const stringBase_8039D34C = "Unknown data block\n";
#pragma pop

/* 802DD35C-802DD4EC 0190+00 rc=1 efc=0 rfr=False None .text      getMemorySize__12JUTCacheFontFPC7ResFONTPUsPUlPUsPUlPUsPUlPUl */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JUTCacheFont::getMemorySize(ResFONT const* field_0, u16* field_1, u32* field_2, u16* field_3, u32* field_4, u16* field_5, u32* field_6, u32* field_7) {
	nofralloc
#include "asm/JSystem/JUtility/JUTCacheFont/getMemorySize__12JUTCacheFontFPC7ResFONTPUsPUlPUsPUlPUsPUlPUl.s"
}
#pragma pop


/* 802DD4EC-802DD54C 0060+00 rc=1 efc=0 rfr=False None .text      initiate__12JUTCacheFontFPC7ResFONTPvUlP7JKRHeap             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JUTCacheFont::initiate(ResFONT const* field_0, void* field_1, u32 field_2, JKRHeap* field_3) {
	nofralloc
#include "asm/JSystem/JUtility/JUTCacheFont/initiate__12JUTCacheFontFPC7ResFONTPvUlP7JKRHeap.s"
}
#pragma pop


/* 802DD54C-802DD650 0104+00 rc=1 efc=0 rfr=False None .text      internal_initiate__12JUTCacheFontFPC7ResFONTPvUlP7JKRHeap    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JUTCacheFont::internal_initiate(ResFONT const* field_0, void* field_1, u32 field_2, JKRHeap* field_3) {
	nofralloc
#include "asm/JSystem/JUtility/JUTCacheFont/internal_initiate__12JUTCacheFontFPC7ResFONTPvUlP7JKRHeap.s"
}
#pragma pop


/* 802DD650-802DD804 01B4+00 rc=1 efc=0 rfr=False None .text      allocArea__12JUTCacheFontFPvUlP7JKRHeap                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JUTCacheFont::allocArea(void* field_0, u32 field_1, JKRHeap* field_2) {
	nofralloc
#include "asm/JSystem/JUtility/JUTCacheFont/allocArea__12JUTCacheFontFPvUlP7JKRHeap.s"
}
#pragma pop


/* 802DD804-802DD8EC 00E8+00 rc=1 efc=0 rfr=False None .text      allocArray__12JUTCacheFontFP7JKRHeap                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JUTCacheFont::allocArray(JKRHeap* field_0) {
	nofralloc
#include "asm/JSystem/JUtility/JUTCacheFont/allocArray__12JUTCacheFontFP7JKRHeap.s"
}
#pragma pop


/* 802DD8EC-802DDB0C 0220+00 rc=1 efc=0 rfr=False None .text      setBlock__12JUTCacheFontFv                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JUTCacheFont::setBlock() {
	nofralloc
#include "asm/JSystem/JUtility/JUTCacheFont/setBlock__12JUTCacheFontFv.s"
}
#pragma pop


/* 802DDB0C-802DDBBC 00B0+00 rc=1 efc=0 rfr=False None .text      determineBlankPage__12JUTCacheFontFv                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JUTCacheFont::determineBlankPage() {
	nofralloc
#include "asm/JSystem/JUtility/JUTCacheFont/determineBlankPage__12JUTCacheFontFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80455FD0-80455FD8 0004+04 rc=1 efc=0 rfr=False None .sdata2    @721                                                         */
SECTION_SDATA2 static u8 lit_721[4 + 4 /* padding */] = {
	0x00, 0x00, 0x00, 0x00,
	/* padding */
	0x00, 0x00, 0x00, 0x00,
};

/* 802DDBBC-802DDCE4 0128+00 rc=1 efc=0 rfr=False None .text      getGlyphFromAram__12JUTCacheFontFPQ212JUTCacheFont15TGlyphCacheInfoPQ212JUTCacheFont10TCachePagePiPi */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JUTCacheFont::getGlyphFromAram(JUTCacheFont::TGlyphCacheInfo* field_0, JUTCacheFont::TCachePage* field_1, int* field_2, int* field_3) {
	nofralloc
#include "asm/JSystem/JUtility/JUTCacheFont/func_802DDBBC.s"
}
#pragma pop


/* 802DDCE4-802DDD98 00B4+00 rc=1 efc=0 rfr=False None .text      loadImage__12JUTCacheFontFi11_GXTexMapID                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JUTCacheFont::loadImage(int field_0, _GXTexMapID field_1) {
	nofralloc
#include "asm/JSystem/JUtility/JUTCacheFont/loadImage__12JUTCacheFontFi11_GXTexMapID.s"
}
#pragma pop


/* 802DDD98-802DDEE0 0148+00 rc=1 efc=0 rfr=False None .text      loadCache_char_subroutine__12JUTCacheFontFPib                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JUTCacheFont::loadCache_char_subroutine(int* field_0, bool field_1) {
	nofralloc
#include "asm/JSystem/JUtility/JUTCacheFont/loadCache_char_subroutine__12JUTCacheFontFPib.s"
}
#pragma pop


/* 802DDEE0-802DDF68 0088+00 rc=1 efc=0 rfr=False None .text      invalidiateAllCache__12JUTCacheFontFv                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JUTCacheFont::invalidiateAllCache() {
	nofralloc
#include "asm/JSystem/JUtility/JUTCacheFont/invalidiateAllCache__12JUTCacheFontFv.s"
}
#pragma pop


/* 802DDF68-802DDFAC 0044+00 rc=2 efc=0 rfr=False None .text      unlink__12JUTCacheFontFPQ212JUTCacheFont15TGlyphCacheInfo    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JUTCacheFont::unlink(JUTCacheFont::TGlyphCacheInfo* field_0) {
	nofralloc
#include "asm/JSystem/JUtility/JUTCacheFont/unlink__12JUTCacheFontFPQ212JUTCacheFont15TGlyphCacheInfo.s"
}
#pragma pop


/* 802DDFAC-802DDFD8 002C+00 rc=2 efc=0 rfr=False None .text      prepend__12JUTCacheFontFPQ212JUTCacheFont15TGlyphCacheInfo   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JUTCacheFont::prepend(JUTCacheFont::TGlyphCacheInfo* field_0) {
	nofralloc
#include "asm/JSystem/JUtility/JUTCacheFont/prepend__12JUTCacheFontFPQ212JUTCacheFont15TGlyphCacheInfo.s"
}
#pragma pop


/* 802DDFD8-802DDFE0 0008+00 rc=2 efc=1 rfr=False None .text      getResFont__10JUTResFontCFv                                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JUTResFont::getResFont() const {
	nofralloc
#include "asm/JSystem/JUtility/JUTCacheFont/getResFont__10JUTResFontCFv.s"
}
#pragma pop


/* 802DDFE0-802DDFEC 000C+00 rc=2 efc=1 rfr=False None .text      getFontType__10JUTResFontCFv                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JUTResFont::getFontType() const {
	nofralloc
#include "asm/JSystem/JUtility/JUTCacheFont/getFontType__10JUTResFontCFv.s"
}
#pragma pop


/* 802DDFEC-802DDFF8 000C+00 rc=2 efc=1 rfr=False None .text      getLeading__10JUTResFontCFv                                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JUTResFont::getLeading() const {
	nofralloc
#include "asm/JSystem/JUtility/JUTCacheFont/getLeading__10JUTResFontCFv.s"
}
#pragma pop


/* 802DDFF8-802DE004 000C+00 rc=2 efc=1 rfr=False None .text      getWidth__10JUTResFontCFv                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JUTResFont::getWidth() const {
	nofralloc
#include "asm/JSystem/JUtility/JUTCacheFont/getWidth__10JUTResFontCFv.s"
}
#pragma pop


/* 802DE004-802DE010 000C+00 rc=2 efc=1 rfr=False None .text      getAscent__10JUTResFontCFv                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JUTResFont::getAscent() const {
	nofralloc
#include "asm/JSystem/JUtility/JUTCacheFont/getAscent__10JUTResFontCFv.s"
}
#pragma pop


/* 802DE010-802DE01C 000C+00 rc=2 efc=1 rfr=False None .text      getDescent__10JUTResFontCFv                                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JUTResFont::getDescent() const {
	nofralloc
#include "asm/JSystem/JUtility/JUTCacheFont/getDescent__10JUTResFontCFv.s"
}
#pragma pop


/* 802DE01C-802DE078 005C+00 rc=2 efc=1 rfr=False None .text      getHeight__10JUTResFontCFv                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JUTResFont::getHeight() const {
	nofralloc
#include "asm/JSystem/JUtility/JUTCacheFont/getHeight__10JUTResFontCFv.s"
}
#pragma pop


