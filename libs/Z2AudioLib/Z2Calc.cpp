// 
// Generated By: dol2asm
// Translation Unit: Z2Calc
// 

#include "dolphin/types.h"

// 
// Types:
// 

// build Z2Calc (Z2Calc) False/False
// build Z2Calc (Z2Calc) True/False
struct Z2Calc;
/* top-level dependencies (begin Z2Calc) */
// outer dependency: Z2Calc::CurveSign
/* top-level dependencies (end Z2Calc) */
struct Z2Calc {
	// Z2Calc::CurveSign
	// build CurveSign (Z2Calc::CurveSign) False/False
	/* dependencies (begin Z2Calc::CurveSign) */
	/* dependencies (end Z2Calc::CurveSign) */
	struct CurveSign {
	};

	// build FNoise1f (Z2Calc::FNoise1f) False/False
	/* dependencies (begin Z2Calc::FNoise1f) */
	/* dependencies (end Z2Calc::FNoise1f) */
	struct FNoise1f {
		/* 802A9944 */ void setParam(f32, f32, f32);
		/* 802A9958 */ void tau(f32);
		/* 802A99A0 */ void calcNoise1f();
	};

	/* 802A968C */ void linearTransform(f32, f32, f32, f32, f32, bool);
	/* 802A96F4 */ void getParamByExp(f32, f32, f32, f32, f32, f32, Z2Calc::CurveSign);
	/* 802A9814 */ void getRandom(f32, f32, f32);
	/* 802A98D4 */ void getRandom_0_1();
};

// build JMath (JMath) False/False
/* top-level dependencies (begin JMath) */
/* top-level dependencies (end JMath) */
struct JMath {
	// build TRandom_fast_ (JMath::TRandom_fast_) False/False
	/* dependencies (begin JMath::TRandom_fast_) */
	/* dependencies (end JMath::TRandom_fast_) */
	struct TRandom_fast_ {
		/* 80339AE4 */ TRandom_fast_(u32);
	};

};

// 
// Forward References:
// 


extern "C" void linearTransform__6Z2CalcFfffffb();
extern "C" void getParamByExp__6Z2CalcFffffffQ26Z2Calc9CurveSign();
extern "C" void getRandom__6Z2CalcFfff();
extern "C" void getRandom_0_1__6Z2CalcFv();
extern "C" void setParam__Q26Z2Calc8FNoise1fFfff();
extern "C" void tau__Q26Z2Calc8FNoise1fFf();
extern "C" void calcNoise1f__Q26Z2Calc8FNoise1fFv();
SECTION_SBSS extern u8 data_80451330[4];
SECTION_SBSS extern u8 data_80451334[4];
SECTION_SDATA2 extern f32 cEqualCSlope__6Z2Calc;
SECTION_SDATA2 extern f32 cEqualPSlope__6Z2Calc;
SECTION_SDATA2 extern u8 lit_380[4];
SECTION_SDATA2 extern f32 lit_381;
SECTION_SDATA2 extern f32 lit_396;
SECTION_SDATA2 extern f32 lit_397;

// 
// External References:
// 

extern "C" void exp();
extern "C" void pow();

extern "C" void __ct__Q25JMath13TRandom_fast_FUl();
extern "C" void exp();
extern "C" void pow();

// 
// Declarations:
// 

/* 802A968C-802A96F4 0068+00 rc=17 efc=16 .text      linearTransform__6Z2CalcFfffffb                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void Z2Calc::linearTransform(f32 field_0, f32 field_1, f32 field_2, f32 field_3, f32 field_4, bool field_5) {
	nofralloc
#include "asm/Z2AudioLib/Z2Calc/linearTransform__6Z2CalcFfffffb.s"
}
#pragma pop


/* ############################################################################################## */
/* 80455820-80455824 0004+00 rc=1 efc=1 .sdata2    cEqualCSlope__6Z2Calc                                        */
f32 cEqualCSlope__6Z2Calc = 1.0f;

/* 80455824-80455828 0004+00 rc=1 efc=1 .sdata2    cEqualPSlope__6Z2Calc                                        */
f32 cEqualPSlope__6Z2Calc = 0.5f;

/* 80455828-8045582C 0004+00 rc=1 efc=0 .sdata2    @380                                                         */
u8 lit_380[4] = {
	0x00, 0x00, 0x00, 0x00,
};

/* 8045582C-80455830 0004+00 rc=4 efc=0 .sdata2    @381                                                         */
f32 lit_381 = 1.0f;

/* 802A96F4-802A9814 0120+00 rc=29 efc=29 .text      getParamByExp__6Z2CalcFffffffQ26Z2Calc9CurveSign             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void Z2Calc::getParamByExp(f32 field_0, f32 field_1, f32 field_2, f32 field_3, f32 field_4, f32 field_5, Z2Calc::CurveSign field_6) {
	nofralloc
#include "asm/Z2AudioLib/Z2Calc/getParamByExp__6Z2CalcFffffffQ26Z2Calc9CurveSign.s"
}
#pragma pop


/* ############################################################################################## */
/* 80455830-80455834 0004+00 rc=1 efc=0 .sdata2    @396                                                         */
f32 lit_396 = 2.0f;

/* 80455834-80455838 0004+00 rc=1 efc=0 .sdata2    @397                                                         */
f32 lit_397 = -2.0f;

/* 802A9814-802A98D4 00C0+00 rc=2 efc=2 .text      getRandom__6Z2CalcFfff                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void Z2Calc::getRandom(f32 field_0, f32 field_1, f32 field_2) {
	nofralloc
#include "asm/Z2AudioLib/Z2Calc/getRandom__6Z2CalcFfff.s"
}
#pragma pop


/* ############################################################################################## */
/* 80451330-80451334 0004+00 rc=1 efc=0 .sbss      None                                                         */
u8 data_80451330[4];

/* 80451334-80451338 0004+00 rc=1 efc=0 .sbss      oRandom$401                                                  */
u8 data_80451334[4];

/* 802A98D4-802A9944 0070+00 rc=2 efc=1 .text      getRandom_0_1__6Z2CalcFv                                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void Z2Calc::getRandom_0_1() {
	nofralloc
#include "asm/Z2AudioLib/Z2Calc/getRandom_0_1__6Z2CalcFv.s"
}
#pragma pop


/* 802A9944-802A9958 0014+00 rc=1 efc=1 .text      setParam__Q26Z2Calc8FNoise1fFfff                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void Z2Calc::FNoise1f::setParam(f32 field_0, f32 field_1, f32 field_2) {
	nofralloc
#include "asm/Z2AudioLib/Z2Calc/setParam__Q26Z2Calc8FNoise1fFfff.s"
}
#pragma pop


/* 802A9958-802A99A0 0048+00 rc=1 efc=0 .text      tau__Q26Z2Calc8FNoise1fFf                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void Z2Calc::FNoise1f::tau(f32 field_0) {
	nofralloc
#include "asm/Z2AudioLib/Z2Calc/tau__Q26Z2Calc8FNoise1fFf.s"
}
#pragma pop


/* 802A99A0-802A9A34 0094+00 rc=5 efc=5 .text      calcNoise1f__Q26Z2Calc8FNoise1fFv                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void Z2Calc::FNoise1f::calcNoise1f() {
	nofralloc
#include "asm/Z2AudioLib/Z2Calc/calcNoise1f__Q26Z2Calc8FNoise1fFv.s"
}
#pragma pop


