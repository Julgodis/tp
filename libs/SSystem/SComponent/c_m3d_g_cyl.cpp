// 
// Generated By: dol2asm
// Translation Unit: c_m3d_g_cyl
// 

#include "dol2asm.h"
#include "dolphin/types.h"
#include "SSystem/SComponent/c_m3d_g_cyl.h"

// 
// Types:
// 

struct cXyz {
};

struct cM3dGCylS {
};

struct cM3dGSph {
};

struct cM3dGCyl {
	/* 8026F0A8 */ cM3dGCyl(cXyz const*, f32, f32);
	/* 8026F180 */ void Set(cXyz const&, f32, f32);
	/* 8026F114 */ void Set(cM3dGCylS const&);
	/* 8026F1DC */ void SetC(cXyz const&);
	/* 8026F1F8 */ void SetH(f32);
	/* 8026F200 */ void SetR(f32);
	/* 8026F208 */ void cross(cM3dGSph const*, cXyz*) const;
	/* 8026F22C */ void cross(cM3dGCyl const*, cXyz*) const;
	/* 8026F24C */ void calcMinMax(cXyz*, cXyz*);
};

struct Vec {
};

// 
// Forward References:
// 


extern "C" void __ct__8cM3dGCylFPC4cXyzff(); // 1
extern "C" void Set__8cM3dGCylFRC9cM3dGCylS(); // 1
extern "C" void Set__8cM3dGCylFRC4cXyzff(); // 1
extern "C" void SetC__8cM3dGCylFRC4cXyz(); // 1
extern "C" void SetH__8cM3dGCylFf(); // 1
extern "C" void SetR__8cM3dGCylFf(); // 1
extern "C" void cross__8cM3dGCylCFPC8cM3dGSphP4cXyz(); // 1
extern "C" void cross__8cM3dGCylCFPC8cM3dGCylP4cXyz(); // 1
extern "C" void calcMinMax__8cM3dGCylFP4cXyzP4cXyz(); // 1

// 
// External References:
// 

void cM3d_Cross_CylSph(cM3dGCyl const*, cM3dGSph const*, Vec*, f32*); // 2
void cM3d_Cross_CylCyl(cM3dGCyl const*, cM3dGCyl const*, Vec*); // 2

extern "C" void cM3d_Cross_CylSph__FPC8cM3dGCylPC8cM3dGSphP3VecPf(); // 1
extern "C" void cM3d_Cross_CylCyl__FPC8cM3dGCylPC8cM3dGCylP3Vec(); // 1
extern "C" extern void* __vt__8cM3dGCyl[3];

// 
// Declarations:
// 

/* 8026F0A8-8026F114 006C+00 s=0 e=1 z=0  None .text      __ct__8cM3dGCylFPC4cXyzff                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm cM3dGCyl::cM3dGCyl(cXyz const* param_0, f32 param_1, f32 param_2) {
	nofralloc
#include "asm/SSystem/SComponent/c_m3d_g_cyl/__ct__8cM3dGCylFPC4cXyzff.s"
}
#pragma pop


/* 8026F114-8026F180 006C+00 s=0 e=1 z=0  None .text      Set__8cM3dGCylFRC9cM3dGCylS                                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3dGCyl::Set(cM3dGCylS const& param_0) {
	nofralloc
#include "asm/SSystem/SComponent/c_m3d_g_cyl/Set__8cM3dGCylFRC9cM3dGCylS.s"
}
#pragma pop


/* 8026F180-8026F1DC 005C+00 s=0 e=2 z=0  None .text      Set__8cM3dGCylFRC4cXyzff                                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3dGCyl::Set(cXyz const& param_0, f32 param_1, f32 param_2) {
	nofralloc
#include "asm/SSystem/SComponent/c_m3d_g_cyl/Set__8cM3dGCylFRC4cXyzff.s"
}
#pragma pop


/* 8026F1DC-8026F1F8 001C+00 s=3 e=13 z=0  None .text      SetC__8cM3dGCylFRC4cXyz                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3dGCyl::SetC(cXyz const& param_0) {
	nofralloc
#include "asm/SSystem/SComponent/c_m3d_g_cyl/SetC__8cM3dGCylFRC4cXyz.s"
}
#pragma pop


/* 8026F1F8-8026F200 0008+00 s=3 e=11 z=0  None .text      SetH__8cM3dGCylFf                                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3dGCyl::SetH(f32 param_0) {
	nofralloc
#include "asm/SSystem/SComponent/c_m3d_g_cyl/SetH__8cM3dGCylFf.s"
}
#pragma pop


/* 8026F200-8026F208 0008+00 s=3 e=6 z=0  None .text      SetR__8cM3dGCylFf                                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3dGCyl::SetR(f32 param_0) {
	nofralloc
#include "asm/SSystem/SComponent/c_m3d_g_cyl/SetR__8cM3dGCylFf.s"
}
#pragma pop


/* 8026F208-8026F22C 0024+00 s=0 e=1 z=0  None .text      cross__8cM3dGCylCFPC8cM3dGSphP4cXyz                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3dGCyl::cross(cM3dGSph const* param_0, cXyz* param_1) const {
	nofralloc
#include "asm/SSystem/SComponent/c_m3d_g_cyl/cross__8cM3dGCylCFPC8cM3dGSphP4cXyz.s"
}
#pragma pop


/* 8026F22C-8026F24C 0020+00 s=0 e=1 z=0  None .text      cross__8cM3dGCylCFPC8cM3dGCylP4cXyz                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3dGCyl::cross(cM3dGCyl const* param_0, cXyz* param_1) const {
	nofralloc
#include "asm/SSystem/SComponent/c_m3d_g_cyl/cross__8cM3dGCylCFPC8cM3dGCylP4cXyz.s"
}
#pragma pop


/* 8026F24C-8026F2A8 005C+00 s=0 e=2 z=0  None .text      calcMinMax__8cM3dGCylFP4cXyzP4cXyz                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3dGCyl::calcMinMax(cXyz* param_0, cXyz* param_1) {
	nofralloc
#include "asm/SSystem/SComponent/c_m3d_g_cyl/calcMinMax__8cM3dGCylFP4cXyzP4cXyz.s"
}
#pragma pop


