// 
// Generated By: dol2asm
// Translation Unit: GXFifo
// 

#include "dol2asm.h"
#include "dolphin/types.h"
#include "dolphin/gx/GXFifo.h"

// 
// Forward References:
// 


extern "C" static void GXCPInterruptHandler(); // 1
extern "C" void GXInitFifoBase(); // 1
extern "C" void GXInitFifoPtrs(); // 1
extern "C" static void GXInitFifoLimits(); // 1
extern "C" void GXSetCPUFifo(); // 1
extern "C" void GXSetGPFifo(); // 1
extern "C" void GXSaveCPUFifo(); // 1
extern "C" static void __GXSaveCPUFifoAux(); // 1
extern "C" void GXGetGPStatus(); // 1
extern "C" void GXGetFifoBase(); // 1
extern "C" void GXGetFifoSize(); // 1
extern "C" void GXSetBreakPtCallback(); // 1
extern "C" void __GXFifoInit(); // 1
extern "C" static void __GXFifoReadEnable(); // 1
extern "C" static void __GXFifoReadDisable(); // 1
extern "C" static void __GXFifoLink(); // 1
extern "C" static void __GXWriteFifoIntEnable(); // 1
extern "C" static void __GXWriteFifoIntReset(); // 1
extern "C" void __GXCleanGPFifo(); // 1
extern "C" void GXSetCurrentGXThread(); // 1
extern "C" void GXGetCurrentGXThread(); // 1
extern "C" void GXGetCPUFifo(); // 1
extern "C" void GXGetGPFifo(); // 1

// 
// External References:
// 


extern "C" void PPCSync(); // 1
extern "C" void OSSetCurrentContext(); // 1
extern "C" void OSClearContext(); // 1
extern "C" void OSDisableInterrupts(); // 1
extern "C" void OSRestoreInterrupts(); // 1
extern "C" void __OSSetInterruptHandler(); // 1
extern "C" void __OSUnmaskInterrupts(); // 1
extern "C" void OSGetCurrentThread(); // 1
extern "C" void OSResumeThread(); // 1
extern "C" void OSSuspendThread(); // 1
extern "C" void GXFlush(); // 1
extern "C" extern u8 __piReg[4];
extern "C" extern u8 __cpReg[4];
extern "C" extern void* __GXData;

// 
// Declarations:
// 

/* ############################################################################################## */
/* 80451948-8045194C 0004+00 s=4 e=0 z=0  None .sbss      CPUFifo                                                      */
static u8 CPUFifo[4];

/* 8045194C-80451950 0004+00 s=4 e=0 z=0  None .sbss      GPFifo                                                       */
static u8 GPFifo[4];

/* 80451950-80451954 0004+00 s=4 e=0 z=0  None .sbss      __GXCurrentThread                                            */
static u8 __GXCurrentThread[4];

/* 80451954-80451958 0004+00 s=3 e=0 z=0  None .sbss      None                                                         */
static u8 data_80451954[4];

/* 80451958-8045195C 0004+00 s=2 e=0 z=0  None .sbss      GXOverflowSuspendInProgress                                  */
static u8 GXOverflowSuspendInProgress[4];

/* 8045195C-80451960 0004+00 s=2 e=0 z=0  None .sbss      BreakPointCB                                                 */
static u8 BreakPointCB[4];

/* 80451960-80451968 0004+04 s=1 e=0 z=0  None .sbss      __GXOverflowCount                                            */
static u8 __GXOverflowCount[4 + 4 /* padding */];

/* 8035A5A8-8035A6DC 0134+00 s=1 e=0 z=0  None .text      GXCPInterruptHandler                                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void GXCPInterruptHandler() {
	nofralloc
#include "asm/dolphin/gx/GXFifo/GXCPInterruptHandler.s"
}
#pragma pop


/* 8035A6DC-8035A748 006C+00 s=0 e=2 z=0  None .text      GXInitFifoBase                                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void GXInitFifoBase() {
	nofralloc
#include "asm/dolphin/gx/GXFifo/GXInitFifoBase.s"
}
#pragma pop


/* 8035A748-8035A7B8 0070+00 s=1 e=1 z=0  None .text      GXInitFifoPtrs                                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void GXInitFifoPtrs() {
	nofralloc
#include "asm/dolphin/gx/GXFifo/GXInitFifoPtrs.s"
}
#pragma pop


/* 8035A7B8-8035A7C4 000C+00 s=1 e=0 z=0  None .text      GXInitFifoLimits                                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void GXInitFifoLimits() {
	nofralloc
#include "asm/dolphin/gx/GXFifo/GXInitFifoLimits.s"
}
#pragma pop


/* 8035A7C4-8035A8EC 0128+00 s=1 e=1 z=0  None .text      GXSetCPUFifo                                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void GXSetCPUFifo() {
	nofralloc
#include "asm/dolphin/gx/GXFifo/GXSetCPUFifo.s"
}
#pragma pop


/* 8035A8EC-8035AA8C 01A0+00 s=1 e=1 z=0  None .text      GXSetGPFifo                                                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void GXSetGPFifo() {
	nofralloc
#include "asm/dolphin/gx/GXFifo/GXSetGPFifo.s"
}
#pragma pop


/* 8035AA8C-8035AAC0 0034+00 s=0 e=1 z=0  None .text      GXSaveCPUFifo                                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void GXSaveCPUFifo() {
	nofralloc
#include "asm/dolphin/gx/GXFifo/GXSaveCPUFifo.s"
}
#pragma pop


/* 8035AAC0-8035AB88 00C8+00 s=1 e=0 z=0  None .text      __GXSaveCPUFifoAux                                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void __GXSaveCPUFifoAux() {
	nofralloc
#include "asm/dolphin/gx/GXFifo/__GXSaveCPUFifoAux.s"
}
#pragma pop


/* 8035AB88-8035ABD8 0050+00 s=0 e=2 z=0  None .text      GXGetGPStatus                                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void GXGetGPStatus() {
	nofralloc
#include "asm/dolphin/gx/GXFifo/GXGetGPStatus.s"
}
#pragma pop


/* 8035ABD8-8035ABE0 0008+00 s=0 e=1 z=0  None .text      GXGetFifoBase                                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void GXGetFifoBase() {
	nofralloc
#include "asm/dolphin/gx/GXFifo/GXGetFifoBase.s"
}
#pragma pop


/* 8035ABE0-8035ABE8 0008+00 s=0 e=1 z=0  None .text      GXGetFifoSize                                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void GXGetFifoSize() {
	nofralloc
#include "asm/dolphin/gx/GXFifo/GXGetFifoSize.s"
}
#pragma pop


/* 8035ABE8-8035AC2C 0044+00 s=0 e=1 z=0  None .text      GXSetBreakPtCallback                                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void GXSetBreakPtCallback() {
	nofralloc
#include "asm/dolphin/gx/GXFifo/GXSetBreakPtCallback.s"
}
#pragma pop


/* 8035AC2C-8035AC78 004C+00 s=0 e=1 z=0  None .text      __GXFifoInit                                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void __GXFifoInit() {
	nofralloc
#include "asm/dolphin/gx/GXFifo/__GXFifoInit.s"
}
#pragma pop


/* 8035AC78-8035AC9C 0024+00 s=1 e=0 z=0  None .text      __GXFifoReadEnable                                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void __GXFifoReadEnable() {
	nofralloc
#include "asm/dolphin/gx/GXFifo/__GXFifoReadEnable.s"
}
#pragma pop


/* 8035AC9C-8035ACC0 0024+00 s=1 e=0 z=0  None .text      __GXFifoReadDisable                                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void __GXFifoReadDisable() {
	nofralloc
#include "asm/dolphin/gx/GXFifo/__GXFifoReadDisable.s"
}
#pragma pop


/* 8035ACC0-8035ACF4 0034+00 s=2 e=0 z=0  None .text      __GXFifoLink                                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void __GXFifoLink() {
	nofralloc
#include "asm/dolphin/gx/GXFifo/__GXFifoLink.s"
}
#pragma pop


/* 8035ACF4-8035AD24 0030+00 s=3 e=0 z=0  None .text      __GXWriteFifoIntEnable                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void __GXWriteFifoIntEnable() {
	nofralloc
#include "asm/dolphin/gx/GXFifo/__GXWriteFifoIntEnable.s"
}
#pragma pop


/* 8035AD24-8035AD54 0030+00 s=3 e=0 z=0  None .text      __GXWriteFifoIntReset                                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void __GXWriteFifoIntReset() {
	nofralloc
#include "asm/dolphin/gx/GXFifo/__GXWriteFifoIntReset.s"
}
#pragma pop


/* 8035AD54-8035AE54 0100+00 s=0 e=1 z=0  None .text      __GXCleanGPFifo                                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void __GXCleanGPFifo() {
	nofralloc
#include "asm/dolphin/gx/GXFifo/__GXCleanGPFifo.s"
}
#pragma pop


/* 8035AE54-8035AEA0 004C+00 s=0 e=1 z=0  None .text      GXSetCurrentGXThread                                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void GXSetCurrentGXThread() {
	nofralloc
#include "asm/dolphin/gx/GXFifo/GXSetCurrentGXThread.s"
}
#pragma pop


/* 8035AEA0-8035AEA8 0008+00 s=0 e=1 z=0  None .text      GXGetCurrentGXThread                                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void GXGetCurrentGXThread() {
	nofralloc
#include "asm/dolphin/gx/GXFifo/GXGetCurrentGXThread.s"
}
#pragma pop


/* 8035AEA8-8035AEB0 0008+00 s=1 e=1 z=0  None .text      GXGetCPUFifo                                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void GXGetCPUFifo() {
	nofralloc
#include "asm/dolphin/gx/GXFifo/GXGetCPUFifo.s"
}
#pragma pop


/* 8035AEB0-8035AEB8 0008+00 s=1 e=2 z=0  None .text      GXGetGPFifo                                                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void GXGetGPFifo() {
	nofralloc
#include "asm/dolphin/gx/GXFifo/GXGetGPFifo.s"
}
#pragma pop


