// 
// Generated By: dol2asm
// Translation Unit: dvdlow
// 

#include "dol2asm.h"
#include "dolphin/types.h"
#include "dolphin/dvd/dvdlow.h"

// 
// Forward References:
// 


extern "C" void __DVDInitWA(); // 1
extern "C" void __DVDInterruptHandler(); // 1
extern "C" static void dvdlow__AlarmHandler(); // 1
extern "C" static void AlarmHandlerForTimeout(); // 1
extern "C" static void Read(); // 1
extern "C" static void SeekTwiceBeforeRead(); // 1
extern "C" void DVDLowRead(); // 1
extern "C" void DVDLowSeek(); // 1
extern "C" void DVDLowWaitCoverClose(); // 1
extern "C" void DVDLowReadDiskID(); // 1
extern "C" void DVDLowStopMotor(); // 1
extern "C" void DVDLowRequestError(); // 1
extern "C" void DVDLowInquiry(); // 1
extern "C" void DVDLowAudioStream(); // 1
extern "C" void DVDLowRequestAudioStatus(); // 1
extern "C" void DVDLowAudioBufferConfig(); // 1
extern "C" void DVDLowReset(); // 1
extern "C" void DVDLowBreak(); // 1
extern "C" void DVDLowClearCallback(); // 1
extern "C" static void __DVDLowSetWAType(); // 1
extern "C" void __DVDLowTestAlarm(); // 1
extern "C" extern u8 AlarmForWA[40];
extern "C" extern u8 Prev[12];
extern "C" extern u8 Curr[12];

// 
// External References:
// 


extern "C" void OSInitAlarm(); // 1
extern "C" void OSCreateAlarm(); // 1
extern "C" void OSSetAlarm(); // 1
extern "C" void OSCancelAlarm(); // 1
extern "C" void OSSetCurrentContext(); // 1
extern "C" void OSClearContext(); // 1
extern "C" void OSDisableInterrupts(); // 1
extern "C" void OSRestoreInterrupts(); // 1
extern "C" void __OSMaskInterrupts(); // 1
extern "C" void __OSGetSystemTime(); // 1
extern "C" void DVDGetCurrentDiskID(); // 1

// 
// Declarations:
// 

/* ############################################################################################## */
/* 8044C830-8044C870 003C+04 rc=6 efc=0 rfr=False None .bss       CommandList                                                  */
static u8 CommandList[60 + 4 /* padding */];

/* 80451710-80451714 0004+00 rc=12 efc=0 rfr=False None .sbss      StopAtNextInt                                                */
static u8 StopAtNextInt[4];

/* 80451714-80451718 0004+00 rc=1 efc=0 rfr=False None .sbss      LastLength                                                   */
static u8 LastLength[4];

/* 80451718-8045171C 0004+00 rc=13 efc=0 rfr=False None .sbss      Callback                                                     */
static u8 dvdlow__Callback[4];

/* 8045171C-80451720 0004+00 rc=1 efc=0 rfr=False None .sbss      ResetCoverCallback                                           */
static u8 ResetCoverCallback[4];

/* 80451720-80451724 0004+00 rc=2 efc=0 rfr=False None .sbss      LastResetEnd                                                 */
static u8 LastResetEnd[4];

/* 80451724-80451728 0004+00 rc=2 efc=0 rfr=False None .sbss      None                                                         */
static u8 data_80451724[4];

/* 80451728-8045172C 0004+00 rc=2 efc=0 rfr=False None .sbss      ResetOccurred                                                */
static u8 ResetOccurred[4];

/* 8045172C-80451730 0004+00 rc=3 efc=0 rfr=False None .sbss      WaitingCoverClose                                            */
static u8 WaitingCoverClose[4];

/* 80451730-80451734 0004+00 rc=2 efc=0 rfr=False None .sbss      Breaking                                                     */
static u8 Breaking[4];

/* 80451734-80451738 0004+00 rc=2 efc=0 rfr=False None .sbss      WorkAroundType                                               */
static u8 WorkAroundType[4];

/* 80451738-80451740 0004+04 rc=2 efc=0 rfr=False None .sbss      WorkAroundSeekLocation                                       */
static u8 WorkAroundSeekLocation[4 + 4 /* padding */];

/* 80451740-80451744 0004+00 rc=2 efc=0 rfr=False None .sbss      LastReadFinished                                             */
static u8 LastReadFinished[4];

/* 80451744-80451748 0004+00 rc=2 efc=0 rfr=False None .sbss      None                                                         */
static u8 data_80451744[4];

/* 80451748-8045174C 0004+00 rc=1 efc=0 rfr=False None .sbss      LastReadIssued                                               */
static u8 LastReadIssued[4];

/* 8045174C-80451750 0004+00 rc=1 efc=0 rfr=False None .sbss      None                                                         */
static u8 data_8045174C[4];

/* 80451750-80451754 0004+00 rc=2 efc=0 rfr=False None .sbss      LastCommandWasRead                                           */
static u8 LastCommandWasRead[4];

/* 80451754-80451758 0004+00 rc=5 efc=0 rfr=False None .sbss      NextCommandNumber                                            */
static u8 NextCommandNumber[4];

/* 80347674-803476B4 0040+00 rc=1 efc=1 rfr=False None .text      __DVDInitWA                                                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void __DVDInitWA() {
	nofralloc
#include "asm/dolphin/dvd/dvdlow/__DVDInitWA.s"
}
#pragma pop


/* ############################################################################################## */
/* 804509D8-804509E0 0004+04 rc=2 efc=0 rfr=False None .sdata     FirstRead                                                    */
SECTION_SDATA static u32 FirstRead[1 + 1 /* padding */] = {
	0x00000001,
	/* padding */
	0x00000000,
};

/* 803476B4-80347994 02E0+00 rc=1 efc=1 rfr=False None .text      __DVDInterruptHandler                                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void __DVDInterruptHandler() {
	nofralloc
#include "asm/dolphin/dvd/dvdlow/__DVDInterruptHandler.s"
}
#pragma pop


/* 80347994-80347A18 0084+00 rc=1 efc=0 rfr=False None .text      AlarmHandler                                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void dvdlow__AlarmHandler() {
	nofralloc
#include "asm/dolphin/dvd/dvdlow/dvdlow__AlarmHandler.s"
}
#pragma pop


/* 80347A18-80347A88 0070+00 rc=9 efc=0 rfr=False None .text      AlarmHandlerForTimeout                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void AlarmHandlerForTimeout() {
	nofralloc
#include "asm/dolphin/dvd/dvdlow/AlarmHandlerForTimeout.s"
}
#pragma pop


/* 80347A88-80347B98 0110+00 rc=3 efc=0 rfr=False None .text      Read                                                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void Read() {
	nofralloc
#include "asm/dolphin/dvd/dvdlow/Read.s"
}
#pragma pop


/* 80347B98-80347C18 0080+00 rc=1 efc=0 rfr=False None .text      SeekTwiceBeforeRead                                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void SeekTwiceBeforeRead() {
	nofralloc
#include "asm/dolphin/dvd/dvdlow/SeekTwiceBeforeRead.s"
}
#pragma pop


/* 80347C18-80347EB0 0298+00 rc=4 efc=4 rfr=False None .text      DVDLowRead                                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void DVDLowRead() {
	nofralloc
#include "asm/dolphin/dvd/dvdlow/DVDLowRead.s"
}
#pragma pop


/* ############################################################################################## */
/* 8044C870-8044C898 0028+00 rc=0 efc=0 rfr=False None .bss       AlarmForWA                                                   */
u8 AlarmForWA[40];

/* 8044C898-8044C8C0 0028+00 rc=9 efc=0 rfr=False None .bss       AlarmForTimeout                                              */
static u8 AlarmForTimeout[40];

/* 80347EB0-80347F44 0094+00 rc=5 efc=2 rfr=False None .text      DVDLowSeek                                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void DVDLowSeek() {
	nofralloc
#include "asm/dolphin/dvd/dvdlow/DVDLowSeek.s"
}
#pragma pop


/* 80347F44-80347F70 002C+00 rc=3 efc=3 rfr=False None .text      DVDLowWaitCoverClose                                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void DVDLowWaitCoverClose() {
	nofralloc
#include "asm/dolphin/dvd/dvdlow/DVDLowWaitCoverClose.s"
}
#pragma pop


/* 80347F70-80348014 00A4+00 rc=2 efc=2 rfr=False None .text      DVDLowReadDiskID                                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void DVDLowReadDiskID() {
	nofralloc
#include "asm/dolphin/dvd/dvdlow/DVDLowReadDiskID.s"
}
#pragma pop


/* 80348014-803480A0 008C+00 rc=9 efc=9 rfr=False None .text      DVDLowStopMotor                                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void DVDLowStopMotor() {
	nofralloc
#include "asm/dolphin/dvd/dvdlow/DVDLowStopMotor.s"
}
#pragma pop


/* 803480A0-8034812C 008C+00 rc=7 efc=7 rfr=False None .text      DVDLowRequestError                                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void DVDLowRequestError() {
	nofralloc
#include "asm/dolphin/dvd/dvdlow/DVDLowRequestError.s"
}
#pragma pop


/* 8034812C-803481C8 009C+00 rc=1 efc=1 rfr=False None .text      DVDLowInquiry                                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void DVDLowInquiry() {
	nofralloc
#include "asm/dolphin/dvd/dvdlow/DVDLowInquiry.s"
}
#pragma pop


/* 803481C8-80348260 0098+00 rc=2 efc=2 rfr=False None .text      DVDLowAudioStream                                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void DVDLowAudioStream() {
	nofralloc
#include "asm/dolphin/dvd/dvdlow/DVDLowAudioStream.s"
}
#pragma pop


/* 80348260-803482EC 008C+00 rc=1 efc=1 rfr=False None .text      DVDLowRequestAudioStatus                                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void DVDLowRequestAudioStatus() {
	nofralloc
#include "asm/dolphin/dvd/dvdlow/DVDLowRequestAudioStatus.s"
}
#pragma pop


/* 803482EC-80348388 009C+00 rc=3 efc=3 rfr=False None .text      DVDLowAudioBufferConfig                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void DVDLowAudioBufferConfig() {
	nofralloc
#include "asm/dolphin/dvd/dvdlow/DVDLowAudioBufferConfig.s"
}
#pragma pop


/* 80348388-80348444 00BC+00 rc=1 efc=1 rfr=False None .text      DVDLowReset                                                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void DVDLowReset() {
	nofralloc
#include "asm/dolphin/dvd/dvdlow/DVDLowReset.s"
}
#pragma pop


/* 80348444-80348458 0014+00 rc=1 efc=1 rfr=False None .text      DVDLowBreak                                                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void DVDLowBreak() {
	nofralloc
#include "asm/dolphin/dvd/dvdlow/DVDLowBreak.s"
}
#pragma pop


/* 80348458-80348474 001C+00 rc=1 efc=1 rfr=False None .text      DVDLowClearCallback                                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void DVDLowClearCallback() {
	nofralloc
#include "asm/dolphin/dvd/dvdlow/DVDLowClearCallback.s"
}
#pragma pop


/* 80348474-803484B8 0044+00 rc=1 efc=0 rfr=False None .text      __DVDLowSetWAType                                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void __DVDLowSetWAType() {
	nofralloc
#include "asm/dolphin/dvd/dvdlow/__DVDLowSetWAType.s"
}
#pragma pop


/* ############################################################################################## */
/* 8044C8C0-8044C8E8 0028+00 rc=1 efc=0 rfr=False None .bss       AlarmForBreak                                                */
static u8 AlarmForBreak[40];

/* 803484B8-803484F0 0038+00 rc=1 efc=1 rfr=False None .text      __DVDLowTestAlarm                                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void __DVDLowTestAlarm() {
	nofralloc
#include "asm/dolphin/dvd/dvdlow/__DVDLowTestAlarm.s"
}
#pragma pop


/* ############################################################################################## */
/* 8044C8E8-8044C8F4 000C+00 rc=0 efc=0 rfr=False None .bss       Prev                                                         */
u8 Prev[12];

/* 8044C8F4-8044C900 000C+00 rc=0 efc=0 rfr=False None .bss       Curr                                                         */
u8 Curr[12];

