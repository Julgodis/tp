// 
// Generated By: dol2asm
// Translation Unit: dvd
// 

#include "dol2asm.h"
#include "dolphin/types.h"
#include "dolphin/dvd/dvd.h"

// 
// Forward References:
// 


extern "C" static void defaultOptionalCommandChecker(); // 1
extern "C" void DVDInit(); // 1
extern "C" static void stateReadingFST(); // 1
extern "C" static void cbForStateReadingFST(); // 1
extern "C" static void cbForStateError(); // 1
extern "C" static void stateTimeout(); // 1
extern "C" static void stateGettingError(); // 1
extern "C" static void CategorizeError(); // 1
extern "C" static void cbForStateGettingError(); // 1
extern "C" static void cbForUnrecoveredError(); // 1
extern "C" static void cbForUnrecoveredErrorRetry(); // 1
extern "C" static void stateGoToRetry(); // 1
extern "C" static void cbForStateGoToRetry(); // 1
extern "C" static void stateCheckID(); // 1
extern "C" static void stateCheckID3(); // 1
extern "C" static void stateCheckID2a(); // 1
extern "C" static void cbForStateCheckID2a(); // 1
extern "C" static void stateCheckID2(); // 1
extern "C" static void cbForStateCheckID1(); // 1
extern "C" static void cbForStateCheckID2(); // 1
extern "C" static void cbForStateCheckID3(); // 1
extern "C" static void dvd__AlarmHandler(); // 1
extern "C" static void stateCoverClosed(); // 1
extern "C" static void stateCoverClosed_CMD(); // 1
extern "C" static void cbForStateCoverClosed(); // 1
extern "C" static void stateMotorStopped(); // 1
extern "C" static void cbForStateMotorStopped(); // 1
extern "C" static void stateReady(); // 1
extern "C" static void stateBusy(); // 1
extern "C" static void cbForStateBusy(); // 1
extern "C" void DVDReadAbsAsyncPrio(); // 1
extern "C" void DVDReadAbsAsyncForBS(); // 1
extern "C" void DVDReadDiskID(); // 1
extern "C" void DVDCancelStreamAsync(); // 1
extern "C" void DVDInquiryAsync(); // 1
extern "C" void DVDReset(); // 1
extern "C" void DVDGetCommandBlockStatus(); // 1
extern "C" void DVDGetDriveStatus(); // 1
extern "C" void DVDSetAutoInvalidation(); // 1
extern "C" void DVDResume(); // 1
extern "C" static void DVDCancelAsync(); // 1
extern "C" void DVDCancel(); // 1
extern "C" static void cbForCancelSync(); // 1
extern "C" void DVDGetCurrentDiskID(); // 1
extern "C" void DVDCheckDisk(); // 1
extern "C" void __DVDPrepareResetAsync(); // 1
extern "C" void __DVDTestAlarm(); // 1
extern "C" extern u8 lit_789[65 + 3 /* padding */];

// 
// External References:
// 


SECTION_INIT void memcpy(); // 1
extern "C" void OSReport(); // 1
extern "C" void OSPanic(); // 1
extern "C" void OSRegisterVersion(); // 1
extern "C" void OSCreateAlarm(); // 1
extern "C" void OSSetAlarm(); // 1
extern "C" void DCInvalidateRange(); // 1
extern "C" void OSDisableInterrupts(); // 1
extern "C" void OSRestoreInterrupts(); // 1
extern "C" void __OSSetInterruptHandler(); // 1
extern "C" void __OSUnmaskInterrupts(); // 1
extern "C" void OSInitThreadQueue(); // 1
extern "C" void OSSleepThread(); // 1
extern "C" void OSWakeupThread(); // 1
extern "C" void __DVDInitWA(); // 1
extern "C" void __DVDInterruptHandler(); // 1
extern "C" void DVDLowRead(); // 1
extern "C" void DVDLowSeek(); // 1
extern "C" void DVDLowWaitCoverClose(); // 1
extern "C" void DVDLowReadDiskID(); // 1
extern "C" void DVDLowStopMotor(); // 1
extern "C" void DVDLowRequestError(); // 1
extern "C" void DVDLowInquiry(); // 1
extern "C" void DVDLowAudioStream(); // 1
extern "C" void DVDLowRequestAudioStatus(); // 1
extern "C" void DVDLowAudioBufferConfig(); // 1
extern "C" void DVDLowReset(); // 1
extern "C" void DVDLowBreak(); // 1
extern "C" void DVDLowClearCallback(); // 1
extern "C" void __DVDLowTestAlarm(); // 1
extern "C" void __DVDFSInit(); // 1
extern "C" void __DVDClearWaitingQueue(); // 1
extern "C" void __DVDPushWaitingQueue(); // 1
extern "C" void __DVDPopWaitingQueue(); // 1
extern "C" void __DVDCheckWaitingQueue(); // 1
extern "C" void __DVDDequeueWaitingQueue(); // 1
extern "C" void __DVDStoreErrorCode(); // 1
extern "C" void DVDCompareDiskID(); // 1
extern "C" void __DVDPrintFatalMessage(); // 1
extern "C" void __fstLoad(); // 1
extern "C" void memcmp(); // 1
extern "C" extern u8 __DVDThreadQueue[8];

// 
// Declarations:
// 

/* 803490EC-803490F0 0004+00 rc=1 efc=0 rfr=False None .text      defaultOptionalCommandChecker                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void defaultOptionalCommandChecker() {
	nofralloc
#include "asm/dolphin/dvd/dvd/defaultOptionalCommandChecker.s"
}
#pragma pop


/* ############################################################################################## */
/* 803D1520-803D1568 0045+03 rc=1 efc=0 rfr=False None .data      @1                                                           */
SECTION_DATA static u8 dvd__lit_1[69 + 3 /* padding */] = {
	0x3C, 0x3C, 0x20, 0x44, 0x6F, 0x6C, 0x70, 0x68, 0x69, 0x6E, 0x20, 0x53, 0x44, 0x4B, 0x20, 0x2D,
	0x20, 0x44, 0x56, 0x44, 0x09, 0x72, 0x65, 0x6C, 0x65, 0x61, 0x73, 0x65, 0x20, 0x62, 0x75, 0x69,
	0x6C, 0x64, 0x3A, 0x20, 0x41, 0x70, 0x72, 0x20, 0x20, 0x35, 0x20, 0x32, 0x30, 0x30, 0x34, 0x20,
	0x30, 0x34, 0x3A, 0x31, 0x34, 0x3A, 0x35, 0x31, 0x20, 0x28, 0x30, 0x78, 0x32, 0x33, 0x30, 0x31,
	0x29, 0x20, 0x3E, 0x3E, 0x00,
	/* padding */
	0x00, 0x00, 0x00,
};

/* 803D1568-803D1574 000A+02 rc=1 efc=0 rfr=False None .data      @18                                                          */
SECTION_DATA static u8 lit_18[10 + 2 /* padding */] = {
	0x6C, 0x6F, 0x61, 0x64, 0x20, 0x66, 0x73, 0x74, 0x0A, 0x00,
	/* padding */
	0x00, 0x00,
};

/* 804509E8-804509EC 0004+00 rc=1 efc=0 rfr=False None .sdata     __DVDVersion                                                 */
SECTION_SDATA static void* __DVDVersion = (void*)&dvd__lit_1;

/* 80451778-8045177C 0004+00 rc=24 efc=0 rfr=False None .sbss      executing                                                    */
static u8 executing[4];

/* 8045177C-80451780 0004+00 rc=4 efc=0 rfr=False None .sbss      IDShouldBe                                                   */
static u8 IDShouldBe[4];

/* 80451780-80451784 0004+00 rc=3 efc=0 rfr=False None .sbss      bootInfo                                                     */
static u8 bootInfo[4];

/* 80451784-80451788 0004+00 rc=8 efc=0 rfr=False None .sbss      PauseFlag                                                    */
static u8 PauseFlag[4];

/* 80451788-8045178C 0004+00 rc=5 efc=0 rfr=False None .sbss      PausingFlag                                                  */
static u8 PausingFlag[4];

/* 8045178C-80451790 0004+00 rc=2 efc=0 rfr=False None .sbss      AutoFinishing                                                */
static u8 AutoFinishing[4];

/* 80451790-80451794 0004+00 rc=4 efc=0 rfr=False None .sbss      FatalErrorFlag                                               */
static u8 FatalErrorFlag[4];

/* 80451794-80451798 0004+00 rc=6 efc=0 rfr=False None .sbss      CurrCommand                                                  */
static u8 CurrCommand[4];

/* 80451798-8045179C 0004+00 rc=8 efc=0 rfr=False None .sbss      Canceling                                                    */
static u8 Canceling[4];

/* 8045179C-804517A0 0004+00 rc=8 efc=0 rfr=False None .sbss      CancelCallback                                               */
static u8 CancelCallback[4];

/* 804517A0-804517A4 0004+00 rc=9 efc=0 rfr=False None .sbss      ResumeFromHere                                               */
static u8 ResumeFromHere[4];

/* 804517A4-804517A8 0004+00 rc=1 efc=0 rfr=False None .sbss      CancelLastError                                              */
static u8 CancelLastError[4];

/* 804517A8-804517AC 0004+00 rc=1 efc=0 rfr=False None .sbss      LastError                                                    */
static u8 LastError[4];

/* 804517AC-804517B0 0004+00 rc=9 efc=0 rfr=False None .sbss      NumInternalRetry                                             */
static u8 NumInternalRetry[4];

/* 804517B0-804517B4 0004+00 rc=3 efc=0 rfr=False None .sbss      ResetRequired                                                */
static u8 ResetRequired[4];

/* 804517B4-804517B8 0004+00 rc=1 efc=0 rfr=False None .sbss      FirstTimeInBootrom                                           */
static u8 FirstTimeInBootrom[4];

/* 804517B8-804517BC 0004+00 rc=5 efc=0 rfr=False None .sbss      MotorState                                                   */
static u8 MotorState[4];

/* 804517BC-804517C0 0004+00 rc=1 efc=0 rfr=False None .sbss      DVDInitialized                                               */
static u8 DVDInitialized[4];

/* 803490F0-803491C8 00D8+00 rc=3 efc=3 rfr=False None .text      DVDInit                                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void DVDInit() {
	nofralloc
#include "asm/dolphin/dvd/dvd/DVDInit.s"
}
#pragma pop


/* ############################################################################################## */
/* 803D1574-803D15A8 0034+00 rc=2 efc=0 rfr=False None .data      @24                                                          */
SECTION_DATA static u8 lit_24[52] = {
	0x44, 0x56, 0x44, 0x43, 0x68, 0x61, 0x6E, 0x67, 0x65, 0x44, 0x69, 0x73, 0x6B, 0x28, 0x29, 0x3A,
	0x20, 0x46, 0x53, 0x54, 0x20, 0x69, 0x6E, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6E, 0x65, 0x77, 0x20,
	0x64, 0x69, 0x73, 0x63, 0x20, 0x69, 0x73, 0x20, 0x74, 0x6F, 0x6F, 0x20, 0x62, 0x69, 0x67, 0x2E,
	0x20, 0x20, 0x20, 0x00,
};

/* 8044C900-8044C920 0020+00 rc=8 efc=0 rfr=False None .bss       BB2                                                          */
static u8 BB2[32];

/* 804509EC-804509F0 0004+00 rc=6 efc=0 rfr=False None .sdata     autoInvalidation                                             */
SECTION_SDATA static u32 autoInvalidation = 0x00000001;

/* 804509F0-804509F4 0004+00 rc=1 efc=0 rfr=False None .sdata     checkOptionalCommand                                         */
SECTION_SDATA static void* checkOptionalCommand = (void*)defaultOptionalCommandChecker;

/* 804509F4-804509FC 0006+02 rc=2 efc=0 rfr=False None .sdata     @23                                                          */
SECTION_SDATA static u8 lit_23[6 + 2 /* padding */] = {
	0x64, 0x76, 0x64, 0x2E, 0x63, 0x00,
	/* padding */
	0x00, 0x00,
};

/* 804517C0-804517C8 0004+04 rc=6 efc=0 rfr=False None .sbss      LastState                                                    */
static u8 dvd__LastState[4 + 4 /* padding */];

/* 803491C8-8034925C 0094+00 rc=1 efc=0 rfr=False None .text      stateReadingFST                                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void stateReadingFST() {
	nofralloc
#include "asm/dolphin/dvd/dvd/stateReadingFST.s"
}
#pragma pop


/* ############################################################################################## */
/* 8044C920-8044C940 0020+00 rc=2 efc=0 rfr=False None .bss       CurrDiskID                                                   */
static u8 CurrDiskID[32];

/* 8044C940-8044C970 0030+00 rc=10 efc=0 rfr=False None .bss       DummyCommandBlock                                            */
static u8 DummyCommandBlock[48];

/* 8034925C-803492DC 0080+00 rc=2 efc=0 rfr=False None .text      cbForStateReadingFST                                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void cbForStateReadingFST() {
	nofralloc
#include "asm/dolphin/dvd/dvd/cbForStateReadingFST.s"
}
#pragma pop


/* 803492DC-80349388 00AC+00 rc=12 efc=0 rfr=False None .text      cbForStateError                                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void cbForStateError() {
	nofralloc
#include "asm/dolphin/dvd/dvd/cbForStateError.s"
}
#pragma pop


/* 80349388-803493BC 0034+00 rc=2 efc=0 rfr=False None .text      stateTimeout                                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void stateTimeout() {
	nofralloc
#include "asm/dolphin/dvd/dvd/stateTimeout.s"
}
#pragma pop


/* 803493BC-803493E4 0028+00 rc=1 efc=0 rfr=False None .text      stateGettingError                                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void stateGettingError() {
	nofralloc
#include "asm/dolphin/dvd/dvd/stateGettingError.s"
}
#pragma pop


/* 803493E4-80349498 00B4+00 rc=1 efc=0 rfr=False None .text      CategorizeError                                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void CategorizeError() {
	nofralloc
#include "asm/dolphin/dvd/dvd/CategorizeError.s"
}
#pragma pop


/* 80349498-803496FC 0264+00 rc=6 efc=0 rfr=False None .text      cbForStateGettingError                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void cbForStateGettingError() {
	nofralloc
#include "asm/dolphin/dvd/dvd/cbForStateGettingError.s"
}
#pragma pop


/* 803496FC-80349758 005C+00 rc=1 efc=0 rfr=False None .text      cbForUnrecoveredError                                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void cbForUnrecoveredError() {
	nofralloc
#include "asm/dolphin/dvd/dvd/cbForUnrecoveredError.s"
}
#pragma pop


/* 80349758-803497D8 0080+00 rc=1 efc=0 rfr=False None .text      cbForUnrecoveredErrorRetry                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void cbForUnrecoveredErrorRetry() {
	nofralloc
#include "asm/dolphin/dvd/dvd/cbForUnrecoveredErrorRetry.s"
}
#pragma pop


/* 803497D8-80349800 0028+00 rc=2 efc=0 rfr=False None .text      stateGoToRetry                                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void stateGoToRetry() {
	nofralloc
#include "asm/dolphin/dvd/dvd/stateGoToRetry.s"
}
#pragma pop


/* 80349800-80349940 0140+00 rc=1 efc=0 rfr=False None .text      cbForStateGoToRetry                                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void cbForStateGoToRetry() {
	nofralloc
#include "asm/dolphin/dvd/dvd/cbForStateGoToRetry.s"
}
#pragma pop


/* 80349940-80349A20 00E0+00 rc=1 efc=0 rfr=False None .text      stateCheckID                                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void stateCheckID() {
	nofralloc
#include "asm/dolphin/dvd/dvd/stateCheckID.s"
}
#pragma pop


/* 80349A20-80349A54 0034+00 rc=1 efc=0 rfr=False None .text      stateCheckID3                                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void stateCheckID3() {
	nofralloc
#include "asm/dolphin/dvd/dvd/stateCheckID3.s"
}
#pragma pop


/* 80349A54-80349A88 0034+00 rc=1 efc=0 rfr=False None .text      stateCheckID2a                                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void stateCheckID2a() {
	nofralloc
#include "asm/dolphin/dvd/dvd/stateCheckID2a.s"
}
#pragma pop


/* 80349A88-80349AF0 0068+00 rc=1 efc=0 rfr=False None .text      cbForStateCheckID2a                                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void cbForStateCheckID2a() {
	nofralloc
#include "asm/dolphin/dvd/dvd/cbForStateCheckID2a.s"
}
#pragma pop


/* 80349AF0-80349B28 0038+00 rc=1 efc=0 rfr=False None .text      stateCheckID2                                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void stateCheckID2() {
	nofralloc
#include "asm/dolphin/dvd/dvd/stateCheckID2.s"
}
#pragma pop


/* 80349B28-80349C24 00FC+00 rc=1 efc=0 rfr=False None .text      cbForStateCheckID1                                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void cbForStateCheckID1() {
	nofralloc
#include "asm/dolphin/dvd/dvd/cbForStateCheckID1.s"
}
#pragma pop


/* 80349C24-80349CFC 00D8+00 rc=1 efc=0 rfr=False None .text      cbForStateCheckID2                                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void cbForStateCheckID2() {
	nofralloc
#include "asm/dolphin/dvd/dvd/cbForStateCheckID2.s"
}
#pragma pop


/* 80349CFC-80349DEC 00F0+00 rc=1 efc=0 rfr=False None .text      cbForStateCheckID3                                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void cbForStateCheckID3() {
	nofralloc
#include "asm/dolphin/dvd/dvd/cbForStateCheckID3.s"
}
#pragma pop


/* 80349DEC-80349E30 0044+00 rc=3 efc=0 rfr=False None .text      AlarmHandler                                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void dvd__AlarmHandler() {
	nofralloc
#include "asm/dolphin/dvd/dvd/dvd__AlarmHandler.s"
}
#pragma pop


/* 80349E30-80349F04 00D4+00 rc=1 efc=0 rfr=False None .text      stateCoverClosed                                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void stateCoverClosed() {
	nofralloc
#include "asm/dolphin/dvd/dvd/stateCoverClosed.s"
}
#pragma pop


/* 80349F04-80349F34 0030+00 rc=1 efc=0 rfr=False None .text      stateCoverClosed_CMD                                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void stateCoverClosed_CMD() {
	nofralloc
#include "asm/dolphin/dvd/dvd/stateCoverClosed_CMD.s"
}
#pragma pop


/* 80349F34-80349F98 0064+00 rc=1 efc=0 rfr=False None .text      cbForStateCoverClosed                                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void cbForStateCoverClosed() {
	nofralloc
#include "asm/dolphin/dvd/dvd/cbForStateCoverClosed.s"
}
#pragma pop


/* 80349F98-80349FC0 0028+00 rc=3 efc=0 rfr=False None .text      stateMotorStopped                                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void stateMotorStopped() {
	nofralloc
#include "asm/dolphin/dvd/dvd/stateMotorStopped.s"
}
#pragma pop


/* 80349FC0-8034A0AC 00EC+00 rc=4 efc=0 rfr=False None .text      cbForStateMotorStopped                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void cbForStateMotorStopped() {
	nofralloc
#include "asm/dolphin/dvd/dvd/cbForStateMotorStopped.s"
}
#pragma pop


/* 8034A0AC-8034A394 02E8+00 rc=18 efc=0 rfr=False None .text      stateReady                                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void stateReady() {
	nofralloc
#include "asm/dolphin/dvd/dvd/stateReady.s"
}
#pragma pop


/* ############################################################################################## */
/* 803D15A8-803D15EC 0044+00 rc=1 efc=0 rfr=False None .data      @359                                                         */
SECTION_DATA static void* dvd__lit_359[17] = {
	/* 0    */ (void*)(((char*)stateBusy)+0x318),
	/* 1    */ (void*)(((char*)stateBusy)+0x6C),
	/* 2    */ (void*)(((char*)stateBusy)+0x10C),
	/* 3    */ (void*)(((char*)stateBusy)+0x130),
	/* 4    */ (void*)(((char*)stateBusy)+0x6C),
	/* 5    */ (void*)(((char*)stateBusy)+0x40),
	/* 6    */ (void*)(((char*)stateBusy)+0x150),
	/* 7    */ (void*)(((char*)stateBusy)+0x1B4),
	/* 8    */ (void*)(((char*)stateBusy)+0x1E0),
	/* 9    */ (void*)(((char*)stateBusy)+0x214),
	/* 10   */ (void*)(((char*)stateBusy)+0x238),
	/* 11   */ (void*)(((char*)stateBusy)+0x25C),
	/* 12   */ (void*)(((char*)stateBusy)+0x280),
	/* 13   */ (void*)(((char*)stateBusy)+0x2A4),
	/* 14   */ (void*)(((char*)stateBusy)+0x2CC),
	/* 15   */ (void*)(((char*)stateBusy)+0x140),
	/* 16   */ (void*)(((char*)stateBusy)+0x2F8),
};

/* 8034A394-8034A6D4 0340+00 rc=4 efc=0 rfr=False None .text      stateBusy                                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void stateBusy() {
	nofralloc
#include "asm/dolphin/dvd/dvd/stateBusy.s"
}
#pragma pop


/* ############################################################################################## */
/* 803D15EC-803D15F8 000C+00 rc=1 efc=0 rfr=False None .data      ImmCommand                                                   */
SECTION_DATA static u8 ImmCommand[12] = {
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
};

/* 804509FC-80450A00 0004+00 rc=1 efc=0 rfr=False None .sdata     DmaCommand                                                   */
SECTION_SDATA static u32 DmaCommand = 0xFFFFFFFF;

/* 8034A6D4-8034AD2C 0658+00 rc=1 efc=0 rfr=False None .text      cbForStateBusy                                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void cbForStateBusy() {
	nofralloc
#include "asm/dolphin/dvd/dvd/cbForStateBusy.s"
}
#pragma pop


/* 8034AD2C-8034AE08 00DC+00 rc=5 efc=5 rfr=False None .text      DVDReadAbsAsyncPrio                                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void DVDReadAbsAsyncPrio() {
	nofralloc
#include "asm/dolphin/dvd/dvd/DVDReadAbsAsyncPrio.s"
}
#pragma pop


/* 8034AE08-8034AED8 00D0+00 rc=1 efc=1 rfr=False None .text      DVDReadAbsAsyncForBS                                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void DVDReadAbsAsyncForBS() {
	nofralloc
#include "asm/dolphin/dvd/dvd/DVDReadAbsAsyncForBS.s"
}
#pragma pop


/* 8034AED8-8034AFAC 00D4+00 rc=2 efc=2 rfr=False None .text      DVDReadDiskID                                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void DVDReadDiskID() {
	nofralloc
#include "asm/dolphin/dvd/dvd/DVDReadDiskID.s"
}
#pragma pop


/* 8034AFAC-8034B068 00BC+00 rc=1 efc=1 rfr=False None .text      DVDCancelStreamAsync                                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void DVDCancelStreamAsync() {
	nofralloc
#include "asm/dolphin/dvd/dvd/DVDCancelStreamAsync.s"
}
#pragma pop


/* 8034B068-8034B138 00D0+00 rc=1 efc=1 rfr=False None .text      DVDInquiryAsync                                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void DVDInquiryAsync() {
	nofralloc
#include "asm/dolphin/dvd/dvd/DVDInquiryAsync.s"
}
#pragma pop


/* 8034B138-8034B17C 0044+00 rc=17 efc=2 rfr=False None .text      DVDReset                                                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void DVDReset() {
	nofralloc
#include "asm/dolphin/dvd/dvd/DVDReset.s"
}
#pragma pop


/* 8034B17C-8034B1C8 004C+00 rc=6 efc=6 rfr=False None .text      DVDGetCommandBlockStatus                                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void DVDGetCommandBlockStatus() {
	nofralloc
#include "asm/dolphin/dvd/dvd/DVDGetCommandBlockStatus.s"
}
#pragma pop


/* 8034B1C8-8034B274 00AC+00 rc=7 efc=7 rfr=False None .text      DVDGetDriveStatus                                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void DVDGetDriveStatus() {
	nofralloc
#include "asm/dolphin/dvd/dvd/DVDGetDriveStatus.s"
}
#pragma pop


/* 8034B274-8034B284 0010+00 rc=1 efc=1 rfr=False None .text      DVDSetAutoInvalidation                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void DVDSetAutoInvalidation() {
	nofralloc
#include "asm/dolphin/dvd/dvd/DVDSetAutoInvalidation.s"
}
#pragma pop


/* 8034B284-8034B2D4 0050+00 rc=1 efc=1 rfr=False None .text      DVDResume                                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void DVDResume() {
	nofralloc
#include "asm/dolphin/dvd/dvd/DVDResume.s"
}
#pragma pop


/* ############################################################################################## */
/* 803D15F8-803D163C 0041+03 rc=0 efc=0 rfr=False None .data      @789                                                         */
SECTION_DATA u8 lit_789[65 + 3 /* padding */] = {
	0x44, 0x56, 0x44, 0x43, 0x68, 0x61, 0x6E, 0x67, 0x65, 0x44, 0x69, 0x73, 0x6B, 0x41, 0x73, 0x79,
	0x6E, 0x63, 0x28, 0x29, 0x3A, 0x20, 0x59, 0x6F, 0x75, 0x20, 0x63, 0x61, 0x6E, 0x27, 0x74, 0x20,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x20, 0x4E, 0x55, 0x4C, 0x4C, 0x20, 0x74, 0x6F, 0x20,
	0x63, 0x6F, 0x6D, 0x70, 0x61, 0x6E, 0x79, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x2E, 0x20, 0x20, 0x0A,
	0x00,
	/* padding */
	0x00, 0x00, 0x00,
};

/* 803D163C-803D1670 0034+00 rc=1 efc=0 rfr=False None .data      @956                                                         */
SECTION_DATA static void* lit_956[13] = {
	/* 0    */ (void*)(((char*)DVDCancelAsync)+0x50),
	/* 1    */ (void*)(((char*)DVDCancelAsync)+0x50),
	/* 2    */ (void*)(((char*)DVDCancelAsync)+0x70),
	/* 3    */ (void*)(((char*)DVDCancelAsync)+0xB4),
	/* 4    */ (void*)(((char*)DVDCancelAsync)+0x100),
	/* 5    */ (void*)(((char*)DVDCancelAsync)+0x17C),
	/* 6    */ (void*)(((char*)DVDCancelAsync)+0x17C),
	/* 7    */ (void*)(((char*)DVDCancelAsync)+0x17C),
	/* 8    */ (void*)(((char*)DVDCancelAsync)+0x17C),
	/* 9    */ (void*)(((char*)DVDCancelAsync)+0x254),
	/* 10   */ (void*)(((char*)DVDCancelAsync)+0x254),
	/* 11   */ (void*)(((char*)DVDCancelAsync)+0x50),
	/* 12   */ (void*)(((char*)DVDCancelAsync)+0x17C),
};

/* 8034B2D4-8034B550 027C+00 rc=3 efc=0 rfr=False None .text      DVDCancelAsync                                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void DVDCancelAsync() {
	nofralloc
#include "asm/dolphin/dvd/dvd/DVDCancelAsync.s"
}
#pragma pop


/* 8034B550-8034B5FC 00AC+00 rc=1 efc=1 rfr=False None .text      DVDCancel                                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void DVDCancel() {
	nofralloc
#include "asm/dolphin/dvd/dvd/DVDCancel.s"
}
#pragma pop


/* 8034B5FC-8034B620 0024+00 rc=1 efc=0 rfr=False None .text      cbForCancelSync                                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void cbForCancelSync() {
	nofralloc
#include "asm/dolphin/dvd/dvd/cbForCancelSync.s"
}
#pragma pop


/* 8034B620-8034B628 0008+00 rc=3 efc=3 rfr=False None .text      DVDGetCurrentDiskID                                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void DVDGetCurrentDiskID() {
	nofralloc
#include "asm/dolphin/dvd/dvd/DVDGetCurrentDiskID.s"
}
#pragma pop


/* ############################################################################################## */
/* 803D1670-803D16A8 0034+04 rc=1 efc=0 rfr=False None .data      @1060                                                        */
SECTION_DATA static void* dvd__lit_1060[13 + 1 /* padding */] = {
	/* 0    */ (void*)(((char*)DVDCheckDisk)+0x98),
	/* 1    */ (void*)(((char*)DVDCheckDisk)+0xA0),
	/* 2    */ (void*)(((char*)DVDCheckDisk)+0x90),
	/* 3    */ (void*)(((char*)DVDCheckDisk)+0x90),
	/* 4    */ (void*)(((char*)DVDCheckDisk)+0x98),
	/* 5    */ (void*)(((char*)DVDCheckDisk)+0x98),
	/* 6    */ (void*)(((char*)DVDCheckDisk)+0x98),
	/* 7    */ (void*)(((char*)DVDCheckDisk)+0x98),
	/* 8    */ (void*)(((char*)DVDCheckDisk)+0x98),
	/* 9    */ (void*)(((char*)DVDCheckDisk)+0xA0),
	/* 10   */ (void*)(((char*)DVDCheckDisk)+0x90),
	/* 11   */ (void*)(((char*)DVDCheckDisk)+0x90),
	/* 12   */ (void*)(((char*)DVDCheckDisk)+0x98),
	/* padding */
	NULL,
};

/* 8034B628-8034B720 00F8+00 rc=5 efc=4 rfr=False None .text      DVDCheckDisk                                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void DVDCheckDisk() {
	nofralloc
#include "asm/dolphin/dvd/dvd/DVDCheckDisk.s"
}
#pragma pop


/* 8034B720-8034B83C 011C+00 rc=1 efc=1 rfr=False None .text      __DVDPrepareResetAsync                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void __DVDPrepareResetAsync() {
	nofralloc
#include "asm/dolphin/dvd/dvd/__DVDPrepareResetAsync.s"
}
#pragma pop


/* ############################################################################################## */
/* 8044C970-8044C998 0028+00 rc=1 efc=0 rfr=False None .bss       ResetAlarm                                                   */
static u8 ResetAlarm[40];

/* 8034B83C-8034B874 0038+00 rc=1 efc=1 rfr=False None .text      __DVDTestAlarm                                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void __DVDTestAlarm() {
	nofralloc
#include "asm/dolphin/dvd/dvd/__DVDTestAlarm.s"
}
#pragma pop


