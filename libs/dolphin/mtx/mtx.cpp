// 
// Generated By: dol2asm
// Translation Unit: mtx
// 

#include "dol2asm.h"
#include "dolphin/types.h"
#include "dolphin/mtx/mtx.h"

// 
// Forward References:
// 


extern "C" void PSMTXIdentity(); // 1
extern "C" void PSMTXCopy(); // 1
extern "C" void PSMTXConcat(); // 1
extern "C" void PSMTXInverse(); // 1
extern "C" void PSMTXRotRad(); // 1
extern "C" static void PSMTXRotTrig(); // 1
extern "C" static void __PSMTXRotAxisRadInternal(); // 1
extern "C" void PSMTXRotAxisRad(); // 1
extern "C" void PSMTXTrans(); // 1
extern "C" void PSMTXTransApply(); // 1
extern "C" void PSMTXScale(); // 1
extern "C" void PSMTXScaleApply(); // 1
extern "C" void PSMTXQuat(); // 1
extern "C" void C_MTXLookAt(); // 1
extern "C" void C_MTXLightPerspective(); // 1
extern "C" void C_MTXLightOrtho(); // 1

// 
// External References:
// 


extern "C" void PSVECNormalize(); // 1
extern "C" void PSVECCrossProduct(); // 1
extern "C" void tanf(); // 1
extern "C" void sinf(); // 1
extern "C" void cosf(); // 1

// 
// Declarations:
// 

/* ############################################################################################## */
/* 80456508-8045650C 0004+00 s=6 e=0 z=0  None .sdata2    @96                                                          */
SECTION_SDATA2 static u32 lit_96 = 0x3F800000;

/* 8045650C-80456510 0004+00 s=6 e=0 z=0  None .sdata2    @97                                                          */
SECTION_SDATA2 static u8 lit_97[4] = {
	0x00, 0x00, 0x00, 0x00,
};

/* 80346484-803464B0 002C+00 s=0 e=27 z=0  None .text      PSMTXIdentity                                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void PSMTXIdentity() {
	nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXIdentity.s"
}
#pragma pop


/* 803464B0-803464E4 0034+00 s=0 e=119 z=0  None .text      PSMTXCopy                                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void PSMTXCopy() {
	nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXCopy.s"
}
#pragma pop


/* ############################################################################################## */
/* 804509D0-804509D8 0008+00 s=1 e=0 z=0  None .sdata     Unit01                                                       */
SECTION_SDATA static u8 Unit01[8] = {
	0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00,
};

/* 803464E4-803465B0 00CC+00 s=0 e=109 z=0  None .text      PSMTXConcat                                                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void PSMTXConcat() {
	nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXConcat.s"
}
#pragma pop


/* 803465B0-803466A8 00F8+00 s=0 e=43 z=0  None .text      PSMTXInverse                                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void PSMTXInverse() {
	nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXInverse.s"
}
#pragma pop


/* 803466A8-80346718 0070+00 s=0 e=17 z=0  None .text      PSMTXRotRad                                                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void PSMTXRotRad() {
	nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXRotRad.s"
}
#pragma pop


/* 80346718-803467C8 00B0+00 s=1 e=0 z=0  None .text      PSMTXRotTrig                                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void PSMTXRotTrig() {
	nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXRotTrig.s"
}
#pragma pop


/* ############################################################################################## */
/* 80456510-80456514 0004+00 s=2 e=0 z=0  None .sdata2    @190                                                         */
SECTION_SDATA2 static u32 lit_190 = 0x3F000000;

/* 80456514-80456518 0004+00 s=1 e=0 z=0  None .sdata2    @191                                                         */
SECTION_SDATA2 static u32 lit_191 = 0x40400000;

/* 803467C8-80346878 00B0+00 s=1 e=0 z=0  None .text      __PSMTXRotAxisRadInternal                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void __PSMTXRotAxisRadInternal() {
	nofralloc
#include "asm/dolphin/mtx/mtx/__PSMTXRotAxisRadInternal.s"
}
#pragma pop


/* 80346878-803468E8 0070+00 s=0 e=6 z=0  None .text      PSMTXRotAxisRad                                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void PSMTXRotAxisRad() {
	nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXRotAxisRad.s"
}
#pragma pop


/* 803468E8-8034691C 0034+00 s=0 e=38 z=0  None .text      PSMTXTrans                                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void PSMTXTrans() {
	nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXTrans.s"
}
#pragma pop


/* 8034691C-80346968 004C+00 s=0 e=3 z=0  None .text      PSMTXTransApply                                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void PSMTXTransApply() {
	nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXTransApply.s"
}
#pragma pop


/* 80346968-80346990 0028+00 s=0 e=14 z=0  None .text      PSMTXScale                                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void PSMTXScale() {
	nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXScale.s"
}
#pragma pop


/* 80346990-803469E8 0058+00 s=0 e=1 z=0  None .text      PSMTXScaleApply                                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void PSMTXScaleApply() {
	nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXScaleApply.s"
}
#pragma pop


/* 803469E8-80346A8C 00A4+00 s=0 e=8 z=0  None .text      PSMTXQuat                                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void PSMTXQuat() {
	nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXQuat.s"
}
#pragma pop


/* 80346A8C-80346C18 018C+00 s=0 e=2 z=0  None .text      C_MTXLookAt                                                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void C_MTXLookAt() {
	nofralloc
#include "asm/dolphin/mtx/mtx/C_MTXLookAt.s"
}
#pragma pop


/* ############################################################################################## */
/* 80456518-8045651C 0004+00 s=1 e=0 z=0  None .sdata2    @206                                                         */
SECTION_SDATA2 static u32 lit_206 = 0x40000000;

/* 8045651C-80456520 0004+00 s=1 e=0 z=0  None .sdata2    @227                                                         */
SECTION_SDATA2 static u32 lit_227 = 0xBF800000;

/* 80456520-80456528 0004+04 s=1 e=0 z=0  None .sdata2    @230                                                         */
SECTION_SDATA2 static f32 lit_230[1 + 1 /* padding */] = {
	0.01745329238474369f,
	/* padding */
	0.0f,
};

/* 80346C18-80346CE4 00CC+00 s=0 e=4 z=0  None .text      C_MTXLightPerspective                                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void C_MTXLightPerspective() {
	nofralloc
#include "asm/dolphin/mtx/mtx/C_MTXLightPerspective.s"
}
#pragma pop


/* 80346CE4-80346D6C 0088+00 s=0 e=2 z=0  None .text      C_MTXLightOrtho                                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void C_MTXLightOrtho() {
	nofralloc
#include "asm/dolphin/mtx/mtx/C_MTXLightOrtho.s"
}
#pragma pop


