// 
// Generated By: dol2asm
// Translation Unit: mtx
// 

#include "dolphin/types.h"

// 
// Forward References:
// 

extern "C" void PSMTXIdentity();
extern "C" void PSMTXCopy();
extern "C" void PSMTXConcat();
extern "C" void PSMTXInverse();
extern "C" void PSMTXRotRad();
extern "C" static void PSMTXRotTrig();
extern "C" static void __PSMTXRotAxisRadInternal();
extern "C" void PSMTXRotAxisRad();
extern "C" void PSMTXTrans();
extern "C" void PSMTXTransApply();
extern "C" void PSMTXScale();
extern "C" void PSMTXScaleApply();
extern "C" void PSMTXQuat();
extern "C" void C_MTXLookAt();
extern "C" void C_MTXLightPerspective();
extern "C" void C_MTXLightOrtho();

extern "C" void PSMTXIdentity();
extern "C" void PSMTXCopy();
extern "C" void PSMTXConcat();
extern "C" void PSMTXInverse();
extern "C" void PSMTXRotRad();
extern "C" static void PSMTXRotTrig();
extern "C" static void __PSMTXRotAxisRadInternal();
extern "C" void PSMTXRotAxisRad();
extern "C" void PSMTXTrans();
extern "C" void PSMTXTransApply();
extern "C" void PSMTXScale();
extern "C" void PSMTXScaleApply();
extern "C" void PSMTXQuat();
extern "C" void C_MTXLookAt();
extern "C" void C_MTXLightPerspective();
extern "C" void C_MTXLightOrtho();
SECTION_SDATA extern u8 mtx__Unit01[8];
SECTION_SDATA2 extern f32 mtx__lit_96;
SECTION_SDATA2 extern u8 mtx__lit_97[4];
SECTION_SDATA2 extern f32 lit_190;
SECTION_SDATA2 extern f32 lit_191;
SECTION_SDATA2 extern f32 mtx__lit_206;
SECTION_SDATA2 extern f32 lit_227;
SECTION_SDATA2 extern f32 lit_230;

// 
// External References:
// 

extern "C" void PSVECNormalize();
extern "C" void PSVECCrossProduct();
extern "C" void tanf();
extern "C" void sinf();
extern "C" void cosf();

extern "C" void PSVECNormalize();
extern "C" void PSVECCrossProduct();
extern "C" void tanf();
extern "C" void sinf();
extern "C" void cosf();

// 
// Declarations:
// 

/* ############################################################################################## */
/* 80456508-8045650C 0004+00 rc=6 efc=0 .sdata2    @96                                                          */
f32 mtx__lit_96 = 1.0f;

/* 8045650C-80456510 0004+00 rc=6 efc=0 .sdata2    @97                                                          */
u8 mtx__lit_97[4] = {
	0x00, 0x00, 0x00, 0x00,
};

/* 80346484-803464B0 002C+00 rc=27 efc=27 .text      PSMTXIdentity                                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void PSMTXIdentity() {
	nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXIdentity.s"
}
#pragma pop


/* 803464B0-803464E4 0034+00 rc=119 efc=119 .text      PSMTXCopy                                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void PSMTXCopy() {
	nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXCopy.s"
}
#pragma pop


/* ############################################################################################## */
/* 804509D0-804509D8 0008+00 rc=1 efc=0 .sdata     Unit01                                                       */
u8 mtx__Unit01[8] = {
	0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00,
};

/* 803464E4-803465B0 00CC+00 rc=109 efc=109 .text      PSMTXConcat                                                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void PSMTXConcat() {
	nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXConcat.s"
}
#pragma pop


/* 803465B0-803466A8 00F8+00 rc=43 efc=43 .text      PSMTXInverse                                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void PSMTXInverse() {
	nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXInverse.s"
}
#pragma pop


/* 803466A8-80346718 0070+00 rc=17 efc=17 .text      PSMTXRotRad                                                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void PSMTXRotRad() {
	nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXRotRad.s"
}
#pragma pop


/* 80346718-803467C8 00B0+00 rc=1 efc=0 .text      PSMTXRotTrig                                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void PSMTXRotTrig() {
	nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXRotTrig.s"
}
#pragma pop


/* ############################################################################################## */
/* 80456510-80456514 0004+00 rc=2 efc=0 .sdata2    @190                                                         */
f32 lit_190 = 0.5f;

/* 80456514-80456518 0004+00 rc=1 efc=0 .sdata2    @191                                                         */
f32 lit_191 = 3.0f;

/* 803467C8-80346878 00B0+00 rc=1 efc=0 .text      __PSMTXRotAxisRadInternal                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void __PSMTXRotAxisRadInternal() {
	nofralloc
#include "asm/dolphin/mtx/mtx/__PSMTXRotAxisRadInternal.s"
}
#pragma pop


/* 80346878-803468E8 0070+00 rc=6 efc=6 .text      PSMTXRotAxisRad                                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void PSMTXRotAxisRad() {
	nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXRotAxisRad.s"
}
#pragma pop


/* 803468E8-8034691C 0034+00 rc=38 efc=38 .text      PSMTXTrans                                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void PSMTXTrans() {
	nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXTrans.s"
}
#pragma pop


/* 8034691C-80346968 004C+00 rc=3 efc=3 .text      PSMTXTransApply                                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void PSMTXTransApply() {
	nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXTransApply.s"
}
#pragma pop


/* 80346968-80346990 0028+00 rc=14 efc=14 .text      PSMTXScale                                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void PSMTXScale() {
	nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXScale.s"
}
#pragma pop


/* 80346990-803469E8 0058+00 rc=1 efc=1 .text      PSMTXScaleApply                                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void PSMTXScaleApply() {
	nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXScaleApply.s"
}
#pragma pop


/* 803469E8-80346A8C 00A4+00 rc=8 efc=8 .text      PSMTXQuat                                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void PSMTXQuat() {
	nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXQuat.s"
}
#pragma pop


/* 80346A8C-80346C18 018C+00 rc=2 efc=2 .text      C_MTXLookAt                                                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void C_MTXLookAt() {
	nofralloc
#include "asm/dolphin/mtx/mtx/C_MTXLookAt.s"
}
#pragma pop


/* ############################################################################################## */
/* 80456518-8045651C 0004+00 rc=1 efc=0 .sdata2    @206                                                         */
f32 mtx__lit_206 = 2.0f;

/* 8045651C-80456520 0004+00 rc=1 efc=0 .sdata2    @227                                                         */
f32 lit_227 = -1.0f;

/* 80456520-80456528 0004+04 rc=1 efc=0 .sdata2    @230                                                         */
f32 lit_230 = 0.01745329238474369f;
/* padding 4 bytes */

/* 80346C18-80346CE4 00CC+00 rc=4 efc=4 .text      C_MTXLightPerspective                                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void C_MTXLightPerspective() {
	nofralloc
#include "asm/dolphin/mtx/mtx/C_MTXLightPerspective.s"
}
#pragma pop


/* 80346CE4-80346D6C 0088+00 rc=2 efc=2 .text      C_MTXLightOrtho                                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void C_MTXLightOrtho() {
	nofralloc
#include "asm/dolphin/mtx/mtx/C_MTXLightOrtho.s"
}
#pragma pop


