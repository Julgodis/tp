// 
// Generated By: dol2asm
// 

#include "dolphin/types.h"

// 
// Additional Symbols:
// 

extern "C" {
extern void PSMTXIdentity();
extern void PSMTXCopy();
extern void PSMTXConcat();
extern void PSMTXInverse();
extern void PSMTXRotRad();
extern void PSMTXRotTrig();
extern void __PSMTXRotAxisRadInternal();
extern void PSMTXRotAxisRad();
extern void PSMTXTrans();
extern void PSMTXTransApply();
extern void PSMTXScale();
extern void PSMTXScaleApply();
extern void PSMTXQuat();
extern void C_MTXLookAt();
extern void C_MTXLightPerspective();
extern void C_MTXLightOrtho();
extern void PSVECNormalize();
extern void PSVECCrossProduct();
extern void tanf();
extern void sinf();
extern void cosf();
SECTION_SDATA extern u8 mtx__Unit01[8];
SECTION_SDATA2 extern u8 mtx__LIT_96[4];
SECTION_SDATA2 extern u8 mtx__LIT_97[4];
SECTION_SDATA2 extern u8 LIT_190[4];
SECTION_SDATA2 extern u8 LIT_191[4];
SECTION_SDATA2 extern u8 mtx__LIT_206[4];
SECTION_SDATA2 extern u8 LIT_227[4];
SECTION_SDATA2 extern u8 LIT_230[8];
}


/* ###################################################################################### */
/*                                         .sdata                                         */
/* ###################################################################################### */

extern "C" {
/* 804509D0-804509D8 0008 .sdata     Unit01                                                       */
SECTION_SDATA u8 mtx__Unit01[8] = {
	0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00,
};
}


/* ###################################################################################### */
/*                                        .sdata2                                         */
/* ###################################################################################### */

extern "C" {
/* 80456508-8045650C 0004 .sdata2    @96                                                          */
SECTION_SDATA2 u8 mtx__LIT_96[4] = {
	0x3F, 0x80, 0x00, 0x00,
};
/* 8045650C-80456510 0004 .sdata2    @97                                                          */
SECTION_SDATA2 u8 mtx__LIT_97[4] = {
	0x00, 0x00, 0x00, 0x00,
};
/* 80456510-80456514 0004 .sdata2    @190                                                         */
SECTION_SDATA2 u8 LIT_190[4] = {
	0x3F, 0x00, 0x00, 0x00,
};
/* 80456514-80456518 0004 .sdata2    @191                                                         */
SECTION_SDATA2 u8 LIT_191[4] = {
	0x40, 0x40, 0x00, 0x00,
};
/* 80456518-8045651C 0004 .sdata2    @206                                                         */
SECTION_SDATA2 u8 mtx__LIT_206[4] = {
	0x40, 0x00, 0x00, 0x00,
};
/* 8045651C-80456520 0004 .sdata2    @227                                                         */
SECTION_SDATA2 u8 LIT_227[4] = {
	0xBF, 0x80, 0x00, 0x00,
};
/* 80456520-80456528 0004 .sdata2    @230                                                         */
SECTION_SDATA2 u8 LIT_230[8] = {
	0x3C, 0x8E, 0xFA, 0x35,
	/* padding */
	0x00, 0x00, 0x00, 0x00,
};
}


/* ###################################################################################### */
/*                                         .text                                          */
/* ###################################################################################### */

/* 80346484-803464B0 002C .text      PSMTXIdentity                                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void PSMTXIdentity() {
	nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXIdentity.s"
}
#pragma pop

/* 803464B0-803464E4 0034 .text      PSMTXCopy                                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void PSMTXCopy() {
	nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXCopy.s"
}
#pragma pop

/* 803464E4-803465B0 00CC .text      PSMTXConcat                                                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void PSMTXConcat() {
	nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXConcat.s"
}
#pragma pop

/* 803465B0-803466A8 00F8 .text      PSMTXInverse                                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void PSMTXInverse() {
	nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXInverse.s"
}
#pragma pop

/* 803466A8-80346718 0070 .text      PSMTXRotRad                                                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void PSMTXRotRad() {
	nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXRotRad.s"
}
#pragma pop

/* 80346718-803467C8 00B0 .text      PSMTXRotTrig                                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void PSMTXRotTrig() {
	nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXRotTrig.s"
}
#pragma pop

/* 803467C8-80346878 00B0 .text      __PSMTXRotAxisRadInternal                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void __PSMTXRotAxisRadInternal() {
	nofralloc
#include "asm/dolphin/mtx/mtx/__PSMTXRotAxisRadInternal.s"
}
#pragma pop

/* 80346878-803468E8 0070 .text      PSMTXRotAxisRad                                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void PSMTXRotAxisRad() {
	nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXRotAxisRad.s"
}
#pragma pop

/* 803468E8-8034691C 0034 .text      PSMTXTrans                                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void PSMTXTrans() {
	nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXTrans.s"
}
#pragma pop

/* 8034691C-80346968 004C .text      PSMTXTransApply                                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void PSMTXTransApply() {
	nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXTransApply.s"
}
#pragma pop

/* 80346968-80346990 0028 .text      PSMTXScale                                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void PSMTXScale() {
	nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXScale.s"
}
#pragma pop

/* 80346990-803469E8 0058 .text      PSMTXScaleApply                                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void PSMTXScaleApply() {
	nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXScaleApply.s"
}
#pragma pop

/* 803469E8-80346A8C 00A4 .text      PSMTXQuat                                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void PSMTXQuat() {
	nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXQuat.s"
}
#pragma pop

/* 80346A8C-80346C18 018C .text      C_MTXLookAt                                                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void C_MTXLookAt() {
	nofralloc
#include "asm/dolphin/mtx/mtx/C_MTXLookAt.s"
}
#pragma pop

/* 80346C18-80346CE4 00CC .text      C_MTXLightPerspective                                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void C_MTXLightPerspective() {
	nofralloc
#include "asm/dolphin/mtx/mtx/C_MTXLightPerspective.s"
}
#pragma pop

/* 80346CE4-80346D6C 0088 .text      C_MTXLightOrtho                                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void C_MTXLightOrtho() {
	nofralloc
#include "asm/dolphin/mtx/mtx/C_MTXLightOrtho.s"
}
#pragma pop


