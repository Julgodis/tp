// 
// Generated By: dol2asm
// Translation Unit: OSMutex
// 

#include "dol2asm.h"
#include "dolphin/types.h"
#include "dolphin/os/OSMutex.h"

// 
// Forward References:
// 


extern "C" void OSInitMutex(); // 1
extern "C" void OSLockMutex(); // 1
extern "C" void OSUnlockMutex(); // 1
extern "C" void __OSUnlockAllMutex(); // 1
extern "C" void OSTryLockMutex(); // 1
extern "C" void OSInitCond(); // 1
extern "C" void OSWaitCond(); // 1
extern "C" void OSSignalCond(); // 1
extern "C" static void __OSCheckMutex(); // 1
extern "C" void __OSCheckDeadLock(); // 1
extern "C" void __OSCheckMutexes(); // 1

// 
// External References:
// 


extern "C" void OSDisableInterrupts(); // 1
extern "C" void OSRestoreInterrupts(); // 1
extern "C" void OSInitThreadQueue(); // 1
extern "C" void OSGetCurrentThread(); // 1
extern "C" void OSDisableScheduler(); // 1
extern "C" void OSEnableScheduler(); // 1
extern "C" void __OSGetEffectivePriority(); // 1
extern "C" void __OSPromoteThread(); // 1
extern "C" void OSSleepThread(); // 1
extern "C" void OSWakeupThread(); // 1

// 
// Declarations:
// 

/* 8033F008-8033F040 0038+00 s=0 e=12 z=0  None .text      OSInitMutex                                                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void OSInitMutex() {
	nofralloc
#include "asm/dolphin/os/OSMutex/OSInitMutex.s"
}
#pragma pop


/* 8033F040-8033F11C 00DC+00 s=1 e=62 z=0  None .text      OSLockMutex                                                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void OSLockMutex() {
	nofralloc
#include "asm/dolphin/os/OSMutex/OSLockMutex.s"
}
#pragma pop


/* 8033F11C-8033F1E4 00C8+00 s=0 e=71 z=0  None .text      OSUnlockMutex                                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void OSUnlockMutex() {
	nofralloc
#include "asm/dolphin/os/OSMutex/OSUnlockMutex.s"
}
#pragma pop


/* 8033F1E4-8033F254 0070+00 s=0 e=2 z=0  None .text      __OSUnlockAllMutex                                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void __OSUnlockAllMutex() {
	nofralloc
#include "asm/dolphin/os/OSMutex/__OSUnlockAllMutex.s"
}
#pragma pop


/* 8033F254-8033F310 00BC+00 s=0 e=9 z=0  None .text      OSTryLockMutex                                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void OSTryLockMutex() {
	nofralloc
#include "asm/dolphin/os/OSMutex/OSTryLockMutex.s"
}
#pragma pop


/* 8033F310-8033F330 0020+00 s=0 e=1 z=0  None .text      OSInitCond                                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void OSInitCond() {
	nofralloc
#include "asm/dolphin/os/OSMutex/OSInitCond.s"
}
#pragma pop


/* 8033F330-8033F404 00D4+00 s=0 e=1 z=0  None .text      OSWaitCond                                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void OSWaitCond() {
	nofralloc
#include "asm/dolphin/os/OSMutex/OSWaitCond.s"
}
#pragma pop


/* 8033F404-8033F424 0020+00 s=0 e=5 z=0  None .text      OSSignalCond                                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void OSSignalCond() {
	nofralloc
#include "asm/dolphin/os/OSMutex/OSSignalCond.s"
}
#pragma pop


/* 8033F424-8033F524 0100+00 s=1 e=0 z=0  None .text      __OSCheckMutex                                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void __OSCheckMutex() {
	nofralloc
#include "asm/dolphin/os/OSMutex/__OSCheckMutex.s"
}
#pragma pop


/* 8033F524-8033F55C 0038+00 s=0 e=1 z=0  None .text      __OSCheckDeadLock                                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void __OSCheckDeadLock() {
	nofralloc
#include "asm/dolphin/os/OSMutex/__OSCheckDeadLock.s"
}
#pragma pop


/* 8033F55C-8033F5D0 0074+00 s=0 e=1 z=0  None .text      __OSCheckMutexes                                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void __OSCheckMutexes() {
	nofralloc
#include "asm/dolphin/os/OSMutex/__OSCheckMutexes.s"
}
#pragma pop


