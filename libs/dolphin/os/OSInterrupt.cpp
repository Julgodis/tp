// 
// Generated By: dol2asm
// 

#include "dolphin/types.h"

// 
// Additional Symbols:
// 

extern "C" {
SECTION_INIT extern void memset();
extern void __OSSetExceptionHandler();
extern void OSLoadContext();
extern void OSDisableInterrupts();
extern void __RAS_OSDisableInterrupts_end();
extern void OSEnableInterrupts();
extern void OSRestoreInterrupts();
extern void __OSSetInterruptHandler();
extern void __OSGetInterruptHandler();
extern void __OSInterruptInit();
extern void SetInterruptMask();
extern void __OSMaskInterrupts();
extern void __OSUnmaskInterrupts();
extern void __OSDispatchInterrupt();
extern void ExternalInterruptHandler();
extern void OSDisableScheduler();
extern void OSEnableScheduler();
extern void __OSReschedule();
extern void OSGetTime();
SECTION_DATA extern u8 InterruptPrioTable[48];
SECTION_SBSS extern u8 InterruptHandlerTable[4];
SECTION_SBSS extern u8 __OSLastInterruptSrr0[4];
SECTION_SBSS extern u8 __OSLastInterrupt[2 + 6 /* padding */];
SECTION_SBSS extern u8 __OSLastInterruptTime[4];
SECTION_SBSS extern u8 data_80451684[4];
}


/* ###################################################################################### */
/*                                         .data                                          */
/* ###################################################################################### */

extern "C" {
/* 803D0758-803D0788 002C .data      InterruptPrioTable                                           */
SECTION_DATA u8 InterruptPrioTable[48] = {
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x40, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
	0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x20, 0x03, 0xFF, 0x8C, 0x00,
	0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
	/* padding */
	0x00, 0x00, 0x00, 0x00,
};
}


/* ###################################################################################### */
/*                                         .sbss                                          */
/* ###################################################################################### */

extern "C" {
/* 80451670-80451674 0004 .sbss      InterruptHandlerTable                                        */
SECTION_SBSS u8 InterruptHandlerTable[4];
/* 80451674-80451678 0004 .sbss      __OSLastInterruptSrr0                                        */
SECTION_SBSS u8 __OSLastInterruptSrr0[4];
/* 80451678-80451680 0002 .sbss      __OSLastInterrupt                                            */
SECTION_SBSS u8 __OSLastInterrupt[2 + 6 /* padding */];
/* 80451680-80451684 0004 .sbss      __OSLastInterruptTime                                        */
SECTION_SBSS u8 __OSLastInterruptTime[4];
/* 80451684-80451688 0004 .sbss      None                                                         */
SECTION_SBSS u8 data_80451684[4];
}


/* ###################################################################################### */
/*                                         .text                                          */
/* ###################################################################################### */

/* 8033D6F4-8033D6F4 0000 .text      __RAS_OSDisableInterrupts_begin                              */
/* 8033D6F4-8033D700 000C .text      OSDisableInterrupts                                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void OSDisableInterrupts() {
	nofralloc
#include "asm/dolphin/os/OSInterrupt/OSDisableInterrupts.s"
}
#pragma pop

/* 8033D700-8033D708 0008 .text      __RAS_OSDisableInterrupts_end                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void __RAS_OSDisableInterrupts_end() {
	nofralloc
#include "asm/dolphin/os/OSInterrupt/__RAS_OSDisableInterrupts_end.s"
}
#pragma pop

/* 8033D708-8033D71C 0014 .text      OSEnableInterrupts                                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void OSEnableInterrupts() {
	nofralloc
#include "asm/dolphin/os/OSInterrupt/OSEnableInterrupts.s"
}
#pragma pop

/* 8033D71C-8033D740 0024 .text      OSRestoreInterrupts                                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void OSRestoreInterrupts() {
	nofralloc
#include "asm/dolphin/os/OSInterrupt/OSRestoreInterrupts.s"
}
#pragma pop

/* 8033D740-8033D75C 001C .text      __OSSetInterruptHandler                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void __OSSetInterruptHandler() {
	nofralloc
#include "asm/dolphin/os/OSInterrupt/__OSSetInterruptHandler.s"
}
#pragma pop

/* 8033D75C-8033D770 0014 .text      __OSGetInterruptHandler                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void __OSGetInterruptHandler() {
	nofralloc
#include "asm/dolphin/os/OSInterrupt/__OSGetInterruptHandler.s"
}
#pragma pop

/* 8033D770-8033D7E4 0074 .text      __OSInterruptInit                                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void __OSInterruptInit() {
	nofralloc
#include "asm/dolphin/os/OSInterrupt/__OSInterruptInit.s"
}
#pragma pop

/* 8033D7E4-8033DABC 02D8 .text      SetInterruptMask                                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void SetInterruptMask() {
	nofralloc
#include "asm/dolphin/os/OSInterrupt/SetInterruptMask.s"
}
#pragma pop

/* 8033DABC-8033DB44 0088 .text      __OSMaskInterrupts                                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void __OSMaskInterrupts() {
	nofralloc
#include "asm/dolphin/os/OSInterrupt/__OSMaskInterrupts.s"
}
#pragma pop

/* 8033DB44-8033DBCC 0088 .text      __OSUnmaskInterrupts                                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void __OSUnmaskInterrupts() {
	nofralloc
#include "asm/dolphin/os/OSInterrupt/__OSUnmaskInterrupts.s"
}
#pragma pop

/* 8033DBCC-8033DF10 0344 .text      __OSDispatchInterrupt                                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void __OSDispatchInterrupt() {
	nofralloc
#include "asm/dolphin/os/OSInterrupt/__OSDispatchInterrupt.s"
}
#pragma pop

/* 8033DF10-8033DF60 0050 .text      ExternalInterruptHandler                                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void ExternalInterruptHandler() {
	nofralloc
#include "asm/dolphin/os/OSInterrupt/ExternalInterruptHandler.s"
}
#pragma pop


