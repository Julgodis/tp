// 
// Generated By: dol2asm
// 

#include "dolphin/types.h"

// 
// Additional Symbols:
// 

extern "C" {
extern void memcpy();
extern void OSReport();
extern void OSPanic();
extern void OSRegisterVersion();
extern void OSCreateAlarm();
extern void OSSetAlarm();
extern void DCInvalidateRange();
extern void OSDisableInterrupts();
extern void OSRestoreInterrupts();
extern void __OSSetInterruptHandler();
extern void __OSUnmaskInterrupts();
extern void OSInitThreadQueue();
extern void OSSleepThread();
extern void OSWakeupThread();
extern void __DVDInitWA();
extern void __DVDInterruptHandler();
extern void DVDLowRead();
extern void DVDLowSeek();
extern void DVDLowWaitCoverClose();
extern void DVDLowReadDiskID();
extern void DVDLowStopMotor();
extern void DVDLowRequestError();
extern void DVDLowInquiry();
extern void DVDLowAudioStream();
extern void DVDLowRequestAudioStatus();
extern void DVDLowAudioBufferConfig();
extern void DVDLowReset();
extern void DVDLowBreak();
extern void DVDLowClearCallback();
extern void __DVDLowTestAlarm();
extern void __DVDFSInit();
extern void stateReadingFST();
extern void cbForStateReadingFST();
extern void cbForStateError();
extern void stateTimeout();
extern void stateGettingError();
extern void CategorizeError();
extern void cbForStateGettingError();
extern void cbForUnrecoveredError();
extern void cbForUnrecoveredErrorRetry();
extern void stateGoToRetry();
extern void cbForStateGoToRetry();
extern void stateCheckID();
extern void stateCheckID3();
extern void stateCheckID2a();
extern void cbForStateCheckID2a();
extern void stateCheckID2();
extern void cbForStateCheckID1();
extern void cbForStateCheckID2();
extern void cbForStateCheckID3();
extern void dvd__AlarmHandler();
extern void stateCoverClosed();
extern void stateCoverClosed_CMD();
extern void cbForStateCoverClosed();
extern void stateMotorStopped();
extern void cbForStateMotorStopped();
extern void stateReady();
extern void stateBusy();
extern void cbForStateBusy();
extern void DVDReset();
extern void DVDCancelAsync();
extern void cbForCancelSync();
extern void __DVDClearWaitingQueue();
extern void __DVDPushWaitingQueue();
extern void __DVDPopWaitingQueue();
extern void __DVDCheckWaitingQueue();
extern void __DVDDequeueWaitingQueue();
extern void __DVDStoreErrorCode();
extern void DVDCompareDiskID();
extern void __DVDPrintFatalMessage();
extern void __fstLoad();
extern void memcmp();
SECTION_DATA extern u8 LIT_18[12];
SECTION_DATA extern u8 LIT_24[52];
SECTION_DATA extern u8 dvd__LIT_359[68];
SECTION_DATA extern u8 LIT_956[52];
SECTION_DATA extern u8 dvd__LIT_1060[56];
SECTION_BSS extern u8 BB2[32];
SECTION_BSS extern u8 CurrDiskID[32];
SECTION_BSS extern u8 DummyCommandBlock[48];
SECTION_BSS extern u8 ResetAlarm[40];
SECTION_SDATA extern u8 __DVDVersion[4];
SECTION_SDATA extern u8 autoInvalidation[4];
SECTION_SDATA extern u8 checkOptionalCommand[4];
SECTION_SDATA extern u8 LIT_23[8];
SECTION_SDATA extern u8 DmaCommand[4];
SECTION_SBSS extern u8 __DVDThreadQueue[8];
SECTION_SBSS extern u8 executing[4];
SECTION_SBSS extern u8 IDShouldBe[4];
SECTION_SBSS extern u8 bootInfo[4];
SECTION_SBSS extern u8 PauseFlag[4];
SECTION_SBSS extern u8 PausingFlag[4];
SECTION_SBSS extern u8 AutoFinishing[4];
SECTION_SBSS extern u8 FatalErrorFlag[4];
SECTION_SBSS extern u8 CurrCommand[4];
SECTION_SBSS extern u8 Canceling[4];
SECTION_SBSS extern u8 CancelCallback[4];
SECTION_SBSS extern u8 ResumeFromHere[4];
SECTION_SBSS extern u8 CancelLastError[4];
SECTION_SBSS extern u8 LastError[4];
SECTION_SBSS extern u8 NumInternalRetry[4];
SECTION_SBSS extern u8 ResetRequired[4];
SECTION_SBSS extern u8 FirstTimeInBootrom[4];
SECTION_SBSS extern u8 MotorState[4];
SECTION_SBSS extern u8 DVDInitialized[4];
SECTION_SBSS extern u8 dvd__LastState[4];
}


/* ###################################################################################### */
/*                                         .data                                          */
/* ###################################################################################### */

extern "C" {
/* 803D1520 0000 .data      ...data.0                                                    */
/* 803D1520 0045 .data      @1                                                           */
SECTION_DATA u8 dvd__LIT_1[72] = {
	0x3C, 0x3C, 0x20, 0x44, 0x6F, 0x6C, 0x70, 0x68, 0x69, 0x6E, 0x20, 0x53, 0x44, 0x4B, 0x20, 0x2D,
	0x20, 0x44, 0x56, 0x44, 0x09, 0x72, 0x65, 0x6C, 0x65, 0x61, 0x73, 0x65, 0x20, 0x62, 0x75, 0x69,
	0x6C, 0x64, 0x3A, 0x20, 0x41, 0x70, 0x72, 0x20, 0x20, 0x35, 0x20, 0x32, 0x30, 0x30, 0x34, 0x20,
	0x30, 0x34, 0x3A, 0x31, 0x34, 0x3A, 0x35, 0x31, 0x20, 0x28, 0x30, 0x78, 0x32, 0x33, 0x30, 0x31,
	0x29, 0x20, 0x3E, 0x3E, 0x00,
	/* padding */
	0x00, 0x00, 0x00,
};
/* 803D1568 000A .data      @18                                                          */
SECTION_DATA u8 LIT_18[12] = {
	0x6C, 0x6F, 0x61, 0x64, 0x20, 0x66, 0x73, 0x74, 0x0A, 0x00,
	/* padding */
	0x00, 0x00,
};
/* 803D1574 0034 .data      @24                                                          */
SECTION_DATA u8 LIT_24[52] = {
	0x44, 0x56, 0x44, 0x43, 0x68, 0x61, 0x6E, 0x67, 0x65, 0x44, 0x69, 0x73, 0x6B, 0x28, 0x29, 0x3A,
	0x20, 0x46, 0x53, 0x54, 0x20, 0x69, 0x6E, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6E, 0x65, 0x77, 0x20,
	0x64, 0x69, 0x73, 0x63, 0x20, 0x69, 0x73, 0x20, 0x74, 0x6F, 0x6F, 0x20, 0x62, 0x69, 0x67, 0x2E,
	0x20, 0x20, 0x20, 0x00,
};
/* 803D15A8 0044 .data      @359                                                         */
SECTION_DATA u8 dvd__LIT_359[68] = {
	0x80, 0x34, 0xA6, 0xAC, 0x80, 0x34, 0xA4, 0x00, 0x80, 0x34, 0xA4, 0xA0, 0x80, 0x34, 0xA4, 0xC4,
	0x80, 0x34, 0xA4, 0x00, 0x80, 0x34, 0xA3, 0xD4, 0x80, 0x34, 0xA4, 0xE4, 0x80, 0x34, 0xA5, 0x48,
	0x80, 0x34, 0xA5, 0x74, 0x80, 0x34, 0xA5, 0xA8, 0x80, 0x34, 0xA5, 0xCC, 0x80, 0x34, 0xA5, 0xF0,
	0x80, 0x34, 0xA6, 0x14, 0x80, 0x34, 0xA6, 0x38, 0x80, 0x34, 0xA6, 0x60, 0x80, 0x34, 0xA4, 0xD4,
	0x80, 0x34, 0xA6, 0x8C,
};
/* 803D15EC 000C .data      ImmCommand                                                   */
SECTION_DATA u8 ImmCommand[12] = {
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
};
/* 803D15F8 0041 .data      @789                                                         */
SECTION_DATA u8 LIT_789[68] = {
	0x44, 0x56, 0x44, 0x43, 0x68, 0x61, 0x6E, 0x67, 0x65, 0x44, 0x69, 0x73, 0x6B, 0x41, 0x73, 0x79,
	0x6E, 0x63, 0x28, 0x29, 0x3A, 0x20, 0x59, 0x6F, 0x75, 0x20, 0x63, 0x61, 0x6E, 0x27, 0x74, 0x20,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x20, 0x4E, 0x55, 0x4C, 0x4C, 0x20, 0x74, 0x6F, 0x20,
	0x63, 0x6F, 0x6D, 0x70, 0x61, 0x6E, 0x79, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x2E, 0x20, 0x20, 0x0A,
	0x00,
	/* padding */
	0x00, 0x00, 0x00,
};
/* 803D163C 0034 .data      @956                                                         */
SECTION_DATA u8 LIT_956[52] = {
	0x80, 0x34, 0xB3, 0x24, 0x80, 0x34, 0xB3, 0x24, 0x80, 0x34, 0xB3, 0x44, 0x80, 0x34, 0xB3, 0x88,
	0x80, 0x34, 0xB3, 0xD4, 0x80, 0x34, 0xB4, 0x50, 0x80, 0x34, 0xB4, 0x50, 0x80, 0x34, 0xB4, 0x50,
	0x80, 0x34, 0xB4, 0x50, 0x80, 0x34, 0xB5, 0x28, 0x80, 0x34, 0xB5, 0x28, 0x80, 0x34, 0xB3, 0x24,
	0x80, 0x34, 0xB4, 0x50,
};
/* 803D1670 0034 .data      @1060                                                        */
SECTION_DATA u8 dvd__LIT_1060[56] = {
	0x80, 0x34, 0xB6, 0xC0, 0x80, 0x34, 0xB6, 0xC8, 0x80, 0x34, 0xB6, 0xB8, 0x80, 0x34, 0xB6, 0xB8,
	0x80, 0x34, 0xB6, 0xC0, 0x80, 0x34, 0xB6, 0xC0, 0x80, 0x34, 0xB6, 0xC0, 0x80, 0x34, 0xB6, 0xC0,
	0x80, 0x34, 0xB6, 0xC0, 0x80, 0x34, 0xB6, 0xC8, 0x80, 0x34, 0xB6, 0xB8, 0x80, 0x34, 0xB6, 0xB8,
	0x80, 0x34, 0xB6, 0xC0,
	/* padding */
	0x00, 0x00, 0x00, 0x00,
};
}


/* ###################################################################################### */
/*                                         .sdata                                         */
/* ###################################################################################### */

extern "C" {
/* 804509E8 0004 .sdata     __DVDVersion                                                 */
SECTION_SDATA u8 __DVDVersion[4] = {
	0x80, 0x3D, 0x15, 0x20,
};
/* 804509EC 0004 .sdata     autoInvalidation                                             */
SECTION_SDATA u8 autoInvalidation[4] = {
	0x00, 0x00, 0x00, 0x01,
};
/* 804509F0 0004 .sdata     checkOptionalCommand                                         */
SECTION_SDATA u8 checkOptionalCommand[4] = {
	0x80, 0x34, 0x90, 0xEC,
};
/* 804509F4 0006 .sdata     @23                                                          */
SECTION_SDATA u8 LIT_23[8] = {
	0x64, 0x76, 0x64, 0x2E, 0x63, 0x00,
	/* padding */
	0x00, 0x00,
};
/* 804509FC 0004 .sdata     DmaCommand                                                   */
SECTION_SDATA u8 DmaCommand[4] = {
	0xFF, 0xFF, 0xFF, 0xFF,
};
}


/* ###################################################################################### */
/*                                          .bss                                          */
/* ###################################################################################### */

extern "C" {
/* 8044C900 0000 .bss       ...bss.0                                                     */
/* 8044C900 0020 .bss       BB2                                                          */
SECTION_BSS u8 BB2[32];
/* 8044C920 0020 .bss       CurrDiskID                                                   */
SECTION_BSS u8 CurrDiskID[32];
/* 8044C940 0030 .bss       DummyCommandBlock                                            */
SECTION_BSS u8 DummyCommandBlock[48];
/* 8044C970 0028 .bss       ResetAlarm                                                   */
SECTION_BSS u8 ResetAlarm[40];
}


/* ###################################################################################### */
/*                                         .sbss                                          */
/* ###################################################################################### */

extern "C" {
/* 80451778 0004 .sbss      executing                                                    */
SECTION_SBSS u8 executing[4];
/* 8045177C 0004 .sbss      IDShouldBe                                                   */
SECTION_SBSS u8 IDShouldBe[4];
/* 80451780 0004 .sbss      bootInfo                                                     */
SECTION_SBSS u8 bootInfo[4];
/* 80451784 0004 .sbss      PauseFlag                                                    */
SECTION_SBSS u8 PauseFlag[4];
/* 80451788 0004 .sbss      PausingFlag                                                  */
SECTION_SBSS u8 PausingFlag[4];
/* 8045178C 0004 .sbss      AutoFinishing                                                */
SECTION_SBSS u8 AutoFinishing[4];
/* 80451790 0004 .sbss      FatalErrorFlag                                               */
SECTION_SBSS u8 FatalErrorFlag[4];
/* 80451794 0004 .sbss      CurrCommand                                                  */
SECTION_SBSS u8 CurrCommand[4];
/* 80451798 0004 .sbss      Canceling                                                    */
SECTION_SBSS u8 Canceling[4];
/* 8045179C 0004 .sbss      CancelCallback                                               */
SECTION_SBSS u8 CancelCallback[4];
/* 804517A0 0004 .sbss      ResumeFromHere                                               */
SECTION_SBSS u8 ResumeFromHere[4];
/* 804517A4 0004 .sbss      CancelLastError                                              */
SECTION_SBSS u8 CancelLastError[4];
/* 804517A8 0004 .sbss      LastError                                                    */
SECTION_SBSS u8 LastError[4];
/* 804517AC 0004 .sbss      NumInternalRetry                                             */
SECTION_SBSS u8 NumInternalRetry[4];
/* 804517B0 0004 .sbss      ResetRequired                                                */
SECTION_SBSS u8 ResetRequired[4];
/* 804517B4 0004 .sbss      FirstTimeInBootrom                                           */
SECTION_SBSS u8 FirstTimeInBootrom[4];
/* 804517B8 0004 .sbss      MotorState                                                   */
SECTION_SBSS u8 MotorState[4];
/* 804517BC 0004 .sbss      DVDInitialized                                               */
SECTION_SBSS u8 DVDInitialized[4];
/* 804517C0 0004 .sbss      LastState                                                    */
SECTION_SBSS u8 dvd__LastState[4];
SECTION_SBSS u8 pad_804517C4[4];
}


/* ###################################################################################### */
/*                                         .text                                          */
/* ###################################################################################### */

extern "C" {
/* 803490EC 0004 .text      defaultOptionalCommandChecker                                */
void defaultOptionalCommandChecker() {
	return;
}

/* 803490F0 00D8 .text      DVDInit                                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void DVDInit() {
	nofralloc
#include "_include/dvd/dvd/DVDInit.s"
}
#pragma pop

/* 803491C8 0094 .text      stateReadingFST                                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void stateReadingFST() {
	nofralloc
#include "_include/dvd/dvd/stateReadingFST.s"
}
#pragma pop

/* 8034925C 0080 .text      cbForStateReadingFST                                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cbForStateReadingFST() {
	nofralloc
#include "_include/dvd/dvd/cbForStateReadingFST.s"
}
#pragma pop

/* 803492DC 00AC .text      cbForStateError                                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cbForStateError() {
	nofralloc
#include "_include/dvd/dvd/cbForStateError.s"
}
#pragma pop

/* 80349388 0034 .text      stateTimeout                                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void stateTimeout() {
	nofralloc
#include "_include/dvd/dvd/stateTimeout.s"
}
#pragma pop

/* 803493BC 0028 .text      stateGettingError                                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void stateGettingError() {
	nofralloc
#include "_include/dvd/dvd/stateGettingError.s"
}
#pragma pop

/* 803493E4 00B4 .text      CategorizeError                                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void CategorizeError() {
	nofralloc
#include "_include/dvd/dvd/CategorizeError.s"
}
#pragma pop

/* 80349498 0264 .text      cbForStateGettingError                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cbForStateGettingError() {
	nofralloc
#include "_include/dvd/dvd/cbForStateGettingError.s"
}
#pragma pop

/* 803496FC 005C .text      cbForUnrecoveredError                                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cbForUnrecoveredError() {
	nofralloc
#include "_include/dvd/dvd/cbForUnrecoveredError.s"
}
#pragma pop

/* 80349758 0080 .text      cbForUnrecoveredErrorRetry                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cbForUnrecoveredErrorRetry() {
	nofralloc
#include "_include/dvd/dvd/cbForUnrecoveredErrorRetry.s"
}
#pragma pop

/* 803497D8 0028 .text      stateGoToRetry                                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void stateGoToRetry() {
	nofralloc
#include "_include/dvd/dvd/stateGoToRetry.s"
}
#pragma pop

/* 80349800 0140 .text      cbForStateGoToRetry                                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cbForStateGoToRetry() {
	nofralloc
#include "_include/dvd/dvd/cbForStateGoToRetry.s"
}
#pragma pop

/* 80349940 00E0 .text      stateCheckID                                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void stateCheckID() {
	nofralloc
#include "_include/dvd/dvd/stateCheckID.s"
}
#pragma pop

/* 80349A20 0034 .text      stateCheckID3                                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void stateCheckID3() {
	nofralloc
#include "_include/dvd/dvd/stateCheckID3.s"
}
#pragma pop

/* 80349A54 0034 .text      stateCheckID2a                                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void stateCheckID2a() {
	nofralloc
#include "_include/dvd/dvd/stateCheckID2a.s"
}
#pragma pop

/* 80349A88 0068 .text      cbForStateCheckID2a                                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cbForStateCheckID2a() {
	nofralloc
#include "_include/dvd/dvd/cbForStateCheckID2a.s"
}
#pragma pop

/* 80349AF0 0038 .text      stateCheckID2                                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void stateCheckID2() {
	nofralloc
#include "_include/dvd/dvd/stateCheckID2.s"
}
#pragma pop

/* 80349B28 00FC .text      cbForStateCheckID1                                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cbForStateCheckID1() {
	nofralloc
#include "_include/dvd/dvd/cbForStateCheckID1.s"
}
#pragma pop

/* 80349C24 00D8 .text      cbForStateCheckID2                                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cbForStateCheckID2() {
	nofralloc
#include "_include/dvd/dvd/cbForStateCheckID2.s"
}
#pragma pop

/* 80349CFC 00F0 .text      cbForStateCheckID3                                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cbForStateCheckID3() {
	nofralloc
#include "_include/dvd/dvd/cbForStateCheckID3.s"
}
#pragma pop

/* 80349DEC 0044 .text      AlarmHandler                                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dvd__AlarmHandler() {
	nofralloc
#include "_include/dvd/dvd/dvd__AlarmHandler.s"
}
#pragma pop

/* 80349E30 00D4 .text      stateCoverClosed                                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void stateCoverClosed() {
	nofralloc
#include "_include/dvd/dvd/stateCoverClosed.s"
}
#pragma pop

/* 80349F04 0030 .text      stateCoverClosed_CMD                                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void stateCoverClosed_CMD() {
	nofralloc
#include "_include/dvd/dvd/stateCoverClosed_CMD.s"
}
#pragma pop

/* 80349F34 0064 .text      cbForStateCoverClosed                                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cbForStateCoverClosed() {
	nofralloc
#include "_include/dvd/dvd/cbForStateCoverClosed.s"
}
#pragma pop

/* 80349F98 0028 .text      stateMotorStopped                                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void stateMotorStopped() {
	nofralloc
#include "_include/dvd/dvd/stateMotorStopped.s"
}
#pragma pop

/* 80349FC0 00EC .text      cbForStateMotorStopped                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cbForStateMotorStopped() {
	nofralloc
#include "_include/dvd/dvd/cbForStateMotorStopped.s"
}
#pragma pop

/* 8034A0AC 02E8 .text      stateReady                                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void stateReady() {
	nofralloc
#include "_include/dvd/dvd/stateReady.s"
}
#pragma pop

/* 8034A394 0340 .text      stateBusy                                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void stateBusy() {
	nofralloc
#include "_include/dvd/dvd/stateBusy.s"
}
#pragma pop

/* 8034A6D4 0658 .text      cbForStateBusy                                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cbForStateBusy() {
	nofralloc
#include "_include/dvd/dvd/cbForStateBusy.s"
}
#pragma pop

/* 8034AD2C 00DC .text      DVDReadAbsAsyncPrio                                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void DVDReadAbsAsyncPrio() {
	nofralloc
#include "_include/dvd/dvd/DVDReadAbsAsyncPrio.s"
}
#pragma pop

/* 8034AE08 00D0 .text      DVDReadAbsAsyncForBS                                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void DVDReadAbsAsyncForBS() {
	nofralloc
#include "_include/dvd/dvd/DVDReadAbsAsyncForBS.s"
}
#pragma pop

/* 8034AED8 00D4 .text      DVDReadDiskID                                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void DVDReadDiskID() {
	nofralloc
#include "_include/dvd/dvd/DVDReadDiskID.s"
}
#pragma pop

/* 8034AFAC 00BC .text      DVDCancelStreamAsync                                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void DVDCancelStreamAsync() {
	nofralloc
#include "_include/dvd/dvd/DVDCancelStreamAsync.s"
}
#pragma pop

/* 8034B068 00D0 .text      DVDInquiryAsync                                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void DVDInquiryAsync() {
	nofralloc
#include "_include/dvd/dvd/DVDInquiryAsync.s"
}
#pragma pop

/* 8034B138 0044 .text      DVDReset                                                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void DVDReset() {
	nofralloc
#include "_include/dvd/dvd/DVDReset.s"
}
#pragma pop

/* 8034B17C 004C .text      DVDGetCommandBlockStatus                                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void DVDGetCommandBlockStatus() {
	nofralloc
#include "_include/dvd/dvd/DVDGetCommandBlockStatus.s"
}
#pragma pop

/* 8034B1C8 00AC .text      DVDGetDriveStatus                                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void DVDGetDriveStatus() {
	nofralloc
#include "_include/dvd/dvd/DVDGetDriveStatus.s"
}
#pragma pop

/* 8034B274 0010 .text      DVDSetAutoInvalidation                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void DVDSetAutoInvalidation() {
	nofralloc
#include "_include/dvd/dvd/DVDSetAutoInvalidation.s"
}
#pragma pop

/* 8034B284 0050 .text      DVDResume                                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void DVDResume() {
	nofralloc
#include "_include/dvd/dvd/DVDResume.s"
}
#pragma pop

/* 8034B2D4 027C .text      DVDCancelAsync                                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void DVDCancelAsync() {
	nofralloc
#include "_include/dvd/dvd/DVDCancelAsync.s"
}
#pragma pop

/* 8034B550 00AC .text      DVDCancel                                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void DVDCancel() {
	nofralloc
#include "_include/dvd/dvd/DVDCancel.s"
}
#pragma pop

/* 8034B5FC 0024 .text      cbForCancelSync                                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cbForCancelSync() {
	nofralloc
#include "_include/dvd/dvd/cbForCancelSync.s"
}
#pragma pop

/* 8034B620 0008 .text      DVDGetCurrentDiskID                                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void DVDGetCurrentDiskID() {
	nofralloc
#include "_include/dvd/dvd/DVDGetCurrentDiskID.s"
}
#pragma pop

/* 8034B628 00F8 .text      DVDCheckDisk                                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void DVDCheckDisk() {
	nofralloc
#include "_include/dvd/dvd/DVDCheckDisk.s"
}
#pragma pop

/* 8034B720 011C .text      __DVDPrepareResetAsync                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void __DVDPrepareResetAsync() {
	nofralloc
#include "_include/dvd/dvd/__DVDPrepareResetAsync.s"
}
#pragma pop

/* 8034B83C 0038 .text      __DVDTestAlarm                                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void __DVDTestAlarm() {
	nofralloc
#include "_include/dvd/dvd/__DVDTestAlarm.s"
}
#pragma pop

}

