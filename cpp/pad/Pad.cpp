// 
// Generated By: dol2asm
// 

#include "dolphin/types.h"

// 
// Additional Symbols:
// 

extern "C" {
extern void memset();
extern void OSRegisterVersion();
extern void OSSetCurrentContext();
extern void OSClearContext();
extern void OSDisableInterrupts();
extern void OSRestoreInterrupts();
extern void OSRegisterResetFunction();
extern void OSSetWirelessID();
extern void OSGetTime();
extern void SIBusy();
extern void SIIsChanBusy();
extern void SIRegisterPollingHandler();
extern void SIUnregisterPollingHandler();
extern void SIGetStatus();
extern void SISetCommand();
extern void SITransferCommands();
extern void SIEnablePolling();
extern void SIDisablePolling();
extern void SIGetResponse();
extern void SITransfer();
extern void SIGetType();
extern void SIGetTypeAsync();
extern void SIRefreshSamplingRate();
extern void UpdateOrigin();
extern void PADOriginCallback();
extern void PADOriginUpdateCallback();
extern void PADProbeCallback();
extern void PADTypeAndStatusCallback();
extern void PADReceiveCheckCallback();
extern void PADReset();
extern void PADRecalibrate();
extern void PADSetSpec();
extern void SPEC0_MakeStatus();
extern void SPEC1_MakeStatus();
extern void SPEC2_MakeStatus();
extern void SamplingHandler();
extern void PADSetSamplingCallback();
extern void __shr2i();
SECTION_DATA extern u8 Pad__ResetFunctionInfo[16];
SECTION_BSS extern u8 Pad__Type[16];
SECTION_BSS extern u8 Origin[48];
SECTION_SDATA extern u8 __PADVersion[4];
SECTION_SDATA extern u8 ResettingChan[4];
SECTION_SDATA extern u8 XPatchBits[4];
SECTION_SDATA extern u8 AnalogMode[4];
SECTION_SDATA extern u8 Spec[4];
SECTION_SDATA extern u8 MakeStatus[4];
SECTION_SDATA extern f32 CmdReadOrigin;
SECTION_SDATA extern f32 CmdCalibrate;
SECTION_SBSS extern u8 __PADFixBits[4];
SECTION_SBSS extern u8 Initialized[4];
SECTION_SBSS extern u8 EnabledBits[4];
SECTION_SBSS extern u8 ResettingBits[4];
SECTION_SBSS extern u8 RecalibrateBits[4];
SECTION_SBSS extern u8 WaitingBits[4];
SECTION_SBSS extern u8 CheckingBits[4];
SECTION_SBSS extern u8 PendingBits[4];
SECTION_SBSS extern u8 BarrelBits[4];
SECTION_SBSS extern u8 SamplingCallback[4];
SECTION_SBSS extern u8 data_8045186C[4];
SECTION_SBSS extern u8 __PADSpec[4];
}


/* ###################################################################################### */
/*                                         .data                                          */
/* ###################################################################################### */

extern "C" {
/* 803D1B48 0000 .data      ...data.0                                                    */
/* 803D1B48 0045 .data      @1                                                           */
SECTION_DATA u8 Pad__LIT_1[72] = {
	0x3C, 0x3C, 0x20, 0x44, 0x6F, 0x6C, 0x70, 0x68, 0x69, 0x6E, 0x20, 0x53, 0x44, 0x4B, 0x20, 0x2D,
	0x20, 0x50, 0x41, 0x44, 0x09, 0x72, 0x65, 0x6C, 0x65, 0x61, 0x73, 0x65, 0x20, 0x62, 0x75, 0x69,
	0x6C, 0x64, 0x3A, 0x20, 0x41, 0x70, 0x72, 0x20, 0x20, 0x35, 0x20, 0x32, 0x30, 0x30, 0x34, 0x20,
	0x30, 0x34, 0x3A, 0x31, 0x34, 0x3A, 0x34, 0x39, 0x20, 0x28, 0x30, 0x78, 0x32, 0x33, 0x30, 0x31,
	0x29, 0x20, 0x3E, 0x3E, 0x00,
	/* padding */
	0x00, 0x00, 0x00,
};
/* 803D1B90 0010 .data      ResetFunctionInfo                                            */
SECTION_DATA u8 Pad__ResetFunctionInfo[16] = {
	0x80, 0x34, 0xFA, 0x84, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
}


/* ###################################################################################### */
/*                                         .sdata                                         */
/* ###################################################################################### */

extern "C" {
/* 80450A20 0004 .sdata     __PADVersion                                                 */
SECTION_SDATA u8 __PADVersion[4] = {
	0x80, 0x3D, 0x1B, 0x48,
};
/* 80450A24 0004 .sdata     ResettingChan                                                */
SECTION_SDATA u8 ResettingChan[4] = {
	0x00, 0x00, 0x00, 0x20,
};
/* 80450A28 0004 .sdata     XPatchBits                                                   */
SECTION_SDATA u8 XPatchBits[4] = {
	0xF0, 0x00, 0x00, 0x00,
};
/* 80450A2C 0004 .sdata     AnalogMode                                                   */
SECTION_SDATA u8 AnalogMode[4] = {
	0x00, 0x00, 0x03, 0x00,
};
/* 80450A30 0004 .sdata     Spec                                                         */
SECTION_SDATA u8 Spec[4] = {
	0x00, 0x00, 0x00, 0x05,
};
/* 80450A34 0004 .sdata     MakeStatus                                                   */
SECTION_SDATA u8 MakeStatus[4] = {
	0x80, 0x34, 0xF5, 0xA0,
};
/* 80450A38 0004 .sdata     CmdReadOrigin                                                */
// 0x41000000
SECTION_SDATA f32 CmdReadOrigin = 8.000000f;
/* 80450A3C 0004 .sdata     CmdCalibrate                                                 */
// 0x42000000
SECTION_SDATA f32 CmdCalibrate = 32.000000f;
}


/* ###################################################################################### */
/*                                          .bss                                          */
/* ###################################################################################### */

extern "C" {
/* 8044CB70 0000 .bss       ...bss.0                                                     */
/* 8044CB70 0010 .bss       Type                                                         */
SECTION_BSS u8 Pad__Type[16];
/* 8044CB80 0030 .bss       Origin                                                       */
SECTION_BSS u8 Origin[48];
/* 8044CBB0 0010 .bss       CmdProbeDevice                                               */
SECTION_BSS u8 CmdProbeDevice[16];
}


/* ###################################################################################### */
/*                                         .sbss                                          */
/* ###################################################################################### */

extern "C" {
/* 80451848 0004 .sbss      Initialized                                                  */
SECTION_SBSS u8 Initialized[4];
/* 8045184C 0004 .sbss      EnabledBits                                                  */
SECTION_SBSS u8 EnabledBits[4];
/* 80451850 0004 .sbss      ResettingBits                                                */
SECTION_SBSS u8 ResettingBits[4];
/* 80451854 0004 .sbss      RecalibrateBits                                              */
SECTION_SBSS u8 RecalibrateBits[4];
/* 80451858 0004 .sbss      WaitingBits                                                  */
SECTION_SBSS u8 WaitingBits[4];
/* 8045185C 0004 .sbss      CheckingBits                                                 */
SECTION_SBSS u8 CheckingBits[4];
/* 80451860 0004 .sbss      PendingBits                                                  */
SECTION_SBSS u8 PendingBits[4];
/* 80451864 0004 .sbss      BarrelBits                                                   */
SECTION_SBSS u8 BarrelBits[4];
/* 80451868 0004 .sbss      SamplingCallback                                             */
SECTION_SBSS u8 SamplingCallback[4];
/* 8045186C 0004 .sbss      recalibrated$388                                             */
SECTION_SBSS u8 data_8045186C[4];
/* 80451870 0004 .sbss      __PADSpec                                                    */
SECTION_SBSS u8 __PADSpec[4];
SECTION_SBSS u8 pad_80451874[4];
}


/* ###################################################################################### */
/*                                         .text                                          */
/* ###################################################################################### */

extern "C" {
/* 8034E2B4 01A4 .text      UpdateOrigin                                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void UpdateOrigin() {
	nofralloc
#include "_include/pad/Pad/UpdateOrigin.s"
}
#pragma pop

/* 8034E458 00C4 .text      PADOriginCallback                                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void PADOriginCallback() {
	nofralloc
#include "_include/pad/Pad/PADOriginCallback.s"
}
#pragma pop

/* 8034E51C 00CC .text      PADOriginUpdateCallback                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void PADOriginUpdateCallback() {
	nofralloc
#include "_include/pad/Pad/PADOriginUpdateCallback.s"
}
#pragma pop

/* 8034E5E8 00D8 .text      PADProbeCallback                                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void PADProbeCallback() {
	nofralloc
#include "_include/pad/Pad/PADProbeCallback.s"
}
#pragma pop

/* 8034E6C0 032C .text      PADTypeAndStatusCallback                                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void PADTypeAndStatusCallback() {
	nofralloc
#include "_include/pad/Pad/PADTypeAndStatusCallback.s"
}
#pragma pop

/* 8034E9EC 0140 .text      PADReceiveCheckCallback                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void PADReceiveCheckCallback() {
	nofralloc
#include "_include/pad/Pad/PADReceiveCheckCallback.s"
}
#pragma pop

/* 8034EB2C 0110 .text      PADReset                                                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void PADReset() {
	nofralloc
#include "_include/pad/Pad/PADReset.s"
}
#pragma pop

/* 8034EC3C 0114 .text      PADRecalibrate                                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void PADRecalibrate() {
	nofralloc
#include "_include/pad/Pad/PADRecalibrate.s"
}
#pragma pop

/* 8034ED50 0150 .text      PADInit                                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void PADInit() {
	nofralloc
#include "_include/pad/Pad/PADInit.s"
}
#pragma pop

/* 8034EEA0 0300 .text      PADRead                                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void PADRead() {
	nofralloc
#include "_include/pad/Pad/PADRead.s"
}
#pragma pop

/* 8034F1A0 00B8 .text      PADControlMotor                                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void PADControlMotor() {
	nofralloc
#include "_include/pad/Pad/PADControlMotor.s"
}
#pragma pop

/* 8034F258 0060 .text      PADSetSpec                                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void PADSetSpec() {
	nofralloc
#include "_include/pad/Pad/PADSetSpec.s"
}
#pragma pop

/* 8034F2B8 0174 .text      SPEC0_MakeStatus                                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void SPEC0_MakeStatus() {
	nofralloc
#include "_include/pad/Pad/SPEC0_MakeStatus.s"
}
#pragma pop

/* 8034F42C 0174 .text      SPEC1_MakeStatus                                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void SPEC1_MakeStatus() {
	nofralloc
#include "_include/pad/Pad/SPEC1_MakeStatus.s"
}
#pragma pop

/* 8034F5A0 0470 .text      SPEC2_MakeStatus                                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void SPEC2_MakeStatus() {
	nofralloc
#include "_include/pad/Pad/SPEC2_MakeStatus.s"
}
#pragma pop

/* 8034FA10 0074 .text      PADSetAnalogMode                                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void PADSetAnalogMode() {
	nofralloc
#include "_include/pad/Pad/PADSetAnalogMode.s"
}
#pragma pop

/* 8034FA84 00BC .text      OnReset                                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void Pad__OnReset() {
	nofralloc
#include "_include/pad/Pad/Pad__OnReset.s"
}
#pragma pop

/* 8034FB40 0060 .text      SamplingHandler                                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void SamplingHandler() {
	nofralloc
#include "_include/pad/Pad/SamplingHandler.s"
}
#pragma pop

/* 8034FBA0 0054 .text      PADSetSamplingCallback                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void PADSetSamplingCallback() {
	nofralloc
#include "_include/pad/Pad/PADSetSamplingCallback.s"
}
#pragma pop

/* 8034FBF4 007C .text      __PADDisableRecalibration                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void __PADDisableRecalibration() {
	nofralloc
#include "_include/pad/Pad/__PADDisableRecalibration.s"
}
#pragma pop

}

