// 
// Generated By: dol2asm
// 

#include "dolphin/types.h"

// 
// Additional Symbols:
// 

extern "C" {
extern void OSReport();
extern void OSPanic();
extern void OSRegisterVersion();
extern void OSSetCurrentContext();
extern void OSClearContext();
extern void OSDisableInterrupts();
extern void OSRestoreInterrupts();
extern void __OSSetInterruptHandler();
extern void __OSUnmaskInterrupts();
extern void __OSLockSram();
extern void __OSUnlockSram();
extern void OSInitThreadQueue();
extern void OSSleepThread();
extern void OSWakeupThread();
extern void SIRefreshSamplingRate();
extern void __VIRetraceHandler();
extern void getTiming();
extern void __VIInit();
extern void setFbbRegs();
extern void setVerticalRegs();
extern void GetCurrentDisplayPosition();
extern void getCurrentFieldEvenOdd();
extern void __VIDisplayPositionToXY();
extern void __VIGetCurrentPosition();
extern void __shl2i();
extern void __shr2u();
SECTION_DATA extern u8 vi__LIT_1[68];
SECTION_DATA extern u8 vi__LIT_101[124];
SECTION_DATA extern u8 vi__LIT_740[36];
SECTION_BSS extern u8 regs[120];
SECTION_BSS extern u8 HorVer[88];
SECTION_SDATA extern u8 __VIVersion[4];
SECTION_SDATA extern u8 vi__LIT_537[12];
SECTION_SBSS extern u8 IsInitialized[4];
SECTION_SBSS extern u8 retraceCount[4];
SECTION_SBSS extern u8 flushFlag[4];
SECTION_SBSS extern u8 retraceQueue[8];
SECTION_SBSS extern u8 PreCB[4];
SECTION_SBSS extern u8 PostCB[4];
SECTION_SBSS extern u8 PositionCallback[4];
SECTION_SBSS extern u8 encoderType[4];
SECTION_SBSS extern u8 merged_80451804[4];
SECTION_SBSS extern u8 changeMode[4];
SECTION_SBSS extern u8 changed[4];
SECTION_SBSS extern u8 data_80451814[4];
SECTION_SBSS extern u8 shdwChangeMode[4];
SECTION_SBSS extern u8 shdwChanged[4];
SECTION_SBSS extern u8 data_80451824[4];
SECTION_SBSS extern u8 CurrTiming[4];
SECTION_SBSS extern u8 CurrTvMode[4];
SECTION_SBSS extern u8 NextBufAddr[4];
SECTION_SBSS extern u8 CurrBufAddr[4];
SECTION_SBSS extern u8 FBSet[4];
SECTION_SBSS extern u8 timingExtra[4];
SECTION_SBSS extern u8 data_80451840[4];
}


/* ###################################################################################### */
/*                                         .data                                          */
/* ###################################################################################### */

extern "C" {
/* 803D1760 0000 .data      ...data.0                                                    */
/* 803D1760 0044 .data      @1                                                           */
SECTION_DATA u8 vi__LIT_1[68] = {
	0x3C, 0x3C, 0x20, 0x44, 0x6F, 0x6C, 0x70, 0x68, 0x69, 0x6E, 0x20, 0x53, 0x44, 0x4B, 0x20, 0x2D,
	0x20, 0x56, 0x49, 0x09, 0x72, 0x65, 0x6C, 0x65, 0x61, 0x73, 0x65, 0x20, 0x62, 0x75, 0x69, 0x6C,
	0x64, 0x3A, 0x20, 0x41, 0x70, 0x72, 0x20, 0x20, 0x37, 0x20, 0x32, 0x30, 0x30, 0x34, 0x20, 0x30,
	0x34, 0x3A, 0x31, 0x33, 0x3A, 0x35, 0x39, 0x20, 0x28, 0x30, 0x78, 0x32, 0x33, 0x30, 0x31, 0x29,
	0x20, 0x3E, 0x3E, 0x00,
};
/* 803D17A4 017C .data      timing                                                       */
SECTION_DATA u8 timing[380] = {
	0x06, 0x00, 0x00, 0xF0, 0x00, 0x18, 0x00, 0x19, 0x00, 0x03, 0x00, 0x02, 0x0C, 0x0D, 0x0C, 0x0D,
	0x02, 0x08, 0x02, 0x07, 0x02, 0x08, 0x02, 0x07, 0x02, 0x0D, 0x01, 0xAD, 0x40, 0x47, 0x69, 0xA2,
	0x01, 0x75, 0x7A, 0x00, 0x01, 0x9C, 0x06, 0x00, 0x00, 0xF0, 0x00, 0x18, 0x00, 0x18, 0x00, 0x04,
	0x00, 0x04, 0x0C, 0x0C, 0x0C, 0x0C, 0x02, 0x08, 0x02, 0x08, 0x02, 0x08, 0x02, 0x08, 0x02, 0x0E,
	0x01, 0xAD, 0x40, 0x47, 0x69, 0xA2, 0x01, 0x75, 0x7A, 0x00, 0x01, 0x9C, 0x05, 0x00, 0x01, 0x1F,
	0x00, 0x23, 0x00, 0x24, 0x00, 0x01, 0x00, 0x00, 0x0D, 0x0C, 0x0B, 0x0A, 0x02, 0x6B, 0x02, 0x6A,
	0x02, 0x69, 0x02, 0x6C, 0x02, 0x71, 0x01, 0xB0, 0x40, 0x4B, 0x6A, 0xAC, 0x01, 0x7C, 0x85, 0x00,
	0x01, 0xA4, 0x05, 0x00, 0x01, 0x1F, 0x00, 0x21, 0x00, 0x21, 0x00, 0x02, 0x00, 0x02, 0x0D, 0x0B,
	0x0D, 0x0B, 0x02, 0x6B, 0x02, 0x6D, 0x02, 0x6B, 0x02, 0x6D, 0x02, 0x70, 0x01, 0xB0, 0x40, 0x4B,
	0x6A, 0xAC, 0x01, 0x7C, 0x85, 0x00, 0x01, 0xA4, 0x06, 0x00, 0x00, 0xF0, 0x00, 0x18, 0x00, 0x19,
	0x00, 0x03, 0x00, 0x02, 0x10, 0x0F, 0x0E, 0x0D, 0x02, 0x06, 0x02, 0x05, 0x02, 0x04, 0x02, 0x07,
	0x02, 0x0D, 0x01, 0xAD, 0x40, 0x4E, 0x70, 0xA2, 0x01, 0x75, 0x7A, 0x00, 0x01, 0x9C, 0x06, 0x00,
	0x00, 0xF0, 0x00, 0x18, 0x00, 0x18, 0x00, 0x04, 0x00, 0x04, 0x10, 0x0E, 0x10, 0x0E, 0x02, 0x06,
	0x02, 0x08, 0x02, 0x06, 0x02, 0x08, 0x02, 0x0E, 0x01, 0xAD, 0x40, 0x4E, 0x70, 0xA2, 0x01, 0x75,
	0x7A, 0x00, 0x01, 0x9C, 0x0C, 0x00, 0x01, 0xE0, 0x00, 0x30, 0x00, 0x30, 0x00, 0x06, 0x00, 0x06,
	0x18, 0x18, 0x18, 0x18, 0x04, 0x0E, 0x04, 0x0E, 0x04, 0x0E, 0x04, 0x0E, 0x04, 0x1A, 0x01, 0xAD,
	0x40, 0x47, 0x69, 0xA2, 0x01, 0x75, 0x7A, 0x00, 0x01, 0x9C, 0x0C, 0x00, 0x01, 0xE0, 0x00, 0x2C,
	0x00, 0x2C, 0x00, 0x0A, 0x00, 0x0A, 0x18, 0x18, 0x18, 0x18, 0x04, 0x0E, 0x04, 0x0E, 0x04, 0x0E,
	0x04, 0x0E, 0x04, 0x1A, 0x01, 0xAD, 0x40, 0x47, 0x69, 0xA8, 0x01, 0x7B, 0x7A, 0x00, 0x01, 0x9C,
	0x06, 0x00, 0x00, 0xF1, 0x00, 0x18, 0x00, 0x19, 0x00, 0x01, 0x00, 0x00, 0x0C, 0x0D, 0x0C, 0x0D,
	0x02, 0x08, 0x02, 0x07, 0x02, 0x08, 0x02, 0x07, 0x02, 0x0D, 0x01, 0xAD, 0x40, 0x47, 0x69, 0x9F,
	0x01, 0x72, 0x7A, 0x00, 0x01, 0x9C, 0x0C, 0x00, 0x01, 0xE0, 0x00, 0x30, 0x00, 0x30, 0x00, 0x06,
	0x00, 0x06, 0x18, 0x18, 0x18, 0x18, 0x04, 0x0E, 0x04, 0x0E, 0x04, 0x0E, 0x04, 0x0E, 0x04, 0x1A,
	0x01, 0xAD, 0x40, 0x47, 0x69, 0xB4, 0x01, 0x87, 0x7A, 0x00, 0x01, 0x9C,
};
/* 803D1920 0032 .data      taps                                                         */
SECTION_DATA u8 taps[52] = {
	0x01, 0xF0, 0x01, 0xDC, 0x01, 0xAE, 0x01, 0x74, 0x01, 0x29, 0x00, 0xDB, 0x00, 0x8E, 0x00, 0x46,
	0x00, 0x0C, 0x00, 0xE2, 0x00, 0xCB, 0x00, 0xC0, 0x00, 0xC4, 0x00, 0xCF, 0x00, 0xDE, 0x00, 0xEC,
	0x00, 0xFC, 0x00, 0x08, 0x00, 0x0F, 0x00, 0x13, 0x00, 0x13, 0x00, 0x0F, 0x00, 0x0C, 0x00, 0x08,
	0x00, 0x01,
	/* padding */
	0x00, 0x00,
};
/* 803D1954 007C .data      @101                                                         */
SECTION_DATA u8 vi__LIT_101[124] = {
	0x80, 0x34, 0xC2, 0x90, 0x80, 0x34, 0xC2, 0x98, 0x80, 0x34, 0xC2, 0xD0, 0x80, 0x34, 0xC2, 0xD8,
	0x80, 0x34, 0xC2, 0xA0, 0x80, 0x34, 0xC2, 0xA8, 0x80, 0x34, 0xC3, 0x08, 0x80, 0x34, 0xC3, 0x08,
	0x80, 0x34, 0xC2, 0xC0, 0x80, 0x34, 0xC2, 0xC8, 0x80, 0x34, 0xC3, 0x08, 0x80, 0x34, 0xC3, 0x08,
	0x80, 0x34, 0xC3, 0x08, 0x80, 0x34, 0xC3, 0x08, 0x80, 0x34, 0xC3, 0x08, 0x80, 0x34, 0xC3, 0x08,
	0x80, 0x34, 0xC2, 0xE0, 0x80, 0x34, 0xC2, 0xE8, 0x80, 0x34, 0xC3, 0x08, 0x80, 0x34, 0xC3, 0x08,
	0x80, 0x34, 0xC2, 0xB0, 0x80, 0x34, 0xC2, 0xB8, 0x80, 0x34, 0xC3, 0x08, 0x80, 0x34, 0xC3, 0x08,
	0x80, 0x34, 0xC2, 0xF0, 0x80, 0x34, 0xC3, 0x08, 0x80, 0x34, 0xC2, 0xF8, 0x80, 0x34, 0xC3, 0x08,
	0x80, 0x34, 0xC3, 0x00, 0x80, 0x34, 0xC3, 0x00, 0x80, 0x34, 0xC3, 0x00,
};
/* 803D19D0 0029 .data      @355                                                         */
SECTION_DATA u8 vi__LIT_355[44] = {
	0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A,
	0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A,
	0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x0A, 0x00,
	/* padding */
	0x00, 0x00, 0x00,
};
/* 803D19FC 0029 .data      @356                                                         */
SECTION_DATA u8 vi__LIT_356[44] = {
	0x20, 0x21, 0x20, 0x21, 0x20, 0x21, 0x20, 0x43, 0x20, 0x41, 0x20, 0x55, 0x20, 0x54, 0x20, 0x49,
	0x20, 0x4F, 0x20, 0x4E, 0x20, 0x21, 0x20, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x0A, 0x00,
	/* padding */
	0x00, 0x00, 0x00,
};
/* 803D1A28 0029 .data      @357                                                         */
SECTION_DATA u8 vi__LIT_357[44] = {
	0x54, 0x68, 0x69, 0x73, 0x20, 0x54, 0x56, 0x20, 0x66, 0x6F, 0x72, 0x6D, 0x61, 0x74, 0x20, 0x22,
	0x44, 0x45, 0x42, 0x55, 0x47, 0x5F, 0x50, 0x41, 0x4C, 0x22, 0x20, 0x69, 0x73, 0x20, 0x6F, 0x6E,
	0x6C, 0x79, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x0A, 0x00,
	/* padding */
	0x00, 0x00, 0x00,
};
/* 803D1A54 0029 .data      @358                                                         */
SECTION_DATA u8 vi__LIT_358[44] = {
	0x74, 0x65, 0x6D, 0x70, 0x6F, 0x72, 0x61, 0x72, 0x79, 0x20, 0x73, 0x6F, 0x6C, 0x75, 0x74, 0x69,
	0x6F, 0x6E, 0x20, 0x75, 0x6E, 0x74, 0x69, 0x6C, 0x20, 0x50, 0x41, 0x4C, 0x20, 0x44, 0x41, 0x43,
	0x20, 0x62, 0x6F, 0x61, 0x72, 0x64, 0x20, 0x0A, 0x00,
	/* padding */
	0x00, 0x00, 0x00,
};
/* 803D1A80 0029 .data      @359                                                         */
SECTION_DATA u8 vi__LIT_359[44] = {
	0x69, 0x73, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6C, 0x61, 0x62, 0x6C, 0x65, 0x2E, 0x20, 0x50, 0x6C,
	0x65, 0x61, 0x73, 0x65, 0x20, 0x64, 0x6F, 0x20, 0x4E, 0x4F, 0x54, 0x20, 0x75, 0x73, 0x65, 0x20,
	0x74, 0x68, 0x69, 0x73, 0x20, 0x20, 0x20, 0x0A, 0x00,
	/* padding */
	0x00, 0x00, 0x00,
};
/* 803D1AAC 0029 .data      @360                                                         */
SECTION_DATA u8 vi__LIT_360[44] = {
	0x6D, 0x6F, 0x64, 0x65, 0x20, 0x69, 0x6E, 0x20, 0x72, 0x65, 0x61, 0x6C, 0x20, 0x67, 0x61, 0x6D,
	0x65, 0x73, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x0A, 0x00,
	/* padding */
	0x00, 0x00, 0x00,
};
/* 803D1AD8 004B .data      @538                                                         */
SECTION_DATA u8 vi__LIT_538[76] = {
	0x56, 0x49, 0x43, 0x6F, 0x6E, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x28, 0x29, 0x3A, 0x20, 0x54,
	0x72, 0x69, 0x65, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x63, 0x68, 0x61, 0x6E, 0x67, 0x65, 0x20, 0x6D,
	0x6F, 0x64, 0x65, 0x20, 0x66, 0x72, 0x6F, 0x6D, 0x20, 0x28, 0x25, 0x64, 0x29, 0x20, 0x74, 0x6F,
	0x20, 0x28, 0x25, 0x64, 0x29, 0x2C, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x69, 0x73, 0x20,
	0x66, 0x6F, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6E, 0x0A, 0x00,
	/* padding */
	0x00,
};
/* 803D1B24 0020 .data      @740                                                         */
SECTION_DATA u8 vi__LIT_740[36] = {
	0x80, 0x34, 0xDA, 0xD4, 0x80, 0x34, 0xDA, 0xDC, 0x80, 0x34, 0xDA, 0xE4, 0x80, 0x34, 0xDA, 0xD4,
	0x80, 0x34, 0xDA, 0xDC, 0x80, 0x34, 0xDA, 0xE4, 0x80, 0x34, 0xDA, 0xD4, 0x80, 0x34, 0xDA, 0xD4,
	/* padding */
	0x00, 0x00, 0x00, 0x00,
};
}


/* ###################################################################################### */
/*                                         .sdata                                         */
/* ###################################################################################### */

extern "C" {
/* 80450A10 0004 .sdata     __VIVersion                                                  */
SECTION_SDATA u8 __VIVersion[4] = {
	0x80, 0x3D, 0x17, 0x60,
};
/* 80450A14 0005 .sdata     @537                                                         */
SECTION_SDATA u8 vi__LIT_537[12] = {
	0x76, 0x69, 0x2E, 0x63, 0x00,
	/* padding */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
}


/* ###################################################################################### */
/*                                          .bss                                          */
/* ###################################################################################### */

extern "C" {
/* 8044CA28 0000 .bss       ...bss.0                                                     */
/* 8044CA28 0076 .bss       regs                                                         */
SECTION_BSS u8 regs[120];
/* 8044CAA0 0076 .bss       shdwRegs                                                     */
SECTION_BSS u8 shdwRegs[120];
/* 8044CB18 0058 .bss       HorVer                                                       */
SECTION_BSS u8 HorVer[88];
}


/* ###################################################################################### */
/*                                         .sbss                                          */
/* ###################################################################################### */

extern "C" {
/* 804517E0 0004 .sbss      IsInitialized                                                */
SECTION_SBSS u8 IsInitialized[4];
/* 804517E4 0004 .sbss      retraceCount                                                 */
SECTION_SBSS u8 retraceCount[4];
/* 804517E8 0004 .sbss      flushFlag                                                    */
SECTION_SBSS u8 flushFlag[4];
/* 804517EC 0008 .sbss      retraceQueue                                                 */
SECTION_SBSS u8 retraceQueue[8];
/* 804517F4 0004 .sbss      PreCB                                                        */
SECTION_SBSS u8 PreCB[4];
/* 804517F8 0004 .sbss      PostCB                                                       */
SECTION_SBSS u8 PostCB[4];
/* 804517FC 0004 .sbss      PositionCallback                                             */
SECTION_SBSS u8 PositionCallback[4];
/* 80451800 0004 .sbss      encoderType                                                  */
SECTION_SBSS u8 encoderType[4];
/* 80451804 0004 .sbss      merged_80451804                                              */
SECTION_SBSS u8 merged_80451804[4];
/* 80451804 0002 displayOffsetH */
/* 80451806 0002 displayOffsetV */
/* 80451808 0004 .sbss      changeMode                                                   */
SECTION_SBSS u8 changeMode[4];
SECTION_SBSS u8 pad_8045180C[4];
/* 80451810 0004 .sbss      changed                                                      */
SECTION_SBSS u8 changed[4];
/* 80451814 0004 .sbss      data_80451814                                                */
SECTION_SBSS u8 data_80451814[4];
/* 80451818 0004 .sbss      shdwChangeMode                                               */
SECTION_SBSS u8 shdwChangeMode[4];
SECTION_SBSS u8 pad_8045181C[4];
/* 80451820 0004 .sbss      shdwChanged                                                  */
SECTION_SBSS u8 shdwChanged[4];
/* 80451824 0004 .sbss      data_80451824                                                */
SECTION_SBSS u8 data_80451824[4];
/* 80451828 0004 .sbss      CurrTiming                                                   */
SECTION_SBSS u8 CurrTiming[4];
/* 8045182C 0004 .sbss      CurrTvMode                                                   */
SECTION_SBSS u8 CurrTvMode[4];
/* 80451830 0004 .sbss      NextBufAddr                                                  */
SECTION_SBSS u8 NextBufAddr[4];
/* 80451834 0004 .sbss      CurrBufAddr                                                  */
SECTION_SBSS u8 CurrBufAddr[4];
/* 80451838 0004 .sbss      FBSet                                                        */
SECTION_SBSS u8 FBSet[4];
/* 8045183C 0004 .sbss      timingExtra                                                  */
SECTION_SBSS u8 timingExtra[4];
/* 80451840 0004 .sbss      message$351                                                  */
SECTION_SBSS u8 data_80451840[4];
SECTION_SBSS u8 pad_80451844[4];
}


/* ###################################################################################### */
/*                                         .text                                          */
/* ###################################################################################### */

extern "C" {
/* 8034BF6C 0274 .text      __VIRetraceHandler                                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void __VIRetraceHandler() {
	nofralloc
#include "_include/vi/vi/__VIRetraceHandler.s"
}
#pragma pop

/* 8034C1E0 0044 .text      VISetPreRetraceCallback                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void VISetPreRetraceCallback() {
	nofralloc
#include "_include/vi/vi/VISetPreRetraceCallback.s"
}
#pragma pop

/* 8034C224 0044 .text      VISetPostRetraceCallback                                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void VISetPostRetraceCallback() {
	nofralloc
#include "_include/vi/vi/VISetPostRetraceCallback.s"
}
#pragma pop

/* 8034C268 00A8 .text      getTiming                                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void getTiming() {
	nofralloc
#include "_include/vi/vi/getTiming.s"
}
#pragma pop

/* 8034C310 0204 .text      __VIInit                                                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void __VIInit() {
	nofralloc
#include "_include/vi/vi/__VIInit.s"
}
#pragma pop

/* 8034C514 04B0 .text      VIInit                                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void VIInit() {
	nofralloc
#include "_include/vi/vi/VIInit.s"
}
#pragma pop

/* 8034C9C4 0054 .text      VIWaitForRetrace                                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void VIWaitForRetrace() {
	nofralloc
#include "_include/vi/vi/VIWaitForRetrace.s"
}
#pragma pop

/* 8034CA18 02D4 .text      setFbbRegs                                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void setFbbRegs() {
	nofralloc
#include "_include/vi/vi/setFbbRegs.s"
}
#pragma pop

/* 8034CCEC 01A0 .text      setVerticalRegs                                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void setVerticalRegs() {
	nofralloc
#include "_include/vi/vi/setVerticalRegs.s"
}
#pragma pop

/* 8034CE8C 0808 .text      VIConfigure                                                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void VIConfigure() {
	nofralloc
#include "_include/vi/vi/VIConfigure.s"
}
#pragma pop

/* 8034D694 0130 .text      VIFlush                                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void VIFlush() {
	nofralloc
#include "_include/vi/vi/VIFlush.s"
}
#pragma pop

/* 8034D7C4 006C .text      VISetNextFrameBuffer                                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void VISetNextFrameBuffer() {
	nofralloc
#include "_include/vi/vi/VISetNextFrameBuffer.s"
}
#pragma pop

/* 8034D830 0008 .text      VIGetNextFrameBuffer                                         */
u32 VIGetNextFrameBuffer() {
	return *(u32*)&NextBufAddr;
}

/* 8034D838 0008 .text      VIGetCurrentFrameBuffer                                      */
u32 VIGetCurrentFrameBuffer() {
	return *(u32*)&CurrBufAddr;
}

/* 8034D840 007C .text      VISetBlack                                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void VISetBlack() {
	nofralloc
#include "_include/vi/vi/VISetBlack.s"
}
#pragma pop

/* 8034D8BC 0008 .text      VIGetRetraceCount                                            */
u32 VIGetRetraceCount() {
	return *(u32*)&retraceCount;
}

/* 8034D8C4 003C .text      GetCurrentDisplayPosition                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void GetCurrentDisplayPosition() {
	nofralloc
#include "_include/vi/vi/GetCurrentDisplayPosition.s"
}
#pragma pop

/* 8034D900 0068 .text      getCurrentFieldEvenOdd                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void getCurrentFieldEvenOdd() {
	nofralloc
#include "_include/vi/vi/getCurrentFieldEvenOdd.s"
}
#pragma pop

/* 8034D968 009C .text      VIGetNextField                                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void VIGetNextField() {
	nofralloc
#include "_include/vi/vi/VIGetNextField.s"
}
#pragma pop

/* 8034DA04 0098 .text      VIGetCurrentLine                                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void VIGetCurrentLine() {
	nofralloc
#include "_include/vi/vi/VIGetCurrentLine.s"
}
#pragma pop

/* 8034DA9C 0068 .text      VIGetTvFormat                                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void VIGetTvFormat() {
	nofralloc
#include "_include/vi/vi/VIGetTvFormat.s"
}
#pragma pop

/* 8034DB04 003C .text      VIGetDTVStatus                                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void VIGetDTVStatus() {
	nofralloc
#include "_include/vi/vi/VIGetDTVStatus.s"
}
#pragma pop

/* 8034DB40 021C .text      __VIDisplayPositionToXY                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void __VIDisplayPositionToXY() {
	nofralloc
#include "_include/vi/vi/__VIDisplayPositionToXY.s"
}
#pragma pop

/* 8034DD5C 0060 .text      __VIGetCurrentPosition                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void __VIGetCurrentPosition() {
	nofralloc
#include "_include/vi/vi/__VIGetCurrentPosition.s"
}
#pragma pop

}

