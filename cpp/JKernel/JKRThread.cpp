// 
// Generated By: dol2asm
// 

// 
// Compiler Options: -str pool,readonly,reuse
// 

#include "dolphin/types.h"

// 
// Additional Symbols:
// 

struct JKRHeap;

extern void* operator new(u32, JKRHeap*, int); /* __nw__FUlP7JKRHeapi */
extern void operator delete(void*); /* __dl__FPv */

extern "C" {
extern void becomeCurrentHeap__7JKRHeapFv();
extern void alloc__7JKRHeapFUliP7JKRHeap();
extern void free__7JKRHeapFPvP7JKRHeap();
extern void findFromRoot__7JKRHeapFPv();
extern void isSubHeap__7JKRHeapCFP7JKRHeap();
extern void __nw__FUlP7JKRHeapi();
extern void __dl__FPv();
extern void __ct__11JKRDisposerFv();
extern void __dt__11JKRDisposerFv();
extern void __dt__9JKRThreadFv();
extern void setCommon_mesgQueue__9JKRThreadFP7JKRHeapi();
extern void setCommon_heapSpecified__9JKRThreadFP7JKRHeapUli();
extern void start__9JKRThreadFPv();
extern void searchThread__9JKRThreadFP8OSThread();
extern void __ct__15JKRThreadSwitchFP7JKRHeap();
extern void callback__15JKRThreadSwitchFP8OSThreadP8OSThread();
extern void draw__15JKRThreadSwitchFP14JKRThreadName_P10JUTConsole();
extern int run__9JKRThreadFv();
extern void draw__15JKRThreadSwitchFP14JKRThreadName_();
extern void __dt__15JKRThreadSwitchFv();
extern void func_802D1EFC();
extern void func_802D1F50();
extern void __ct__10JSUPtrLinkFPv();
extern void __dt__10JSUPtrLinkFv();
extern void __ct__10JSUPtrListFb();
extern void __dt__10JSUPtrListFv();
extern void initiate__10JSUPtrListFv();
extern void append__10JSUPtrListFP10JSUPtrLink();
extern void remove__10JSUPtrListFP10JSUPtrLink();
extern void clear__10JUTConsoleFv();
extern void print_f__10JUTConsoleFPCce();
extern void print__10JUTConsoleFPCc();
extern void JUTWarningConsole();
extern void OSInitMessageQueue();
extern void OSSetSwitchThreadCallback();
extern void OSIsThreadTerminated();
extern void OSCreateThread();
extern void OSCancelThread();
extern void OSDetachThread();
extern void OSGetTick();
extern void __register_global_object();
extern void __cvt_fp2unsigned();
extern void _savegpr_25();
extern void _savegpr_27();
extern void _savegpr_28();
extern void _savegpr_29();
extern void _restgpr_25();
extern void _restgpr_27();
extern void _restgpr_28();
extern void _restgpr_29();
extern void __cvt_sll_flt();
extern void sprintf();
SECTION_RODATA extern const u8 JKRThread__stringBase0[208];
SECTION_DATA extern const void* __vt__15JKRThreadSwitch[5];
SECTION_DATA extern const void* __vt__9JKRThread[5];
SECTION_BSS extern u8 LIT_481[12];
SECTION_BSS extern u8 sThreadList__9JKRThread[12];
SECTION_SBSS extern u8 sSystemHeap__7JKRHeap[4];
SECTION_SBSS extern u8 sCurrentHeap__7JKRHeap[4];
SECTION_SBSS extern u8 sRootHeap__7JKRHeap[4];
SECTION_SBSS extern u8 sManager__15JKRThreadSwitch[4];
SECTION_SBSS extern u8 sTotalCount__15JKRThreadSwitch[4];
SECTION_SBSS extern u8 sTotalStart__15JKRThreadSwitch[4];
SECTION_SBSS extern u8 data_804513BC[4];
SECTION_SBSS extern u8 mUserPreCallback__15JKRThreadSwitch[4];
SECTION_SBSS extern u8 mUserPostCallback__15JKRThreadSwitch[4];
SECTION_SDATA2 extern f32 JKRThread__LIT_934;
SECTION_SDATA2 extern f32 JKRThread__LIT_935;
SECTION_SDATA2 extern f64 JKRThread__LIT_937;
}


/* ###################################################################################### */
/*                                        .rodata                                         */
/* ###################################################################################### */

extern "C" {
/* 8039CFA8 00CD .rodata    @stringBase0                                                 */
const char* const stringBase_8039CFA8 = "on";
const char* const stringBase_8039CFAB = "off";
const char* const stringBase_8039CFAF = 
    "JKRThread:%x  OSThread:%x  Load:"
    "ID:%d  (%s)\n";
const char* const stringBase_8039CFDC = 
    "JKRThreadSwitch: currentHeap des"
    "troyed.\n";
const char* const stringBase_8039D005 = 
    " total: switch:%3d  time:%d(%df)"
    "\n";
const char* const stringBase_8039D027 = 
    " -------------------------------"
    "------\n";
const char* const stringBase_8039D04F = "%d";
const char* const stringBase_8039D052 = 
    " [%10s] switch:%5d  cost:%2d.%d%"
    "%\n";
}


/* ###################################################################################### */
/*                                         .data                                          */
/* ###################################################################################### */

extern "C" {
/* 803CC100 0014 .data      __vt__15JKRThreadSwitch                                      */
SECTION_DATA const  void* __vt__15JKRThreadSwitch[5] = {
	NULL, /* RTTI */
	NULL,
	(void*)draw__15JKRThreadSwitchFP14JKRThreadName_P10JUTConsole,
	(void*)draw__15JKRThreadSwitchFP14JKRThreadName_,
	(void*)__dt__15JKRThreadSwitchFv,
};
/* 803CC114 0010 .data      __vt__9JKRThread                                             */
SECTION_DATA const  void* __vt__9JKRThread[5] = {
	NULL, /* RTTI */
	NULL,
	(void*)__dt__9JKRThreadFv,
	(void*)run__9JKRThreadFv,
	/* padding */
	NULL,
};
}


/* ###################################################################################### */
/*                                        .sdata2                                         */
/* ###################################################################################### */

extern "C" {
/* 80455FC0 0004 .sdata2    @934                                                         */
// 0x42c80000
SECTION_SDATA2 f32 JKRThread__LIT_934 = 100.000000f;
/* 80455FC4 0004 .sdata2    @935                                                         */
// 0x447a0000
SECTION_SDATA2 f32 JKRThread__LIT_935 = 1000.000000f;
/* 80455FC8 0008 .sdata2    @937                                                         */
// 0x4330000000000000 | compiler-generated value used in cast: (float)u32
SECTION_SDATA2 f64 JKRThread__LIT_937 = 4503599627370496.000000;
}


/* ###################################################################################### */
/*                                          .bss                                          */
/* ###################################################################################### */

extern "C" {
/* 80434280 0000 .bss       ...bss.0                                                     */
/* 80434280 000C .bss       @481                                                         */
SECTION_BSS u8 LIT_481[12];
/* 8043428C 000C .bss       sThreadList__9JKRThread                                      */
SECTION_BSS u8 sThreadList__9JKRThread[12];
/* 80434298 000C .bss       @989                                                         */
SECTION_BSS u8 LIT_989[12];
/* 804342A4 000C .bss       sTaskList__7JKRTask                                          */
SECTION_BSS u8 sTaskList__7JKRTask[12];
/* 804342B0 0020 .bss       sEndMesgQueue__7JKRTask                                      */
SECTION_BSS u8 sEndMesgQueue__7JKRTask[32];
}


/* ###################################################################################### */
/*                                         .sbss                                          */
/* ###################################################################################### */

extern "C" {
/* 804513B0 0004 .sbss      sManager__15JKRThreadSwitch                                  */
SECTION_SBSS u8 sManager__15JKRThreadSwitch[4];
/* 804513B4 0004 .sbss      sTotalCount__15JKRThreadSwitch                               */
SECTION_SBSS u8 sTotalCount__15JKRThreadSwitch[4];
/* 804513B8 0004 .sbss      sTotalStart__15JKRThreadSwitch                               */
SECTION_SBSS u8 sTotalStart__15JKRThreadSwitch[4];
/* 804513BC 0004 .sbss      data_804513BC                                                */
SECTION_SBSS u8 data_804513BC[4];
/* 804513C0 0004 .sbss      mUserPreCallback__15JKRThreadSwitch                          */
SECTION_SBSS u8 mUserPreCallback__15JKRThreadSwitch[4];
/* 804513C4 0004 .sbss      mUserPostCallback__15JKRThreadSwitch                         */
SECTION_SBSS u8 mUserPostCallback__15JKRThreadSwitch[4];
}


/* ###################################################################################### */
/*                                         .text                                          */
/* ###################################################################################### */

extern "C" {
/* 802D1568 00A8 .text      __ct__9JKRThreadFUlii                                        */
// JKRThread::JKRThread(u32, int, int)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void __ct__9JKRThreadFUlii() {
	nofralloc
#include "_include/JKernel/JKRThread/__ct__9JKRThreadFUlii.s"
}
#pragma pop

/* 802D1610 00A8 .text      __ct__9JKRThreadFP7JKRHeapUlii                               */
// JKRThread::JKRThread(JKRHeap*, u32, int, int)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void __ct__9JKRThreadFP7JKRHeapUlii() {
	nofralloc
#include "_include/JKernel/JKRThread/__ct__9JKRThreadFP7JKRHeapUlii.s"
}
#pragma pop

/* 802D16B8 00A0 .text      __ct__9JKRThreadFP8OSThreadi                                 */
// JKRThread::JKRThread(OSThread*, int)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void __ct__9JKRThreadFP8OSThreadi() {
	nofralloc
#include "_include/JKernel/JKRThread/__ct__9JKRThreadFP8OSThreadi.s"
}
#pragma pop

/* 802D1758 00D8 .text      __dt__9JKRThreadFv                                           */
// JKRThread::~JKRThread(void)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void __dt__9JKRThreadFv() {
	nofralloc
#include "_include/JKernel/JKRThread/__dt__9JKRThreadFv.s"
}
#pragma pop

/* 802D1830 0074 .text      setCommon_mesgQueue__9JKRThreadFP7JKRHeapi                   */
// JKRThread::setCommon_mesgQueue(JKRHeap*, int)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void setCommon_mesgQueue__9JKRThreadFP7JKRHeapi() {
	nofralloc
#include "_include/JKernel/JKRThread/setCommon_mesgQueue__9JKRThreadFP7JKRHeapi.s"
}
#pragma pop

/* 802D18A4 0090 .text      setCommon_heapSpecified__9JKRThreadFP7JKRHeapUli             */
// JKRThread::setCommon_heapSpecified(JKRHeap*, u32, int)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void setCommon_heapSpecified__9JKRThreadFP7JKRHeapUli() {
	nofralloc
#include "_include/JKernel/JKRThread/setCommon_heapSpecified__9JKRThreadFP7JKRHeapUli.s"
}
#pragma pop

/* 802D1934 002C .text      start__9JKRThreadFPv                                         */
// JKRThread::start(void*)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void start__9JKRThreadFPv() {
	nofralloc
#include "_include/JKernel/JKRThread/start__9JKRThreadFPv.s"
}
#pragma pop

/* 802D1960 003C .text      searchThread__9JKRThreadFP8OSThread                          */
// JKRThread::searchThread(OSThread*)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void searchThread__9JKRThreadFP8OSThread() {
	nofralloc
#include "_include/JKernel/JKRThread/searchThread__9JKRThreadFP8OSThread.s"
}
#pragma pop

/* 802D199C 0078 .text      __ct__15JKRThreadSwitchFP7JKRHeap                            */
// JKRThreadSwitch::JKRThreadSwitch(JKRHeap*)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void __ct__15JKRThreadSwitchFP7JKRHeap() {
	nofralloc
#include "_include/JKernel/JKRThread/__ct__15JKRThreadSwitchFP7JKRHeap.s"
}
#pragma pop

/* 802D1A14 005C .text      createManager__15JKRThreadSwitchFP7JKRHeap                   */
// JKRThreadSwitch::createManager(JKRHeap*)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void createManager__15JKRThreadSwitchFP7JKRHeap() {
	nofralloc
#include "_include/JKernel/JKRThread/createManager__15JKRThreadSwitchFP7JKRHeap.s"
}
#pragma pop

/* 802D1A70 0074 .text      enter__15JKRThreadSwitchFP9JKRThreadi                        */
// JKRThreadSwitch::enter(JKRThread*, int)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void enter__15JKRThreadSwitchFP9JKRThreadi() {
	nofralloc
#include "_include/JKernel/JKRThread/enter__15JKRThreadSwitchFP9JKRThreadi.s"
}
#pragma pop

/* 802D1AE4 0190 .text      callback__15JKRThreadSwitchFP8OSThreadP8OSThread             */
// JKRThreadSwitch::callback(OSThread*, OSThread*)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void callback__15JKRThreadSwitchFP8OSThreadP8OSThread() {
	nofralloc
#include "_include/JKernel/JKRThread/callback__15JKRThreadSwitchFP8OSThreadP8OSThread.s"
}
#pragma pop

/* 802D1C74 01A0 .text      draw__15JKRThreadSwitchFP14JKRThreadName_P10JUTConsole       */
// JKRThreadSwitch::draw(JKRThreadName_*, JUTConsole*)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void draw__15JKRThreadSwitchFP14JKRThreadName_P10JUTConsole() {
	nofralloc
#include "_include/JKernel/JKRThread/draw__15JKRThreadSwitchFP14JKRThreadName_P10JUTConsole.s"
}
#pragma pop

/* 802D1E14 0008 .text      run__9JKRThreadFv                                            */
// JKRThread::run(void)
int run__9JKRThreadFv() {
	return 0;
}

/* 802D1E1C 0030 .text      draw__15JKRThreadSwitchFP14JKRThreadName_                    */
// JKRThreadSwitch::draw(JKRThreadName_*)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void draw__15JKRThreadSwitchFP14JKRThreadName_() {
	nofralloc
#include "_include/JKernel/JKRThread/draw__15JKRThreadSwitchFP14JKRThreadName_.s"
}
#pragma pop

/* 802D1E4C 0048 .text      __dt__15JKRThreadSwitchFv                                    */
// JKRThreadSwitch::~JKRThreadSwitch(void)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void __dt__15JKRThreadSwitchFv() {
	nofralloc
#include "_include/JKernel/JKRThread/__dt__15JKRThreadSwitchFv.s"
}
#pragma pop

/* 802D1E94 0068 .text      __sinit_JKRThread_cpp                                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void __sinit_JKRThread_cpp() {
	nofralloc
#include "_include/JKernel/JKRThread/__sinit_JKRThread_cpp.s"
}
#pragma pop

/* 802D1EFC 0054 .text      __dt__17JSUList<7JKRTask>Fv                                  */
// JSUList<7JKRTask>::~JSUList<7JKRTask>(void)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void func_802D1EFC() {
	nofralloc
#include "_include/JKernel/JKRThread/func_802D1EFC.s"
}
#pragma pop

/* 802D1F50 0054 .text      __dt__19JSUList<9JKRThread>Fv                                */
// JSUList<9JKRThread>::~JSUList<9JKRThread>(void)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void func_802D1F50() {
	nofralloc
#include "_include/JKernel/JKRThread/func_802D1F50.s"
}
#pragma pop

}

