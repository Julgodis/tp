// 
// Generated By: dol2asm
// 

// 
// Compiler Options: -str pool,readonly,reuse
// 

#include "dolphin/types.h"

// 
// Additional Symbols:
// 

extern void operator delete(void*); /* __dl__FPv */

extern "C" {
extern void __ct__7JKRHeapFPvUlP7JKRHeapb();
extern void __dt__7JKRHeapFv();
extern void initArena__7JKRHeapFPPcPUli();
extern void alloc__7JKRHeapFUliP7JKRHeap();
extern void free__7JKRHeapFPvP7JKRHeap();
extern void callAllDisposer__7JKRHeapFv();
extern void getTotalFreeSize__7JKRHeapFv();
extern void getMaxAllocatableSize__7JKRHeapFi();
extern void find__7JKRHeapCFPv();
extern void dispose__7JKRHeapFPvUl();
extern void dispose__7JKRHeapFv();
extern void __dl__FPv();
extern void state_dump__7JKRHeapCFRCQ27JKRHeap6TState();
extern void do_destroy__10JKRExpHeapFv();
extern void __ct__10JKRExpHeapFPvUlP7JKRHeapb();
extern void __dt__10JKRExpHeapFv();
extern void do_alloc__10JKRExpHeapFUli();
extern void allocFromHead__10JKRExpHeapFUli();
extern void allocFromHead__10JKRExpHeapFUl();
extern void allocFromTail__10JKRExpHeapFUli();
extern void allocFromTail__10JKRExpHeapFUl();
extern void do_free__10JKRExpHeapFPv();
extern void do_freeAll__10JKRExpHeapFv();
extern void do_freeTail__10JKRExpHeapFv();
extern void do_fillFreeArea__10JKRExpHeapFv();
extern void do_changeGroupID__10JKRExpHeapFUc();
extern void do_resize__10JKRExpHeapFPvUl();
extern void do_getSize__10JKRExpHeapFPv();
extern void do_getFreeSize__10JKRExpHeapFv();
extern void do_getMaxFreeBlock__10JKRExpHeapFv();
extern void do_getTotalFreeSize__10JKRExpHeapFv();
extern void getUsedSize__10JKRExpHeapCFUc();
extern void appendUsedList__10JKRExpHeapFPQ210JKRExpHeap9CMemBlock();
extern void setFreeBlock__10JKRExpHeapFPQ210JKRExpHeap9CMemBlockPQ210JKRExpHeap9CMemBlockPQ210JKRExpHeap9CMemBlock();
extern void removeFreeBlock__10JKRExpHeapFPQ210JKRExpHeap9CMemBlock();
extern void removeUsedBlock__10JKRExpHeapFPQ210JKRExpHeap9CMemBlock();
extern void recycleFreeBlock__10JKRExpHeapFPQ210JKRExpHeap9CMemBlock();
extern void joinTwoBlocks__10JKRExpHeapFPQ210JKRExpHeap9CMemBlock();
extern void check__10JKRExpHeapFv();
extern void dump__10JKRExpHeapFv();
extern void dump_sort__10JKRExpHeapFv();
extern void initiate__Q210JKRExpHeap9CMemBlockFPQ210JKRExpHeap9CMemBlockPQ210JKRExpHeap9CMemBlockUlUcUc();
extern void allocFore__Q210JKRExpHeap9CMemBlockFUlUcUcUcUc();
extern void allocBack__Q210JKRExpHeap9CMemBlockFUlUcUcUcUc();
extern void free__Q210JKRExpHeap9CMemBlockFP10JKRExpHeap();
extern void getHeapBlock__Q210JKRExpHeap9CMemBlockFPv();
extern void state_register__10JKRExpHeapCFPQ27JKRHeap6TStateUl();
extern void state_compare__10JKRExpHeapCFRCQ27JKRHeap6TStateRCQ27JKRHeap6TState();
extern void getHeapType__10JKRExpHeapFv();
extern u8 do_getCurrentGroupId__10JKRExpHeapFv(u8*);
extern void panic_f__12JUTExceptionFPCciPCce();
extern void JUTReportConsole_f();
extern void JUTReportConsole();
extern void JUTWarningConsole_f();
extern void JUTWarningConsole();
extern void OSLockMutex();
extern void OSUnlockMutex();
extern void _savegpr_25();
extern void _savegpr_27();
extern void _savegpr_28();
extern void _savegpr_29();
extern void _restgpr_25();
extern void _restgpr_27();
extern void _restgpr_28();
extern void _restgpr_29();
SECTION_RODATA extern const u8 JKRExpHeap__stringBase0[864];
SECTION_DATA extern const void* __vt__10JKRExpHeap[24];
SECTION_SBSS extern u8 sCurrentHeap__7JKRHeap[4];
SECTION_SBSS extern u8 sRootHeap__7JKRHeap[4];
SECTION_SBSS extern u8 mErrorHandler__7JKRHeap[4];
SECTION_SBSS extern u8 DBfoundSize[4];
SECTION_SBSS extern u8 DBfoundOffset[4];
SECTION_SBSS extern u8 DBfoundBlock[4];
SECTION_SBSS extern u8 DBnewFreeBlock[4];
SECTION_SBSS extern u8 DBnewUsedBlock[4];
SECTION_SDATA2 extern u8 JKRExpHeap__LIT_1121[8];
SECTION_SDATA2 extern f64 LIT_1123;
}


/* ###################################################################################### */
/*                                        .rodata                                         */
/* ###################################################################################### */

extern "C" {
/* 8039CAF0 0360 .rodata    @stringBase0                                                 */
const char* const stringBase_8039CAF0 = 
    ":::cannot alloc memory (0x%x byt"
    "e).\n";
const char* const stringBase_8039CB15 = "JKRExpHeap.cpp";
const char* const stringBase_8039CB24 = "%s";
const char* const stringBase_8039CB27 = "bad appendUsedList\n";
const char* const stringBase_8039CB3B = 
    ":::Heap may be broken. (block = "
    "%x)";
const char* const stringBase_8039CB5F = "Bad Block\n";
const char* const stringBase_8039CB6A = 
    ":::addr %08x: bad heap signature"
    ". (%c%c)\n";
const char* const stringBase_8039CB94 = 
    ":::addr %08x: bad next pointer ("
    "%08x)\nabort\n";
const char* const stringBase_8039CBC1 = 
    ":::addr %08x: bad previous point"
    "er (%08x)\n";
const char* const stringBase_8039CBEC = 
    ":::addr %08x: bad used list(REV)"
    " (%08x)\n";
const char* const stringBase_8039CC15 = 
    ":::addr %08x: bad block size (%0"
    "8x)\n";
const char* const stringBase_8039CC3A = 
    ":::bad total memory block size ("
    "%08X, %08X)\n";
const char* const stringBase_8039CC67 = 
    ":::there is some error in this h"
    "eap!\n";
const char* const stringBase_8039CC8D = 
    " attr  address:   size    gid al"
    "n   prev_ptr next_ptr\n";
const char* const stringBase_8039CCC4 = "(Used Blocks)\n";
const char* const stringBase_8039CCD3 = " NONE\n";
const char* const stringBase_8039CCDA = 
    "xxxxx %08x: --------  --- ---  ("
    "-------- --------)\nabort\n";
const char* const stringBase_8039CD14 = 
    "%s %08x: %08x  %3d %3d  (%08x %0"
    "8x)\n";
const char* const stringBase_8039CD39 = " temp";
const char* const stringBase_8039CD3F = "alloc";
const char* const stringBase_8039CD45 = "(Free Blocks)\n";
const char* const stringBase_8039CD54 = " free";
const char* const stringBase_8039CD5A = 
    "%d / %d bytes (%6.2f%%) used (U:"
    "%d F:%d)\n";
const char* const stringBase_8039CD84 = "+---------------JKRExpHeap\n";
const char* const stringBase_8039CDA0 = 
    "|         Align Group  size    ("
    " prev , next )\n";
const char* const stringBase_8039CDD0 = "| ---- FreeFirst\n";
const char* const stringBase_8039CDE2 = "| %08x  ";
const char* const stringBase_8039CDEB = "%2x  %3d  %6x  (%08x %08x)\n";
const char* const stringBase_8039CE07 = "| ---- FreeLast\n";
const char* const stringBase_8039CE18 = "| ---- UsedFirst\n";
const char* const stringBase_8039CE2A = "| ---- UsedLast\n";
const char* const stringBase_8039CE3B = "+---------------End\n";
}


/* ###################################################################################### */
/*                                         .data                                          */
/* ###################################################################################### */

extern "C" {
/* 803CBFD0 0060 .data      __vt__10JKRExpHeap                                           */
SECTION_DATA const  void* __vt__10JKRExpHeap[24] = {
	NULL, /* RTTI */
	NULL,
	(void*)__dt__10JKRExpHeapFv,
	(void*)callAllDisposer__7JKRHeapFv,
	(void*)getHeapType__10JKRExpHeapFv,
	(void*)check__10JKRExpHeapFv,
	(void*)dump_sort__10JKRExpHeapFv,
	(void*)dump__10JKRExpHeapFv,
	(void*)do_destroy__10JKRExpHeapFv,
	(void*)do_alloc__10JKRExpHeapFUli,
	(void*)do_free__10JKRExpHeapFPv,
	(void*)do_freeAll__10JKRExpHeapFv,
	(void*)do_freeTail__10JKRExpHeapFv,
	(void*)do_fillFreeArea__10JKRExpHeapFv,
	(void*)do_resize__10JKRExpHeapFPvUl,
	(void*)do_getSize__10JKRExpHeapFPv,
	(void*)do_getFreeSize__10JKRExpHeapFv,
	(void*)do_getMaxFreeBlock__10JKRExpHeapFv,
	(void*)do_getTotalFreeSize__10JKRExpHeapFv,
	(void*)do_changeGroupID__10JKRExpHeapFUc,
	(void*)do_getCurrentGroupId__10JKRExpHeapFv,
	(void*)state_register__10JKRExpHeapCFPQ27JKRHeap6TStateUl,
	(void*)state_compare__10JKRExpHeapCFRCQ27JKRHeap6TStateRCQ27JKRHeap6TState,
	(void*)state_dump__7JKRHeapCFRCQ27JKRHeap6TState,
};
}


/* ###################################################################################### */
/*                                        .sdata2                                         */
/* ###################################################################################### */

extern "C" {
/* 80455F98 0004 .sdata2    @1121                                                        */
SECTION_SDATA2 u8 JKRExpHeap__LIT_1121[8] = {
	0x42, 0xC8, 0x00, 0x00,
	/* padding */
	0x00, 0x00, 0x00, 0x00,
};
/* 80455FA0 0008 .sdata2    @1123                                                        */
// 0x4330000000000000 | compiler-generated value used in cast: (float)u32
SECTION_SDATA2 f64 LIT_1123 = 4503599627370496.000000;
}


/* ###################################################################################### */
/*                                         .sbss                                          */
/* ###################################################################################### */

extern "C" {
/* 80451398 0004 .sbss      DBfoundSize                                                  */
SECTION_SBSS u8 DBfoundSize[4];
/* 8045139C 0004 .sbss      DBfoundOffset                                                */
SECTION_SBSS u8 DBfoundOffset[4];
/* 804513A0 0004 .sbss      DBfoundBlock                                                 */
SECTION_SBSS u8 DBfoundBlock[4];
/* 804513A4 0004 .sbss      DBnewFreeBlock                                               */
SECTION_SBSS u8 DBnewFreeBlock[4];
/* 804513A8 0004 .sbss      DBnewUsedBlock                                               */
SECTION_SBSS u8 DBnewUsedBlock[4];
SECTION_SBSS u8 pad_804513AC[4];
}


/* ###################################################################################### */
/*                                         .text                                          */
/* ###################################################################################### */

extern "C" {
/* 802CEDB4 0078 .text      createRoot__10JKRExpHeapFib                                  */
// JKRExpHeap::createRoot(int, bool)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void createRoot__10JKRExpHeapFib() {
	nofralloc
#include "_include/JKernel/JKRExpHeap/createRoot__10JKRExpHeapFib.s"
}
#pragma pop

/* 802CEE2C 00D4 .text      create__10JKRExpHeapFUlP7JKRHeapb                            */
// JKRExpHeap::create(u32, JKRHeap*, bool)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void create__10JKRExpHeapFUlP7JKRHeapb() {
	nofralloc
#include "_include/JKernel/JKRExpHeap/create__10JKRExpHeapFUlP7JKRHeapb.s"
}
#pragma pop

/* 802CEF00 00AC .text      create__10JKRExpHeapFPvUlP7JKRHeapb                          */
// JKRExpHeap::create(void*, u32, JKRHeap*, bool)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void create__10JKRExpHeapFPvUlP7JKRHeapb() {
	nofralloc
#include "_include/JKernel/JKRExpHeap/create__10JKRExpHeapFPvUlP7JKRHeapb.s"
}
#pragma pop

/* 802CEFAC 0084 .text      do_destroy__10JKRExpHeapFv                                   */
// JKRExpHeap::do_destroy(void)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void do_destroy__10JKRExpHeapFv() {
	nofralloc
#include "_include/JKernel/JKRExpHeap/do_destroy__10JKRExpHeapFv.s"
}
#pragma pop

/* 802CF030 0090 .text      __ct__10JKRExpHeapFPvUlP7JKRHeapb                            */
// JKRExpHeap::JKRExpHeap(void*, u32, JKRHeap*, bool)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void __ct__10JKRExpHeapFPvUlP7JKRHeapb() {
	nofralloc
#include "_include/JKernel/JKRExpHeap/__ct__10JKRExpHeapFPvUlP7JKRHeapb.s"
}
#pragma pop

/* 802CF0C0 0068 .text      __dt__10JKRExpHeapFv                                         */
// JKRExpHeap::~JKRExpHeap(void)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void __dt__10JKRExpHeapFv() {
	nofralloc
#include "_include/JKernel/JKRExpHeap/__dt__10JKRExpHeapFv.s"
}
#pragma pop

/* 802CF128 010C .text      do_alloc__10JKRExpHeapFUli                                   */
// JKRExpHeap::do_alloc(u32, int)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void do_alloc__10JKRExpHeapFUli() {
	nofralloc
#include "_include/JKernel/JKRExpHeap/do_alloc__10JKRExpHeapFUli.s"
}
#pragma pop

/* 802CF234 025C .text      allocFromHead__10JKRExpHeapFUli                              */
// JKRExpHeap::allocFromHead(u32, int)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void allocFromHead__10JKRExpHeapFUli() {
	nofralloc
#include "_include/JKernel/JKRExpHeap/allocFromHead__10JKRExpHeapFUli.s"
}
#pragma pop

/* 802CF490 00E4 .text      allocFromHead__10JKRExpHeapFUl                               */
// JKRExpHeap::allocFromHead(u32)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void allocFromHead__10JKRExpHeapFUl() {
	nofralloc
#include "_include/JKernel/JKRExpHeap/allocFromHead__10JKRExpHeapFUl.s"
}
#pragma pop

/* 802CF574 0160 .text      allocFromTail__10JKRExpHeapFUli                              */
// JKRExpHeap::allocFromTail(u32, int)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void allocFromTail__10JKRExpHeapFUli() {
	nofralloc
#include "_include/JKernel/JKRExpHeap/allocFromTail__10JKRExpHeapFUli.s"
}
#pragma pop

/* 802CF6D4 00D8 .text      allocFromTail__10JKRExpHeapFUl                               */
// JKRExpHeap::allocFromTail(u32)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void allocFromTail__10JKRExpHeapFUl() {
	nofralloc
#include "_include/JKernel/JKRExpHeap/allocFromTail__10JKRExpHeapFUl.s"
}
#pragma pop

/* 802CF7AC 0074 .text      do_free__10JKRExpHeapFPv                                     */
// JKRExpHeap::do_free(void*)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void do_free__10JKRExpHeapFPv() {
	nofralloc
#include "_include/JKernel/JKRExpHeap/do_free__10JKRExpHeapFPv.s"
}
#pragma pop

/* 802CF820 007C .text      do_freeAll__10JKRExpHeapFv                                   */
// JKRExpHeap::do_freeAll(void)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void do_freeAll__10JKRExpHeapFv() {
	nofralloc
#include "_include/JKernel/JKRExpHeap/do_freeAll__10JKRExpHeapFv.s"
}
#pragma pop

/* 802CF89C 0088 .text      do_freeTail__10JKRExpHeapFv                                  */
// JKRExpHeap::do_freeTail(void)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void do_freeTail__10JKRExpHeapFv() {
	nofralloc
#include "_include/JKernel/JKRExpHeap/do_freeTail__10JKRExpHeapFv.s"
}
#pragma pop

/* 802CF924 0004 .text      do_fillFreeArea__10JKRExpHeapFv                              */
// JKRExpHeap::do_fillFreeArea(void)
void do_fillFreeArea__10JKRExpHeapFv() {
	return;
}

/* 802CF928 0050 .text      do_changeGroupID__10JKRExpHeapFUc                            */
// JKRExpHeap::do_changeGroupID(u8)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void do_changeGroupID__10JKRExpHeapFUc() {
	nofralloc
#include "_include/JKernel/JKRExpHeap/do_changeGroupID__10JKRExpHeapFUc.s"
}
#pragma pop

/* 802CF978 01AC .text      do_resize__10JKRExpHeapFPvUl                                 */
// JKRExpHeap::do_resize(void*, u32)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void do_resize__10JKRExpHeapFPvUl() {
	nofralloc
#include "_include/JKernel/JKRExpHeap/do_resize__10JKRExpHeapFPvUl.s"
}
#pragma pop

/* 802CFB24 0080 .text      do_getSize__10JKRExpHeapFPv                                  */
// JKRExpHeap::do_getSize(void*)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void do_getSize__10JKRExpHeapFPv() {
	nofralloc
#include "_include/JKernel/JKRExpHeap/do_getSize__10JKRExpHeapFPv.s"
}
#pragma pop

/* 802CFBA4 006C .text      do_getFreeSize__10JKRExpHeapFv                               */
// JKRExpHeap::do_getFreeSize(void)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void do_getFreeSize__10JKRExpHeapFv() {
	nofralloc
#include "_include/JKernel/JKRExpHeap/do_getFreeSize__10JKRExpHeapFv.s"
}
#pragma pop

/* 802CFC10 0074 .text      do_getMaxFreeBlock__10JKRExpHeapFv                           */
// JKRExpHeap::do_getMaxFreeBlock(void)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void do_getMaxFreeBlock__10JKRExpHeapFv() {
	nofralloc
#include "_include/JKernel/JKRExpHeap/do_getMaxFreeBlock__10JKRExpHeapFv.s"
}
#pragma pop

/* 802CFC84 0064 .text      do_getTotalFreeSize__10JKRExpHeapFv                          */
// JKRExpHeap::do_getTotalFreeSize(void)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void do_getTotalFreeSize__10JKRExpHeapFv() {
	nofralloc
#include "_include/JKernel/JKRExpHeap/do_getTotalFreeSize__10JKRExpHeapFv.s"
}
#pragma pop

/* 802CFCE8 007C .text      getUsedSize__10JKRExpHeapCFUc                                */
// JKRExpHeap::getUsedSize(u8) const
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void getUsedSize__10JKRExpHeapCFUc() {
	nofralloc
#include "_include/JKernel/JKRExpHeap/getUsedSize__10JKRExpHeapCFUc.s"
}
#pragma pop

/* 802CFD64 0068 .text      getTotalUsedSize__10JKRExpHeapCFv                            */
// JKRExpHeap::getTotalUsedSize(void) const
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void getTotalUsedSize__10JKRExpHeapCFv() {
	nofralloc
#include "_include/JKernel/JKRExpHeap/getTotalUsedSize__10JKRExpHeapCFv.s"
}
#pragma pop

/* 802CFDCC 009C .text      appendUsedList__10JKRExpHeapFPQ210JKRExpHeap9CMemBlock       */
// JKRExpHeap::appendUsedList(JKRExpHeap::CMemBlock)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void appendUsedList__10JKRExpHeapFPQ210JKRExpHeap9CMemBlock() {
	nofralloc
#include "_include/JKernel/JKRExpHeap/appendUsedList__10JKRExpHeapFPQ210JKRExpHeap9CMemBlock.s"
}
#pragma pop

/* 802CFE68 004C .text      setFreeBlock__10JKRExpHeapFPQ210JKRExpHeap9CMemBlockPQ210JKRExpHeap9CMemBlockPQ210JKRExpHeap9CMemBlock */
// JKRExpHeap::setFreeBlock(JKRExpHeap::CMemBlock, JKRExpHeap::CMemBlock, JKRExpHeap::CMemBlock)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void setFreeBlock__10JKRExpHeapFPQ210JKRExpHeap9CMemBlockPQ210JKRExpHeap9CMemBlockPQ210JKRExpHeap9CMemBlock() {
	nofralloc
#include "_include/JKernel/JKRExpHeap/setFreeBlock__10JKRExpHeapFPQ210JKRExpHeap9CMemBlockPQ210JKRExpHeap9CMemBlockPQ210JKRExpHeap9CMemBlock.s"
}
#pragma pop

/* 802CFEB4 0034 .text      removeFreeBlock__10JKRExpHeapFPQ210JKRExpHeap9CMemBlock      */
// JKRExpHeap::removeFreeBlock(JKRExpHeap::CMemBlock)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void removeFreeBlock__10JKRExpHeapFPQ210JKRExpHeap9CMemBlock() {
	nofralloc
#include "_include/JKernel/JKRExpHeap/removeFreeBlock__10JKRExpHeapFPQ210JKRExpHeap9CMemBlock.s"
}
#pragma pop

/* 802CFEE8 0034 .text      removeUsedBlock__10JKRExpHeapFPQ210JKRExpHeap9CMemBlock      */
// JKRExpHeap::removeUsedBlock(JKRExpHeap::CMemBlock)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void removeUsedBlock__10JKRExpHeapFPQ210JKRExpHeap9CMemBlock() {
	nofralloc
#include "_include/JKernel/JKRExpHeap/removeUsedBlock__10JKRExpHeapFPQ210JKRExpHeap9CMemBlock.s"
}
#pragma pop

/* 802CFF1C 0198 .text      recycleFreeBlock__10JKRExpHeapFPQ210JKRExpHeap9CMemBlock     */
// JKRExpHeap::recycleFreeBlock(JKRExpHeap::CMemBlock)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void recycleFreeBlock__10JKRExpHeapFPQ210JKRExpHeap9CMemBlock() {
	nofralloc
#include "_include/JKernel/JKRExpHeap/recycleFreeBlock__10JKRExpHeapFPQ210JKRExpHeap9CMemBlock.s"
}
#pragma pop

/* 802D00B4 00DC .text      joinTwoBlocks__10JKRExpHeapFPQ210JKRExpHeap9CMemBlock        */
// JKRExpHeap::joinTwoBlocks(JKRExpHeap::CMemBlock)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void joinTwoBlocks__10JKRExpHeapFPQ210JKRExpHeap9CMemBlock() {
	nofralloc
#include "_include/JKernel/JKRExpHeap/joinTwoBlocks__10JKRExpHeapFPQ210JKRExpHeap9CMemBlock.s"
}
#pragma pop

/* 802D0190 0228 .text      check__10JKRExpHeapFv                                        */
// JKRExpHeap::check(void)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void check__10JKRExpHeapFv() {
	nofralloc
#include "_include/JKernel/JKRExpHeap/check__10JKRExpHeapFv.s"
}
#pragma pop

/* 802D03B8 0214 .text      dump__10JKRExpHeapFv                                         */
// JKRExpHeap::dump(void)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dump__10JKRExpHeapFv() {
	nofralloc
#include "_include/JKernel/JKRExpHeap/dump__10JKRExpHeapFv.s"
}
#pragma pop

/* 802D05CC 0244 .text      dump_sort__10JKRExpHeapFv                                    */
// JKRExpHeap::dump_sort(void)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dump_sort__10JKRExpHeapFv() {
	nofralloc
#include "_include/JKernel/JKRExpHeap/dump_sort__10JKRExpHeapFv.s"
}
#pragma pop

/* 802D0810 0020 .text      initiate__Q210JKRExpHeap9CMemBlockFPQ210JKRExpHeap9CMemBlockPQ210JKRExpHeap9CMemBlockUlUcUc */
// JKRExpHeap::CMemBlock::initiate(JKRExpHeap::CMemBlock, JKRExpHeap::CMemBlock, u32, u8, u8)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void initiate__Q210JKRExpHeap9CMemBlockFPQ210JKRExpHeap9CMemBlockPQ210JKRExpHeap9CMemBlockUlUcUc() {
	nofralloc
#include "_include/JKernel/JKRExpHeap/initiate__Q210JKRExpHeap9CMemBlockFPQ210JKRExpHeap9CMemBlockPQ210JKRExpHeap9CMemBlockUlUcUc.s"
}
#pragma pop

/* 802D0830 0044 .text      allocFore__Q210JKRExpHeap9CMemBlockFUlUcUcUcUc               */
// JKRExpHeap::CMemBlock::allocFore(u32, u8, u8, u8, u8)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void allocFore__Q210JKRExpHeap9CMemBlockFUlUcUcUcUc() {
	nofralloc
#include "_include/JKernel/JKRExpHeap/allocFore__Q210JKRExpHeap9CMemBlockFUlUcUcUcUc.s"
}
#pragma pop

/* 802D0874 0058 .text      allocBack__Q210JKRExpHeap9CMemBlockFUlUcUcUcUc               */
// JKRExpHeap::CMemBlock::allocBack(u32, u8, u8, u8, u8)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void allocBack__Q210JKRExpHeap9CMemBlockFUlUcUcUcUc() {
	nofralloc
#include "_include/JKernel/JKRExpHeap/allocBack__Q210JKRExpHeap9CMemBlockFUlUcUcUcUc.s"
}
#pragma pop

/* 802D08CC 0050 .text      free__Q210JKRExpHeap9CMemBlockFP10JKRExpHeap                 */
// JKRExpHeap::CMemBlock::free(JKRExpHeap*)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void free__Q210JKRExpHeap9CMemBlockFP10JKRExpHeap() {
	nofralloc
#include "_include/JKernel/JKRExpHeap/free__Q210JKRExpHeap9CMemBlockFP10JKRExpHeap.s"
}
#pragma pop

/* 802D091C 001C .text      getHeapBlock__Q210JKRExpHeap9CMemBlockFPv                    */
// JKRExpHeap::CMemBlock::getHeapBlock(void*)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void getHeapBlock__Q210JKRExpHeap9CMemBlockFPv() {
	nofralloc
#include "_include/JKernel/JKRExpHeap/getHeapBlock__Q210JKRExpHeap9CMemBlockFPv.s"
}
#pragma pop

/* 802D0938 00A8 .text      state_register__10JKRExpHeapCFPQ27JKRHeap6TStateUl           */
// JKRExpHeap::state_register(JKRHeap::TState, u32) const
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void state_register__10JKRExpHeapCFPQ27JKRHeap6TStateUl() {
	nofralloc
#include "_include/JKernel/JKRExpHeap/state_register__10JKRExpHeapCFPQ27JKRHeap6TStateUl.s"
}
#pragma pop

/* 802D09E0 0030 .text      state_compare__10JKRExpHeapCFRCQ27JKRHeap6TStateRCQ27JKRHeap6TState */
// JKRExpHeap::state_compare(JKRHeap::TState, JKRHeap::TState) const
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void state_compare__10JKRExpHeapCFRCQ27JKRHeap6TStateRCQ27JKRHeap6TState() {
	nofralloc
#include "_include/JKernel/JKRExpHeap/state_compare__10JKRExpHeapCFRCQ27JKRHeap6TStateRCQ27JKRHeap6TState.s"
}
#pragma pop

/* 802D0A10 000C .text      getHeapType__10JKRExpHeapFv                                  */
// JKRExpHeap::getHeapType(void)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void getHeapType__10JKRExpHeapFv() {
	nofralloc
#include "_include/JKernel/JKRExpHeap/getHeapType__10JKRExpHeapFv.s"
}
#pragma pop

/* 802D0A1C 0008 .text      do_getCurrentGroupId__10JKRExpHeapFv                         */
// JKRExpHeap::do_getCurrentGroupId(void)
u8 do_getCurrentGroupId__10JKRExpHeapFv(u8* param0) {
	return *(u8*)&param0[109]; /* param0->field_0x6d */
}

}

