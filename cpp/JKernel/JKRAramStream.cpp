// 
// Generated By: dol2asm
// 

// 
// Compiler Options: -str pool,readonly,reuse
// 

#include "dolphin/types.h"

// 
// Additional Symbols:
// 

struct JKRHeap;

extern void* operator new(u32, JKRHeap*, int); /* __nw__FUlP7JKRHeapi */
extern void operator delete(void*); /* __dl__FPv */

extern "C" {
extern void alloc__7JKRHeapFUliP7JKRHeap();
extern void alloc__7JKRHeapFUli();
extern void free__7JKRHeapFPvP7JKRHeap();
extern void __nw__FUlP7JKRHeapi();
extern void __dl__FPv();
extern void __ct__9JKRThreadFUlii();
extern void __dt__9JKRThreadFv();
extern void orderSync__12JKRAramPieceFiUlUlUlP12JKRAramBlock();
extern void __ct__13JKRAramStreamFl();
extern void __dt__13JKRAramStreamFv();
extern void run__13JKRAramStreamFv();
extern int readFromAram__13JKRAramStreamFv();
extern void writeToAram__13JKRAramStreamFP20JKRAramStreamCommand();
extern void setTransBuffer__13JKRAramStreamFPUcUlP7JKRHeap();
extern void __ct__20JKRAramStreamCommandFv();
extern void read__14JSUInputStreamFPvl();
extern void seek__20JSURandomInputStreamFl17JSUStreamSeekFrom();
extern void panic_f__12JUTExceptionFPCciPCce();
extern void OSInitMessageQueue();
extern void OSSendMessage();
extern void OSReceiveMessage();
extern void OSResumeThread();
extern void _savegpr_24();
extern void _savegpr_26();
extern void _restgpr_24();
extern void _restgpr_26();
SECTION_RODATA extern const u8 JKRAramStream__stringBase0[48];
SECTION_DATA extern u8 sMessageBuffer__13JKRAramStream[16];
SECTION_DATA extern u8 sMessageQueue__13JKRAramStream[32];
SECTION_DATA extern const void* __vt__13JKRAramStream[4];
SECTION_SBSS extern u8 sSystemHeap__7JKRHeap[4];
SECTION_SBSS extern u8 sCurrentHeap__7JKRHeap[4];
SECTION_SBSS extern u8 sAramStreamObject__13JKRAramStream[4];
SECTION_SBSS extern u8 transBuffer__13JKRAramStream[4];
SECTION_SBSS extern u8 transSize__13JKRAramStream[4];
SECTION_SBSS extern u8 transHeap__13JKRAramStream[4];
}


/* ###################################################################################### */
/*                                        .rodata                                         */
/* ###################################################################################### */

extern "C" {
/* 8039D120 002D .rodata    @stringBase0                                                 */
const char* const stringBase_8039D120 = "JKRAramStream.cpp";
const char* const stringBase_8039D132 = "%s";
const char* const stringBase_8039D135 = ":::Cannot alloc memory\n";
}


/* ###################################################################################### */
/*                                         .data                                          */
/* ###################################################################################### */

extern "C" {
/* 803CC188 0010 .data      sMessageBuffer__13JKRAramStream                              */
SECTION_DATA u8 sMessageBuffer__13JKRAramStream[16] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
/* 803CC198 0020 .data      sMessageQueue__13JKRAramStream                               */
SECTION_DATA u8 sMessageQueue__13JKRAramStream[32] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
/* 803CC1B8 0010 .data      __vt__13JKRAramStream                                        */
SECTION_DATA const  void* __vt__13JKRAramStream[4] = {
	NULL, /* RTTI */
	NULL,
	(void*)__dt__13JKRAramStreamFv,
	(void*)run__13JKRAramStreamFv,
};
}


/* ###################################################################################### */
/*                                         .sbss                                          */
/* ###################################################################################### */

extern "C" {
/* 80451408 0004 .sbss      sAramStreamObject__13JKRAramStream                           */
SECTION_SBSS u8 sAramStreamObject__13JKRAramStream[4];
/* 8045140C 0004 .sbss      transBuffer__13JKRAramStream                                 */
SECTION_SBSS u8 transBuffer__13JKRAramStream[4];
/* 80451410 0004 .sbss      transSize__13JKRAramStream                                   */
SECTION_SBSS u8 transSize__13JKRAramStream[4];
/* 80451414 0004 .sbss      transHeap__13JKRAramStream                                   */
SECTION_SBSS u8 transHeap__13JKRAramStream[4];
}


/* ###################################################################################### */
/*                                         .text                                          */
/* ###################################################################################### */

extern "C" {
/* 802D3B48 0070 .text      create__13JKRAramStreamFl                                    */
// JKRAramStream::create(s32)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void create__13JKRAramStreamFl() {
	nofralloc
#include "_include/JKernel/JKRAramStream/create__13JKRAramStreamFl.s"
}
#pragma pop

/* 802D3BB8 0050 .text      __ct__13JKRAramStreamFl                                      */
// JKRAramStream::JKRAramStream(s32)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void __ct__13JKRAramStreamFl() {
	nofralloc
#include "_include/JKernel/JKRAramStream/__ct__13JKRAramStreamFl.s"
}
#pragma pop

/* 802D3C08 0060 .text      __dt__13JKRAramStreamFv                                      */
// JKRAramStream::~JKRAramStream(void)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void __dt__13JKRAramStreamFv() {
	nofralloc
#include "_include/JKernel/JKRAramStream/__dt__13JKRAramStreamFv.s"
}
#pragma pop

/* 802D3C68 0070 .text      run__13JKRAramStreamFv                                       */
// JKRAramStream::run(void)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void run__13JKRAramStreamFv() {
	nofralloc
#include "_include/JKernel/JKRAramStream/run__13JKRAramStreamFv.s"
}
#pragma pop

/* 802D3CD8 0008 .text      readFromAram__13JKRAramStreamFv                              */
// JKRAramStream::readFromAram(void)
int readFromAram__13JKRAramStreamFv() {
	return 1;
}

/* 802D3CE0 01F0 .text      writeToAram__13JKRAramStreamFP20JKRAramStreamCommand         */
// JKRAramStream::writeToAram(JKRAramStreamCommand*)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void writeToAram__13JKRAramStreamFP20JKRAramStreamCommand() {
	nofralloc
#include "_include/JKernel/JKRAramStream/writeToAram__13JKRAramStreamFP20JKRAramStreamCommand.s"
}
#pragma pop

/* 802D3ED0 00D0 .text      write_StreamToAram_Async__13JKRAramStreamFP18JSUFileInputStreamUlUlUlPUl */
// JKRAramStream::write_StreamToAram_Async(JSUFileInputStream*, u32, u32, u32, u32*)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void write_StreamToAram_Async__13JKRAramStreamFP18JSUFileInputStreamUlUlUlPUl() {
	nofralloc
#include "_include/JKernel/JKRAramStream/write_StreamToAram_Async__13JKRAramStreamFP18JSUFileInputStreamUlUlUlPUl.s"
}
#pragma pop

/* 802D3FA0 0094 .text      sync__13JKRAramStreamFP20JKRAramStreamCommandi               */
// JKRAramStream::sync(JKRAramStreamCommand*, int)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void sync__13JKRAramStreamFP20JKRAramStreamCommandi() {
	nofralloc
#include "_include/JKernel/JKRAramStream/sync__13JKRAramStreamFP20JKRAramStreamCommandi.s"
}
#pragma pop

/* 802D4034 0054 .text      setTransBuffer__13JKRAramStreamFPUcUlP7JKRHeap               */
// JKRAramStream::setTransBuffer(u8*, u32, JKRHeap*)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void setTransBuffer__13JKRAramStreamFPUcUlP7JKRHeap() {
	nofralloc
#include "_include/JKernel/JKRAramStream/setTransBuffer__13JKRAramStreamFPUcUlP7JKRHeap.s"
}
#pragma pop

/* 802D4088 000C .text      __ct__20JKRAramStreamCommandFv                               */
// JKRAramStreamCommand::JKRAramStreamCommand(void)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void __ct__20JKRAramStreamCommandFv() {
	nofralloc
#include "_include/JKernel/JKRAramStream/__ct__20JKRAramStreamCommandFv.s"
}
#pragma pop

/* 802D4094 005C .text      getAvailable__20JSURandomInputStreamCFv                      */
// JSURandomInputStream::getAvailable(void) const
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void getAvailable__20JSURandomInputStreamCFv() {
	nofralloc
#include "_include/JKernel/JKRAramStream/getAvailable__20JSURandomInputStreamCFv.s"
}
#pragma pop

}

