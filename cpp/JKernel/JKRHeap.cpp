// 
// Generated By: dol2asm
// 

// 
// Compiler Options: -str pool,readonly,reuse
// 

#include "dolphin/types.h"

// 
// Additional Symbols:
// 

struct JKRHeap;

extern void JKRDefaultMemoryErrorRoutine(void*, u32, int); /* JKRDefaultMemoryErrorRoutine__FPvUli */
extern void operator delete(void*); /* __dl__FPv */

extern "C" {
extern int dump_sort__7JKRHeapFv();
extern void __dt__7JKRHeapFv();
extern void becomeSystemHeap__7JKRHeapFv();
extern void becomeCurrentHeap__7JKRHeapFv();
extern void alloc__7JKRHeapFUliP7JKRHeap();
extern void alloc__7JKRHeapFUli();
extern void free__7JKRHeapFPvP7JKRHeap();
extern void free__7JKRHeapFPv();
extern void callAllDisposer__7JKRHeapFv();
extern void resize__7JKRHeapFPvUl();
extern void getSize__7JKRHeapFPv();
extern void getFreeSize__7JKRHeapFv();
extern void getMaxFreeBlock__7JKRHeapFv();
extern void findFromRoot__7JKRHeapFPv();
extern void find__7JKRHeapCFPv();
extern void findAllHeap__7JKRHeapCFPv();
extern void dispose_subroutine__7JKRHeapFUlUl();
extern void JKRDefaultMemoryErrorRoutine__FPvUli();
extern void isSubHeap__7JKRHeapCFP7JKRHeap();
extern void __dl__FPv();
extern void state_register__7JKRHeapCFPQ27JKRHeap6TStateUl();
extern void state_compare__7JKRHeapCFRCQ27JKRHeap6TStateRCQ27JKRHeap6TState();
extern void state_dump__7JKRHeapCFRCQ27JKRHeap6TState();
extern int do_changeGroupID__7JKRHeapFUc();
extern int do_getCurrentGroupId__7JKRHeapFv();
extern void __ct__11JKRDisposerFv();
extern void __dt__11JKRDisposerFv();
extern void __ct__10JSUPtrLinkFPv();
extern void __dt__10JSUPtrLinkFv();
extern void __dt__10JSUPtrListFv();
extern void initiate__10JSUPtrListFv();
extern void append__10JSUPtrListFP10JSUPtrLink();
extern void remove__10JSUPtrListFP10JSUPtrLink();
extern void panic_f__12JUTExceptionFPCciPCce();
extern void OSInitAlloc();
extern u32 OSGetArenaHi();
extern u32 OSGetArenaLo();
extern void OSSetArenaHi();
extern void OSSetArenaLo();
extern void OSInitMutex();
extern void _savegpr_26();
extern void _savegpr_27();
extern void _savegpr_28();
extern void _savegpr_29();
extern void _restgpr_26();
extern void _restgpr_27();
extern void _restgpr_28();
extern void _restgpr_29();
SECTION_RODATA extern const u8 JKRHeap__stringBase0[24];
SECTION_DATA extern const void* __vt__7JKRHeap[24];
SECTION_SDATA extern u8 data_804508B0[8];
SECTION_SBSS extern u8 sSystemHeap__7JKRHeap[4];
SECTION_SBSS extern u8 sCurrentHeap__7JKRHeap[4];
SECTION_SBSS extern u8 sRootHeap__7JKRHeap[4];
SECTION_SBSS extern u8 mErrorHandler__7JKRHeap[4];
SECTION_SBSS extern u8 data_80451380[4];
SECTION_SBSS extern u8 mCodeStart__7JKRHeap[4];
SECTION_SBSS extern u8 mCodeEnd__7JKRHeap[4];
SECTION_SBSS extern u8 mUserRamStart__7JKRHeap[4];
SECTION_SBSS extern u8 mUserRamEnd__7JKRHeap[4];
SECTION_SBSS extern u8 mMemorySize__7JKRHeap[4];
}


/* ###################################################################################### */
/*                                        .rodata                                         */
/* ###################################################################################### */

extern "C" {
/* 8039CAD8 0016 .rodata    @stringBase0                                                 */
const char* const stringBase_8039CAD8 = "JKRHeap.cpp";
const char* const stringBase_8039CAE4 = "%s";
const char* const stringBase_8039CAE7 = "abort\n";
}


/* ###################################################################################### */
/*                                         .data                                          */
/* ###################################################################################### */

extern "C" {
/* 803CBF70 0060 .data      __vt__7JKRHeap                                               */
SECTION_DATA const  void* __vt__7JKRHeap[24] = {
	NULL, /* RTTI */
	NULL,
	(void*)__dt__7JKRHeapFv,
	(void*)callAllDisposer__7JKRHeapFv,
	NULL,
	NULL,
	(void*)dump_sort__7JKRHeapFv,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	(void*)do_changeGroupID__7JKRHeapFUc,
	(void*)do_getCurrentGroupId__7JKRHeapFv,
	(void*)state_register__7JKRHeapCFPQ27JKRHeap6TStateUl,
	(void*)state_compare__7JKRHeapCFRCQ27JKRHeap6TStateRCQ27JKRHeap6TState,
	(void*)state_dump__7JKRHeapCFRCQ27JKRHeap6TState,
};
}


/* ###################################################################################### */
/*                                         .sbss                                          */
/* ###################################################################################### */

extern "C" {
/* 80451370 0004 .sbss      sSystemHeap__7JKRHeap                                        */
SECTION_SBSS u8 sSystemHeap__7JKRHeap[4];
/* 80451374 0004 .sbss      sCurrentHeap__7JKRHeap                                       */
SECTION_SBSS u8 sCurrentHeap__7JKRHeap[4];
/* 80451378 0004 .sbss      sRootHeap__7JKRHeap                                          */
SECTION_SBSS u8 sRootHeap__7JKRHeap[4];
/* 8045137C 0004 .sbss      mErrorHandler__7JKRHeap                                      */
SECTION_SBSS u8 mErrorHandler__7JKRHeap[4];
/* 80451380 0004 .sbss      data_80451380                                                */
SECTION_SBSS u8 data_80451380[4];
/* 80451384 0004 .sbss      mCodeStart__7JKRHeap                                         */
SECTION_SBSS u8 mCodeStart__7JKRHeap[4];
/* 80451388 0004 .sbss      mCodeEnd__7JKRHeap                                           */
SECTION_SBSS u8 mCodeEnd__7JKRHeap[4];
/* 8045138C 0004 .sbss      mUserRamStart__7JKRHeap                                      */
SECTION_SBSS u8 mUserRamStart__7JKRHeap[4];
/* 80451390 0004 .sbss      mUserRamEnd__7JKRHeap                                        */
SECTION_SBSS u8 mUserRamEnd__7JKRHeap[4];
/* 80451394 0004 .sbss      mMemorySize__7JKRHeap                                        */
SECTION_SBSS u8 mMemorySize__7JKRHeap[4];
}


/* ###################################################################################### */
/*                                         .text                                          */
/* ###################################################################################### */

extern "C" {
/* 802CE138 012C .text      __ct__7JKRHeapFPvUlP7JKRHeapb                                */
// JKRHeap::JKRHeap(void*, u32, JKRHeap*, bool)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void __ct__7JKRHeapFPvUlP7JKRHeapb() {
	nofralloc
#include "_include/JKernel/JKRHeap/__ct__7JKRHeapFPvUlP7JKRHeapb.s"
}
#pragma pop

/* 802CE264 0114 .text      __dt__7JKRHeapFv                                             */
// JKRHeap::~JKRHeap(void)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void __dt__7JKRHeapFv() {
	nofralloc
#include "_include/JKernel/JKRHeap/__dt__7JKRHeapFv.s"
}
#pragma pop

/* 802CE378 00B0 .text      initArena__7JKRHeapFPPcPUli                                  */
// JKRHeap::initArena(s8**, u32*, int)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void initArena__7JKRHeapFPPcPUli() {
	nofralloc
#include "_include/JKernel/JKRHeap/initArena__7JKRHeapFPPcPUli.s"
}
#pragma pop

/* 802CE428 0010 .text      becomeSystemHeap__7JKRHeapFv                                 */
// JKRHeap::becomeSystemHeap(void)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void becomeSystemHeap__7JKRHeapFv() {
	nofralloc
#include "_include/JKernel/JKRHeap/becomeSystemHeap__7JKRHeapFv.s"
}
#pragma pop

/* 802CE438 0010 .text      becomeCurrentHeap__7JKRHeapFv                                */
// JKRHeap::becomeCurrentHeap(void)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void becomeCurrentHeap__7JKRHeapFv() {
	nofralloc
#include "_include/JKernel/JKRHeap/becomeCurrentHeap__7JKRHeapFv.s"
}
#pragma pop

/* 802CE448 002C .text      destroy__7JKRHeapFv                                          */
// JKRHeap::destroy(void)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void destroy__7JKRHeapFv() {
	nofralloc
#include "_include/JKernel/JKRHeap/destroy__7JKRHeapFv.s"
}
#pragma pop

/* 802CE474 0060 .text      alloc__7JKRHeapFUliP7JKRHeap                                 */
// JKRHeap::alloc(u32, int, JKRHeap*)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void alloc__7JKRHeapFUliP7JKRHeap() {
	nofralloc
#include "_include/JKernel/JKRHeap/alloc__7JKRHeapFUliP7JKRHeap.s"
}
#pragma pop

/* 802CE4D4 002C .text      alloc__7JKRHeapFUli                                          */
// JKRHeap::alloc(u32, int)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void alloc__7JKRHeapFUli() {
	nofralloc
#include "_include/JKernel/JKRHeap/alloc__7JKRHeapFUli.s"
}
#pragma pop

/* 802CE500 0048 .text      free__7JKRHeapFPvP7JKRHeap                                   */
// JKRHeap::free(void*, JKRHeap*)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void free__7JKRHeapFPvP7JKRHeap() {
	nofralloc
#include "_include/JKernel/JKRHeap/free__7JKRHeapFPvP7JKRHeap.s"
}
#pragma pop

/* 802CE548 002C .text      free__7JKRHeapFPv                                            */
// JKRHeap::free(void*)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void free__7JKRHeapFPv() {
	nofralloc
#include "_include/JKernel/JKRHeap/free__7JKRHeapFPv.s"
}
#pragma pop

/* 802CE574 0058 .text      callAllDisposer__7JKRHeapFv                                  */
// JKRHeap::callAllDisposer(void)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void callAllDisposer__7JKRHeapFv() {
	nofralloc
#include "_include/JKernel/JKRHeap/callAllDisposer__7JKRHeapFv.s"
}
#pragma pop

/* 802CE5CC 002C .text      freeAll__7JKRHeapFv                                          */
// JKRHeap::freeAll(void)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void freeAll__7JKRHeapFv() {
	nofralloc
#include "_include/JKernel/JKRHeap/freeAll__7JKRHeapFv.s"
}
#pragma pop

/* 802CE5F8 002C .text      freeTail__7JKRHeapFv                                         */
// JKRHeap::freeTail(void)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void freeTail__7JKRHeapFv() {
	nofralloc
#include "_include/JKernel/JKRHeap/freeTail__7JKRHeapFv.s"
}
#pragma pop

/* 802CE624 0060 .text      resize__7JKRHeapFPvUlP7JKRHeap                               */
// JKRHeap::resize(void*, u32, JKRHeap*)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void resize__7JKRHeapFPvUlP7JKRHeap() {
	nofralloc
#include "_include/JKernel/JKRHeap/resize__7JKRHeapFPvUlP7JKRHeap.s"
}
#pragma pop

/* 802CE684 002C .text      resize__7JKRHeapFPvUl                                        */
// JKRHeap::resize(void*, u32)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void resize__7JKRHeapFPvUl() {
	nofralloc
#include "_include/JKernel/JKRHeap/resize__7JKRHeapFPvUl.s"
}
#pragma pop

/* 802CE6B0 0050 .text      getSize__7JKRHeapFPvP7JKRHeap                                */
// JKRHeap::getSize(void*, JKRHeap*)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void getSize__7JKRHeapFPvP7JKRHeap() {
	nofralloc
#include "_include/JKernel/JKRHeap/getSize__7JKRHeapFPvP7JKRHeap.s"
}
#pragma pop

/* 802CE700 002C .text      getSize__7JKRHeapFPv                                         */
// JKRHeap::getSize(void*)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void getSize__7JKRHeapFPv() {
	nofralloc
#include "_include/JKernel/JKRHeap/getSize__7JKRHeapFPv.s"
}
#pragma pop

/* 802CE72C 002C .text      getFreeSize__7JKRHeapFv                                      */
// JKRHeap::getFreeSize(void)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void getFreeSize__7JKRHeapFv() {
	nofralloc
#include "_include/JKernel/JKRHeap/getFreeSize__7JKRHeapFv.s"
}
#pragma pop

/* 802CE758 002C .text      getMaxFreeBlock__7JKRHeapFv                                  */
// JKRHeap::getMaxFreeBlock(void)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void getMaxFreeBlock__7JKRHeapFv() {
	nofralloc
#include "_include/JKernel/JKRHeap/getMaxFreeBlock__7JKRHeapFv.s"
}
#pragma pop

/* 802CE784 002C .text      getTotalFreeSize__7JKRHeapFv                                 */
// JKRHeap::getTotalFreeSize(void)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void getTotalFreeSize__7JKRHeapFv() {
	nofralloc
#include "_include/JKernel/JKRHeap/getTotalFreeSize__7JKRHeapFv.s"
}
#pragma pop

/* 802CE7B0 002C .text      changeGroupID__7JKRHeapFUc                                   */
// JKRHeap::changeGroupID(u8)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void changeGroupID__7JKRHeapFUc() {
	nofralloc
#include "_include/JKernel/JKRHeap/changeGroupID__7JKRHeapFUc.s"
}
#pragma pop

/* 802CE7DC 0060 .text      getMaxAllocatableSize__7JKRHeapFi                            */
// JKRHeap::getMaxAllocatableSize(int)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void getMaxAllocatableSize__7JKRHeapFi() {
	nofralloc
#include "_include/JKernel/JKRHeap/getMaxAllocatableSize__7JKRHeapFi.s"
}
#pragma pop

/* 802CE83C 0058 .text      findFromRoot__7JKRHeapFPv                                    */
// JKRHeap::findFromRoot(void*)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void findFromRoot__7JKRHeapFPv() {
	nofralloc
#include "_include/JKernel/JKRHeap/findFromRoot__7JKRHeapFPv.s"
}
#pragma pop

/* 802CE894 00A8 .text      find__7JKRHeapCFPv                                           */
// JKRHeap::find(void*) const
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void find__7JKRHeapCFPv() {
	nofralloc
#include "_include/JKernel/JKRHeap/find__7JKRHeapCFPv.s"
}
#pragma pop

/* 802CE93C 00A8 .text      findAllHeap__7JKRHeapCFPv                                    */
// JKRHeap::findAllHeap(void*) const
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void findAllHeap__7JKRHeapCFPv() {
	nofralloc
#include "_include/JKernel/JKRHeap/findAllHeap__7JKRHeapCFPv.s"
}
#pragma pop

/* 802CE9E4 0094 .text      dispose_subroutine__7JKRHeapFUlUl                            */
// JKRHeap::dispose_subroutine(u32, u32)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dispose_subroutine__7JKRHeapFUlUl() {
	nofralloc
#include "_include/JKernel/JKRHeap/dispose_subroutine__7JKRHeapFUlUl.s"
}
#pragma pop

/* 802CEA78 0028 .text      dispose__7JKRHeapFPvUl                                       */
// JKRHeap::dispose(void*, u32)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dispose__7JKRHeapFPvUl() {
	nofralloc
#include "_include/JKernel/JKRHeap/dispose__7JKRHeapFPvUl.s"
}
#pragma pop

/* 802CEAA0 0020 .text      dispose__7JKRHeapFPvPv                                       */
// JKRHeap::dispose(void*, void*)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dispose__7JKRHeapFPvPv() {
	nofralloc
#include "_include/JKernel/JKRHeap/dispose__7JKRHeapFPvPv.s"
}
#pragma pop

/* 802CEAC0 0058 .text      dispose__7JKRHeapFv                                          */
// JKRHeap::dispose(void)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dispose__7JKRHeapFv() {
	nofralloc
#include "_include/JKernel/JKRHeap/dispose__7JKRHeapFv.s"
}
#pragma pop

/* 802CEB18 0028 .text      copyMemory__7JKRHeapFPvPvUl                                  */
// JKRHeap::copyMemory(void*, void*, u32)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void copyMemory__7JKRHeapFPvPvUl() {
	nofralloc
#include "_include/JKernel/JKRHeap/copyMemory__7JKRHeapFPvPvUl.s"
}
#pragma pop

/* 802CEB40 0038 .text      JKRDefaultMemoryErrorRoutine__FPvUli                         */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRDefaultMemoryErrorRoutine(void*, u32, int) {
	nofralloc
#include "_include/JKernel/JKRHeap/JKRDefaultMemoryErrorRoutine__FPvUli.s"
}
#pragma pop

extern "C" {
/* 802CEB78 0010 .text      setErrorFlag__7JKRHeapFb                                     */
// JKRHeap::setErrorFlag(bool)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void setErrorFlag__7JKRHeapFb() {
	nofralloc
#include "_include/JKernel/JKRHeap/setErrorFlag__7JKRHeapFb.s"
}
#pragma pop

/* 802CEB88 0020 .text      setErrorHandler__7JKRHeapFPFPvUli_v                          */
// JKRHeap::setErrorHandler(void (*)(void*, u32, int))
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void setErrorHandler__7JKRHeapFPFPvUli_v() {
	nofralloc
#include "_include/JKernel/JKRHeap/setErrorHandler__7JKRHeapFPFPvUli_v.s"
}
#pragma pop

/* 802CEBA8 00A4 .text      isSubHeap__7JKRHeapCFP7JKRHeap                               */
// JKRHeap::isSubHeap(JKRHeap*) const
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void isSubHeap__7JKRHeapCFP7JKRHeap() {
	nofralloc
#include "_include/JKernel/JKRHeap/isSubHeap__7JKRHeapCFP7JKRHeap.s"
}
#pragma pop

/* 802CEC4C 0028 .text      __nw__FUl                                                    */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void* operator new(u32) {
	nofralloc
#include "_include/JKernel/JKRHeap/__nw__FUl.s"
}
#pragma pop

extern "C" {
/* 802CEC74 0024 .text      __nw__FUli                                                   */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void* operator new(u32, int) {
	nofralloc
#include "_include/JKernel/JKRHeap/__nw__FUli.s"
}
#pragma pop

extern "C" {
/* 802CEC98 002C .text      __nw__FUlP7JKRHeapi                                          */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void* operator new(u32, JKRHeap*, int) {
	nofralloc
#include "_include/JKernel/JKRHeap/__nw__FUlP7JKRHeapi.s"
}
#pragma pop

extern "C" {
/* 802CECC4 0028 .text      __nwa__FUl                                                   */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void* operator new[](u32) {
	nofralloc
#include "_include/JKernel/JKRHeap/__nwa__FUl.s"
}
#pragma pop

extern "C" {
/* 802CECEC 0024 .text      __nwa__FUli                                                  */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void* operator new[](u32, int) {
	nofralloc
#include "_include/JKernel/JKRHeap/__nwa__FUli.s"
}
#pragma pop

extern "C" {
/* 802CED10 002C .text      __nwa__FUlP7JKRHeapi                                         */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void* operator new[](u32, JKRHeap*, int) {
	nofralloc
#include "_include/JKernel/JKRHeap/__nwa__FUlP7JKRHeapi.s"
}
#pragma pop

extern "C" {
/* 802CED3C 0024 .text      __dl__FPv                                                    */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void operator delete(void*) {
	nofralloc
#include "_include/JKernel/JKRHeap/__dl__FPv.s"
}
#pragma pop

extern "C" {
/* 802CED60 0024 .text      __dla__FPv                                                   */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void operator delete[](void*) {
	nofralloc
#include "_include/JKernel/JKRHeap/__dla__FPv.s"
}
#pragma pop

extern "C" {
/* 802CED84 0004 .text      state_register__7JKRHeapCFPQ27JKRHeap6TStateUl               */
// JKRHeap::state_register(JKRHeap::TState, u32) const
void state_register__7JKRHeapCFPQ27JKRHeap6TStateUl() {
	return;
}

/* 802CED88 0018 .text      state_compare__7JKRHeapCFRCQ27JKRHeap6TStateRCQ27JKRHeap6TState */
// JKRHeap::state_compare(JKRHeap::TState, JKRHeap::TState) const
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void state_compare__7JKRHeapCFRCQ27JKRHeap6TStateRCQ27JKRHeap6TState() {
	nofralloc
#include "_include/JKernel/JKRHeap/state_compare__7JKRHeapCFRCQ27JKRHeap6TStateRCQ27JKRHeap6TState.s"
}
#pragma pop

/* 802CEDA0 0004 .text      state_dump__7JKRHeapCFRCQ27JKRHeap6TState                    */
// JKRHeap::state_dump(JKRHeap::TState) const
void state_dump__7JKRHeapCFRCQ27JKRHeap6TState() {
	return;
}

/* 802CEDA4 0008 .text      do_changeGroupID__7JKRHeapFUc                                */
// JKRHeap::do_changeGroupID(u8)
int do_changeGroupID__7JKRHeapFUc() {
	return 0;
}

/* 802CEDAC 0008 .text      do_getCurrentGroupId__7JKRHeapFv                             */
// JKRHeap::do_getCurrentGroupId(void)
int do_getCurrentGroupId__7JKRHeapFv() {
	return 0;
}

}

