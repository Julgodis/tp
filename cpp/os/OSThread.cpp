// 
// Generated By: dol2asm
// 

#include "dolphin/types.h"

// 
// Additional Symbols:
// 

extern "C" {
extern void OSReport();
extern void OSPanic();
extern void OSSetCurrentContext();
extern void OSGetCurrentContext();
extern void OSSaveContext();
extern void OSLoadContext();
extern void OSGetStackPointer();
extern void OSClearContext();
extern void OSInitContext();
extern void OSDisableInterrupts();
extern void OSEnableInterrupts();
extern void OSRestoreInterrupts();
extern void __OSUnlockAllMutex();
extern void __OSCheckDeadLock();
extern void __OSCheckMutexes();
extern void DefaultSwitchThreadCallback();
extern void OSInitThreadQueue();
extern void UnsetRun();
extern void __OSGetEffectivePriority();
extern void SetEffectivePriority();
extern void SelectThread();
extern void OSExitThread();
extern void OSWakeupThread();
extern void CheckThreadQueue();
extern void OSClearStack();
SECTION_DATA extern u8 LIT_831[96];
SECTION_BSS extern u8 __OSErrorTable[80];
SECTION_BSS extern u8 RunQueue[256];
SECTION_SDATA extern u8 __OSFpscrEnableBits[4];
SECTION_SDATA extern u8 SwitchThreadCallback[4];
SECTION_SDATA extern u8 OSThread__LIT_833[4];
SECTION_SBSS extern u8 RunQueueBits[4];
SECTION_SBSS extern u8 RunQueueHint[4];
SECTION_SBSS extern u8 Reschedule[4];
}


/* ###################################################################################### */
/*                                         .data                                          */
/* ###################################################################################### */

extern "C" {
/* 803D0838 0000 .data      ...data.0                                                    */
/* 803D0838 005F .data      @831                                                         */
SECTION_DATA u8 LIT_831[96] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x52, 0x75, 0x6E,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x5B, 0x70, 0x72, 0x69, 0x6F, 0x5D, 0x2E, 0x68, 0x65, 0x61, 0x64,
	0x20, 0x21, 0x3D, 0x20, 0x4E, 0x55, 0x4C, 0x4C, 0x20, 0x26, 0x26, 0x20, 0x52, 0x75, 0x6E, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x5B, 0x70, 0x72, 0x69, 0x6F, 0x5D, 0x2E, 0x74, 0x61, 0x69, 0x6C, 0x20,
	0x21, 0x3D, 0x20, 0x4E, 0x55, 0x4C, 0x4C, 0x20, 0x69, 0x6E, 0x20, 0x25, 0x64, 0x0A, 0x00,
	/* padding */
	0x00,
};
/* 803D0898 000B .data      @832                                                         */
SECTION_DATA u8 OSThread__LIT_832[12] = {
	0x4F, 0x53, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x2E, 0x63, 0x00,
	/* padding */
	0x00,
};
/* 803D08A4 005F .data      @834                                                         */
SECTION_DATA u8 OSThread__LIT_834[96] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x52, 0x75, 0x6E,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x5B, 0x70, 0x72, 0x69, 0x6F, 0x5D, 0x2E, 0x68, 0x65, 0x61, 0x64,
	0x20, 0x3D, 0x3D, 0x20, 0x4E, 0x55, 0x4C, 0x4C, 0x20, 0x26, 0x26, 0x20, 0x52, 0x75, 0x6E, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x5B, 0x70, 0x72, 0x69, 0x6F, 0x5D, 0x2E, 0x74, 0x61, 0x69, 0x6C, 0x20,
	0x3D, 0x3D, 0x20, 0x4E, 0x55, 0x4C, 0x4C, 0x20, 0x69, 0x6E, 0x20, 0x25, 0x64, 0x0A, 0x00,
	/* padding */
	0x00,
};
/* 803D0904 0046 .data      @835                                                         */
SECTION_DATA u8 OSThread__LIT_835[72] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x43, 0x68, 0x65,
	0x63, 0x6B, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x28, 0x26, 0x52,
	0x75, 0x6E, 0x51, 0x75, 0x65, 0x75, 0x65, 0x5B, 0x70, 0x72, 0x69, 0x6F, 0x5D, 0x29, 0x20, 0x69,
	0x6E, 0x20, 0x25, 0x64, 0x0A, 0x00,
	/* padding */
	0x00, 0x00,
};
/* 803D094C 007E .data      @836                                                         */
SECTION_DATA u8 OSThread__LIT_836[128] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x5F, 0x5F, 0x4F,
	0x53, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x2E, 0x68, 0x65, 0x61, 0x64, 0x20, 0x3D, 0x3D, 0x20, 0x4E, 0x55, 0x4C, 0x4C, 0x20,
	0x7C, 0x7C, 0x20, 0x5F, 0x5F, 0x4F, 0x53, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2E, 0x68, 0x65, 0x61, 0x64, 0x2D, 0x3E, 0x6C,
	0x69, 0x6E, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2E, 0x70, 0x72, 0x65, 0x76, 0x20, 0x3D,
	0x3D, 0x20, 0x4E, 0x55, 0x4C, 0x4C, 0x20, 0x69, 0x6E, 0x20, 0x25, 0x64, 0x0A, 0x00,
	/* padding */
	0x00, 0x00,
};
/* 803D09CC 007E .data      @837                                                         */
SECTION_DATA u8 OSThread__LIT_837[128] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x5F, 0x5F, 0x4F,
	0x53, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x2E, 0x74, 0x61, 0x69, 0x6C, 0x20, 0x3D, 0x3D, 0x20, 0x4E, 0x55, 0x4C, 0x4C, 0x20,
	0x7C, 0x7C, 0x20, 0x5F, 0x5F, 0x4F, 0x53, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2E, 0x74, 0x61, 0x69, 0x6C, 0x2D, 0x3E, 0x6C,
	0x69, 0x6E, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2E, 0x6E, 0x65, 0x78, 0x74, 0x20, 0x3D,
	0x3D, 0x20, 0x4E, 0x55, 0x4C, 0x4C, 0x20, 0x69, 0x6E, 0x20, 0x25, 0x64, 0x0A, 0x00,
	/* padding */
	0x00, 0x00,
};
/* 803D0A4C 007A .data      @838                                                         */
SECTION_DATA u8 OSThread__LIT_838[124] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x2D, 0x3E, 0x6C, 0x69, 0x6E, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2E,
	0x6E, 0x65, 0x78, 0x74, 0x20, 0x3D, 0x3D, 0x20, 0x4E, 0x55, 0x4C, 0x4C, 0x20, 0x7C, 0x7C, 0x20,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x20, 0x3D, 0x3D, 0x20, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x2D, 0x3E, 0x6C, 0x69, 0x6E, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2E, 0x6E, 0x65, 0x78,
	0x74, 0x2D, 0x3E, 0x6C, 0x69, 0x6E, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2E, 0x70, 0x72,
	0x65, 0x76, 0x20, 0x69, 0x6E, 0x20, 0x25, 0x64, 0x0A, 0x00,
	/* padding */
	0x00, 0x00,
};
/* 803D0AC8 007A .data      @839                                                         */
SECTION_DATA u8 OSThread__LIT_839[124] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x2D, 0x3E, 0x6C, 0x69, 0x6E, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2E,
	0x70, 0x72, 0x65, 0x76, 0x20, 0x3D, 0x3D, 0x20, 0x4E, 0x55, 0x4C, 0x4C, 0x20, 0x7C, 0x7C, 0x20,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x20, 0x3D, 0x3D, 0x20, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x2D, 0x3E, 0x6C, 0x69, 0x6E, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2E, 0x70, 0x72, 0x65,
	0x76, 0x2D, 0x3E, 0x6C, 0x69, 0x6E, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2E, 0x6E, 0x65,
	0x78, 0x74, 0x20, 0x69, 0x6E, 0x20, 0x25, 0x64, 0x0A, 0x00,
	/* padding */
	0x00, 0x00,
};
/* 803D0B44 0051 .data      @840                                                         */
SECTION_DATA u8 OSThread__LIT_840[84] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x2A, 0x28, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x2D, 0x3E, 0x73, 0x74, 0x61, 0x63, 0x6B, 0x45, 0x6E, 0x64, 0x29,
	0x20, 0x3D, 0x3D, 0x20, 0x4F, 0x53, 0x5F, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x5F, 0x53, 0x54,
	0x41, 0x43, 0x4B, 0x5F, 0x4D, 0x41, 0x47, 0x49, 0x43, 0x20, 0x69, 0x6E, 0x20, 0x25, 0x64, 0x0A,
	0x00,
	/* padding */
	0x00, 0x00, 0x00,
};
/* 803D0B98 0071 .data      @841                                                         */
SECTION_DATA u8 OSThread__LIT_841[116] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x4F, 0x53, 0x5F,
	0x50, 0x52, 0x49, 0x4F, 0x52, 0x49, 0x54, 0x59, 0x5F, 0x4D, 0x49, 0x4E, 0x20, 0x3C, 0x3D, 0x20,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x2D, 0x3E, 0x70, 0x72, 0x69, 0x6F, 0x72, 0x69, 0x74, 0x79,
	0x20, 0x26, 0x26, 0x20, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x2D, 0x3E, 0x70, 0x72, 0x69, 0x6F,
	0x72, 0x69, 0x74, 0x79, 0x20, 0x3C, 0x3D, 0x20, 0x4F, 0x53, 0x5F, 0x50, 0x52, 0x49, 0x4F, 0x52,
	0x49, 0x54, 0x59, 0x5F, 0x4D, 0x41, 0x58, 0x2B, 0x31, 0x20, 0x69, 0x6E, 0x20, 0x25, 0x64, 0x0A,
	0x00,
	/* padding */
	0x00, 0x00, 0x00,
};
/* 803D0C0C 0039 .data      @842                                                         */
SECTION_DATA u8 OSThread__LIT_842[60] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x30, 0x20, 0x3C,
	0x3D, 0x20, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x2D, 0x3E, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6E,
	0x64, 0x20, 0x69, 0x6E, 0x20, 0x25, 0x64, 0x0A, 0x00,
	/* padding */
	0x00, 0x00, 0x00,
};
/* 803D0C48 0049 .data      @843                                                         */
SECTION_DATA u8 OSThread__LIT_843[76] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x43, 0x68, 0x65,
	0x63, 0x6B, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x28, 0x26, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x2D, 0x3E, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4A, 0x6F, 0x69, 0x6E,
	0x29, 0x20, 0x69, 0x6E, 0x20, 0x25, 0x64, 0x0A, 0x00,
	/* padding */
	0x00, 0x00, 0x00,
};
/* 803D0C94 0051 .data      @844                                                         */
SECTION_DATA u8 OSThread__LIT_844[84] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x2D, 0x3E, 0x71, 0x75, 0x65, 0x75, 0x65, 0x20, 0x3D, 0x3D, 0x20, 0x26, 0x52,
	0x75, 0x6E, 0x51, 0x75, 0x65, 0x75, 0x65, 0x5B, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x2D, 0x3E,
	0x70, 0x72, 0x69, 0x6F, 0x72, 0x69, 0x74, 0x79, 0x5D, 0x20, 0x69, 0x6E, 0x20, 0x25, 0x64, 0x0A,
	0x00,
	/* padding */
	0x00, 0x00, 0x00,
};
/* 803D0CE8 0052 .data      @845                                                         */
SECTION_DATA u8 OSThread__LIT_845[84] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x49, 0x73, 0x4D,
	0x65, 0x6D, 0x62, 0x65, 0x72, 0x28, 0x26, 0x52, 0x75, 0x6E, 0x51, 0x75, 0x65, 0x75, 0x65, 0x5B,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x2D, 0x3E, 0x70, 0x72, 0x69, 0x6F, 0x72, 0x69, 0x74, 0x79,
	0x5D, 0x2C, 0x20, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x29, 0x20, 0x69, 0x6E, 0x20, 0x25, 0x64,
	0x0A, 0x00,
	/* padding */
	0x00, 0x00,
};
/* 803D0D3C 0059 .data      @846                                                         */
SECTION_DATA u8 OSThread__LIT_846[92] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x2D, 0x3E, 0x70, 0x72, 0x69, 0x6F, 0x72, 0x69, 0x74, 0x79, 0x20, 0x3D, 0x3D,
	0x20, 0x5F, 0x5F, 0x4F, 0x53, 0x47, 0x65, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x50, 0x72, 0x69, 0x6F, 0x72, 0x69, 0x74, 0x79, 0x28, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x29, 0x20, 0x69, 0x6E, 0x20, 0x25, 0x64, 0x0A, 0x00,
	/* padding */
	0x00, 0x00, 0x00,
};
/* 803D0D98 0042 .data      @847                                                         */
SECTION_DATA u8 OSThread__LIT_847[68] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x21, 0x49, 0x73,
	0x53, 0x75, 0x73, 0x70, 0x65, 0x6E, 0x64, 0x65, 0x64, 0x28, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x2D, 0x3E, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6E, 0x64, 0x29, 0x20, 0x69, 0x6E, 0x20, 0x25, 0x64,
	0x0A, 0x00,
	/* padding */
	0x00, 0x00,
};
/* 803D0DDC 003A .data      @848                                                         */
SECTION_DATA u8 OSThread__LIT_848[60] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x2D, 0x3E, 0x71, 0x75, 0x65, 0x75, 0x65, 0x20, 0x3D, 0x3D, 0x20, 0x4E, 0x55,
	0x4C, 0x4C, 0x20, 0x69, 0x6E, 0x20, 0x25, 0x64, 0x0A, 0x00,
	/* padding */
	0x00, 0x00,
};
/* 803D0E18 003A .data      @849                                                         */
SECTION_DATA u8 OSThread__LIT_849[60] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x2D, 0x3E, 0x71, 0x75, 0x65, 0x75, 0x65, 0x20, 0x21, 0x3D, 0x20, 0x4E, 0x55,
	0x4C, 0x4C, 0x20, 0x69, 0x6E, 0x20, 0x25, 0x64, 0x0A, 0x00,
	/* padding */
	0x00, 0x00,
};
/* 803D0E54 0044 .data      @850                                                         */
SECTION_DATA u8 OSThread__LIT_850[68] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x43, 0x68, 0x65,
	0x63, 0x6B, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x28, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x2D, 0x3E, 0x71, 0x75, 0x65, 0x75, 0x65, 0x29, 0x20, 0x69, 0x6E, 0x20,
	0x25, 0x64, 0x0A, 0x00,
};
/* 803D0E98 0044 .data      @851                                                         */
SECTION_DATA u8 LIT_851[68] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x49, 0x73, 0x4D,
	0x65, 0x6D, 0x62, 0x65, 0x72, 0x28, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x2D, 0x3E, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x2C, 0x20, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x29, 0x20, 0x69, 0x6E, 0x20,
	0x25, 0x64, 0x0A, 0x00,
};
/* 803D0EDC 003B .data      @852                                                         */
SECTION_DATA u8 OSThread__LIT_852[60] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x2D, 0x3E, 0x70, 0x72, 0x69, 0x6F, 0x72, 0x69, 0x74, 0x79, 0x20, 0x3D, 0x3D,
	0x20, 0x33, 0x32, 0x20, 0x69, 0x6E, 0x20, 0x25, 0x64, 0x0A, 0x00,
	/* padding */
	0x00,
};
/* 803D0F18 003F .data      @853                                                         */
SECTION_DATA u8 OSThread__LIT_853[64] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x21, 0x5F, 0x5F,
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x44, 0x65, 0x61, 0x64, 0x4C, 0x6F, 0x63, 0x6B, 0x28,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x29, 0x20, 0x69, 0x6E, 0x20, 0x25, 0x64, 0x0A, 0x00,
	/* padding */
	0x00,
};
/* 803D0F58 0067 .data      @854                                                         */
SECTION_DATA u8 OSThread__LIT_854[104] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x2D, 0x3E, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4D, 0x75, 0x74, 0x65, 0x78, 0x2E,
	0x68, 0x65, 0x61, 0x64, 0x20, 0x3D, 0x3D, 0x20, 0x4E, 0x55, 0x4C, 0x4C, 0x20, 0x26, 0x26, 0x20,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x2D, 0x3E, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4D, 0x75, 0x74,
	0x65, 0x78, 0x2E, 0x74, 0x61, 0x69, 0x6C, 0x20, 0x3D, 0x3D, 0x20, 0x4E, 0x55, 0x4C, 0x4C, 0x20,
	0x69, 0x6E, 0x20, 0x25, 0x64, 0x0A, 0x00,
	/* padding */
	0x00,
};
/* 803D0FC0 0045 .data      @855                                                         */
SECTION_DATA u8 OSThread__LIT_855[72] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x2E, 0x20, 0x75, 0x6E,
	0x6B, 0x6F, 0x77, 0x6E, 0x20, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x20, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x20, 0x28, 0x25, 0x64, 0x29, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x20, 0x25, 0x70, 0x0A, 0x00,
	/* padding */
	0x00, 0x00, 0x00,
};
/* 803D1008 003D .data      @856                                                         */
SECTION_DATA u8 LIT_856[64] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x5F, 0x5F, 0x4F,
	0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x4D, 0x75, 0x74, 0x65, 0x78, 0x65, 0x73, 0x28, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x29, 0x20, 0x69, 0x6E, 0x20, 0x25, 0x64, 0x0A, 0x00,
	/* padding */
	0x00, 0x00, 0x00,
};
}


/* ###################################################################################### */
/*                                         .sdata                                         */
/* ###################################################################################### */

extern "C" {
/* 804509B8 0004 .sdata     SwitchThreadCallback                                         */
SECTION_SDATA u8 SwitchThreadCallback[4] = {
	0x80, 0x34, 0x0A, 0xA4,
};
/* 804509BC 0001 .sdata     @833                                                         */
SECTION_SDATA u8 OSThread__LIT_833[4] = {
	0x00,
	/* padding */
	0x00, 0x00, 0x00,
};
}


/* ###################################################################################### */
/*                                          .bss                                          */
/* ###################################################################################### */

extern "C" {
/* 8044BB78 0000 .bss       ...bss.0                                                     */
/* 8044BB78 0100 .bss       RunQueue                                                     */
SECTION_BSS u8 RunQueue[256];
/* 8044BC78 0318 .bss       IdleThread                                                   */
SECTION_BSS u8 IdleThread[792];
/* 8044BF90 0318 .bss       DefaultThread                                                */
SECTION_BSS u8 DefaultThread[792];
/* 8044C2A8 02C8 .bss       IdleContext                                                  */
SECTION_BSS u8 IdleContext[712];
}


/* ###################################################################################### */
/*                                         .sbss                                          */
/* ###################################################################################### */

extern "C" {
/* 804516C0 0004 .sbss      RunQueueBits                                                 */
SECTION_SBSS u8 RunQueueBits[4];
/* 804516C4 0004 .sbss      RunQueueHint                                                 */
SECTION_SBSS u8 RunQueueHint[4];
/* 804516C8 0004 .sbss      Reschedule                                                   */
SECTION_SBSS u8 Reschedule[4];
SECTION_SBSS u8 pad_804516CC[4];
/* 804516D0 0008 .sbss      data_804516D0                                                */
SECTION_SBSS u8 data_804516D0[8];
}


/* ###################################################################################### */
/*                                         .text                                          */
/* ###################################################################################### */

extern "C" {
/* 80340AA4 0004 .text      DefaultSwitchThreadCallback                                  */
void DefaultSwitchThreadCallback() {
	return;
}

/* 80340AA8 0074 .text      OSSetSwitchThreadCallback                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void OSSetSwitchThreadCallback() {
	nofralloc
#include "_include/os/OSThread/OSSetSwitchThreadCallback.s"
}
#pragma pop

/* 80340B1C 0158 .text      __OSThreadInit                                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void __OSThreadInit() {
	nofralloc
#include "_include/os/OSThread/__OSThreadInit.s"
}
#pragma pop

/* 80340C74 0010 .text      OSInitThreadQueue                                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void OSInitThreadQueue() {
	nofralloc
#include "_include/os/OSThread/OSInitThreadQueue.s"
}
#pragma pop

/* 80340C84 000C .text      OSGetCurrentThread                                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void OSGetCurrentThread() {
	nofralloc
#include "_include/os/OSThread/OSGetCurrentThread.s"
}
#pragma pop

/* 80340C90 0034 .text      OSIsThreadTerminated                                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void OSIsThreadTerminated() {
	nofralloc
#include "_include/os/OSThread/OSIsThreadTerminated.s"
}
#pragma pop

/* 80340CC4 0040 .text      OSDisableScheduler                                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void OSDisableScheduler() {
	nofralloc
#include "_include/os/OSThread/OSDisableScheduler.s"
}
#pragma pop

/* 80340D04 0040 .text      OSEnableScheduler                                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void OSEnableScheduler() {
	nofralloc
#include "_include/os/OSThread/OSEnableScheduler.s"
}
#pragma pop

/* 80340D44 0068 .text      UnsetRun                                                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void UnsetRun() {
	nofralloc
#include "_include/os/OSThread/UnsetRun.s"
}
#pragma pop

/* 80340DAC 003C .text      __OSGetEffectivePriority                                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void __OSGetEffectivePriority() {
	nofralloc
#include "_include/os/OSThread/__OSGetEffectivePriority.s"
}
#pragma pop

/* 80340DE8 01C0 .text      SetEffectivePriority                                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void SetEffectivePriority() {
	nofralloc
#include "_include/os/OSThread/SetEffectivePriority.s"
}
#pragma pop

/* 80340FA8 0050 .text      __OSPromoteThread                                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void __OSPromoteThread() {
	nofralloc
#include "_include/os/OSThread/__OSPromoteThread.s"
}
#pragma pop

/* 80340FF8 0228 .text      SelectThread                                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void SelectThread() {
	nofralloc
#include "_include/os/OSThread/SelectThread.s"
}
#pragma pop

/* 80341220 0030 .text      __OSReschedule                                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void __OSReschedule() {
	nofralloc
#include "_include/os/OSThread/__OSReschedule.s"
}
#pragma pop

/* 80341250 003C .text      OSYieldThread                                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void OSYieldThread() {
	nofralloc
#include "_include/os/OSThread/OSYieldThread.s"
}
#pragma pop

/* 8034128C 01E8 .text      OSCreateThread                                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void OSCreateThread() {
	nofralloc
#include "_include/os/OSThread/OSCreateThread.s"
}
#pragma pop

/* 80341474 00E4 .text      OSExitThread                                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void OSExitThread() {
	nofralloc
#include "_include/os/OSThread/OSExitThread.s"
}
#pragma pop

/* 80341558 01BC .text      OSCancelThread                                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void OSCancelThread() {
	nofralloc
#include "_include/os/OSThread/OSCancelThread.s"
}
#pragma pop

/* 80341714 00A0 .text      OSDetachThread                                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void OSDetachThread() {
	nofralloc
#include "_include/os/OSThread/OSDetachThread.s"
}
#pragma pop

/* 803417B4 0288 .text      OSResumeThread                                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void OSResumeThread() {
	nofralloc
#include "_include/os/OSThread/OSResumeThread.s"
}
#pragma pop

/* 80341A3C 0170 .text      OSSuspendThread                                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void OSSuspendThread() {
	nofralloc
#include "_include/os/OSThread/OSSuspendThread.s"
}
#pragma pop

/* 80341BAC 00EC .text      OSSleepThread                                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void OSSleepThread() {
	nofralloc
#include "_include/os/OSThread/OSSleepThread.s"
}
#pragma pop

/* 80341C98 0104 .text      OSWakeupThread                                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void OSWakeupThread() {
	nofralloc
#include "_include/os/OSThread/OSWakeupThread.s"
}
#pragma pop

/* 80341D9C 00C0 .text      OSSetThreadPriority                                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void OSSetThreadPriority() {
	nofralloc
#include "_include/os/OSThread/OSSetThreadPriority.s"
}
#pragma pop

/* 80341E5C 0008 .text      OSGetThreadPriority                                          */
u32 OSGetThreadPriority(u8* param0) {
	return *(u32*)&param0[724]; /* param0->field_0x2d4 */
}

/* 80341E64 009C .text      CheckThreadQueue                                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void CheckThreadQueue() {
	nofralloc
#include "_include/os/OSThread/CheckThreadQueue.s"
}
#pragma pop

/* 80341F00 0750 .text      OSCheckActiveThreads                                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void OSCheckActiveThreads() {
	nofralloc
#include "_include/os/OSThread/OSCheckActiveThreads.s"
}
#pragma pop

/* 80342650 00AC .text      OSClearStack                                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void OSClearStack() {
	nofralloc
#include "_include/os/OSThread/OSClearStack.s"
}
#pragma pop

}

