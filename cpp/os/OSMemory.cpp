// 
// Generated By: dol2asm
// 

#include "dolphin/types.h"

// 
// Additional Symbols:
// 

extern "C" {
extern void DCInvalidateRange();
extern void DCFlushRange();
extern void __OSUnhandledException();
extern void OSDisableInterrupts();
extern void OSRestoreInterrupts();
extern void __OSSetInterruptHandler();
extern void __OSMaskInterrupts();
extern void __OSUnmaskInterrupts();
extern void MEMIntrruptHandler();
extern void Config24MB();
extern void Config48MB();
extern void RealMode();
extern void OSRegisterResetFunction();
SECTION_DATA extern u8 OSMemory__ResetFunctionInfo[16];
SECTION_BSS extern u8 __OSErrorTable[80];
}


/* ###################################################################################### */
/*                                         .data                                          */
/* ###################################################################################### */

extern "C" {
/* 803D07D8 0010 .data      ResetFunctionInfo                                            */
SECTION_DATA u8 OSMemory__ResetFunctionInfo[16] = {
	0x80, 0x33, 0xEC, 0x6C, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
}


/* ###################################################################################### */
/*                                         .text                                          */
/* ###################################################################################### */

extern "C" {
/* 8033EC6C 003C .text      OnReset                                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void OSMemory__OnReset() {
	nofralloc
#include "_include/os/OSMemory/OSMemory__OnReset.s"
}
#pragma pop

/* 8033ECA8 006C .text      MEMIntrruptHandler                                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void MEMIntrruptHandler() {
	nofralloc
#include "_include/os/OSMemory/MEMIntrruptHandler.s"
}
#pragma pop

/* 8033ED14 00C4 .text      OSProtectRange                                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void OSProtectRange() {
	nofralloc
#include "_include/os/OSMemory/OSProtectRange.s"
}
#pragma pop

/* 8033EDD8 0080 .text      Config24MB                                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void Config24MB() {
	nofralloc
#include "_include/os/OSMemory/Config24MB.s"
}
#pragma pop

/* 8033EE58 0080 .text      Config48MB                                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void Config48MB() {
	nofralloc
#include "_include/os/OSMemory/Config48MB.s"
}
#pragma pop

/* 8033EED8 0018 .text      RealMode                                                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void RealMode() {
	nofralloc
#include "_include/os/OSMemory/RealMode.s"
}
#pragma pop

/* 8033EEF0 0118 .text      __OSInitMemoryProtection                                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void __OSInitMemoryProtection() {
	nofralloc
#include "_include/os/OSMemory/__OSInitMemoryProtection.s"
}
#pragma pop

}

