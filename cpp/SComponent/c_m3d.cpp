// 
// Generated By: dol2asm
// 

#include "dolphin/types.h"

// 
// Additional Symbols:
// 

struct cM3dGAab;
struct cXyz;
struct cM3dGLin;
struct cM3dGSph;
struct cM3dGTri;
struct Vec;
struct cM3dGPla;
struct cM3d_Range;
struct cM3dGCyl;
struct csXyz;
struct cM3dGCps;

extern void cM_atan2s(f32, f32); /* cM_atan2s__Fff */
extern void cM3d_InDivPos1(const Vec*, const Vec*, f32, Vec*); /* cM3d_InDivPos1__FPC3VecPC3VecfP3Vec */
extern void cM3d_InDivPos2(const Vec*, const Vec*, f32, Vec*); /* cM3d_InDivPos2__FPC3VecPC3VecfP3Vec */
extern void cM3d_Len2dSq(f32, f32, f32, f32); /* cM3d_Len2dSq__Fffff */
extern void cM3d_Len3dSqPntAndSegLine(const cM3dGLin*, const Vec*, Vec*, f32*); /* cM3d_Len3dSqPntAndSegLine__FPC8cM3dGLinPC3VecP3VecPf */
extern void cM3d_SignedLenPlaAndPos(const cM3dGPla*, const Vec*); /* cM3d_SignedLenPlaAndPos__FPC8cM3dGPlaPC3Vec */
extern void cM3d_VectorProduct2d(f32, f32, f32, f32, f32, f32); /* cM3d_VectorProduct2d__Fffffff */
extern void cM3d_Check_LinLin(const cM3dGLin*, const cM3dGLin*, f32*, f32*); /* cM3d_Check_LinLin__FPC8cM3dGLinPC8cM3dGLinPfPf */
extern void cM3d_CrossInfLineVsInfPlane_proc(f32, f32, const Vec*, const Vec*, Vec*); /* cM3d_CrossInfLineVsInfPlane_proc__FffPC3VecPC3VecP3Vec */
extern void cM3d_Cross_LinPla(const cM3dGLin*, const cM3dGPla*, Vec*, bool, bool); /* cM3d_Cross_LinPla__FPC8cM3dGLinPC8cM3dGPlaP3Vecbb */
extern void cM3d_InclusionCheckPosIn3PosBox3d(const Vec*, const Vec*, const Vec*, const Vec*, f32); /* cM3d_InclusionCheckPosIn3PosBox3d__FPC3VecPC3VecPC3VecPC3Vecf */
extern void cM3d_InclusionCheckPosIn3PosBox2d(f32, f32, f32, f32, f32, f32, f32, f32, f32); /* cM3d_InclusionCheckPosIn3PosBox2d__Ffffffffff */
extern void cM3d_CrossX_Tri(const cM3dGTri*, const Vec*, f32); /* cM3d_CrossX_Tri__FPC8cM3dGTriPC3Vecf */
extern void cM3d_CrossX_Tri(const cM3dGTri*, const Vec*); /* cM3d_CrossX_Tri__FPC8cM3dGTriPC3Vec */
extern void cM3d_CrossX_LinTri_proc(const cM3dGTri*, const Vec*); /* cM3d_CrossX_LinTri_proc__FPC8cM3dGTriPC3Vec */
extern void cM3d_CrossY_Tri(const cM3dGTri*, const Vec*); /* cM3d_CrossY_Tri__FPC8cM3dGTriPC3Vec */
extern void cM3d_CrossY_LinTri_proc(const cM3dGTri*, const Vec*); /* cM3d_CrossY_LinTri_proc__FPC8cM3dGTriPC3Vec */
extern void cM3d_CrossY_Tri(const cM3dGTri*, const Vec*, f32*); /* cM3d_CrossY_Tri__FPC8cM3dGTriPC3VecPf */
extern void cM3d_CrossY_Tri(const cM3dGTri*, const Vec*, f32); /* cM3d_CrossY_Tri__FPC8cM3dGTriPC3Vecf */
extern void cM3d_CrossY_Tri(const cM3dGTri*, const Vec*, const cM3d_Range*, f32*); /* cM3d_CrossY_Tri__FPC8cM3dGTriPC3VecPC10cM3d_RangePf */
extern void cM3d_CrossZ_Tri(const cM3dGTri*, const Vec*, f32); /* cM3d_CrossZ_Tri__FPC8cM3dGTriPC3Vecf */
extern void cM3d_CrossZ_Tri(const cM3dGTri*, const Vec*); /* cM3d_CrossZ_Tri__FPC8cM3dGTriPC3Vec */
extern void cM3d_CrossZ_LinTri_proc(const cM3dGTri*, const Vec*); /* cM3d_CrossZ_LinTri_proc__FPC8cM3dGTriPC3Vec */
extern void cM3d_Cross_LinTri(const cM3dGLin*, const cM3dGTri*, Vec*, bool, bool); /* cM3d_Cross_LinTri__FPC8cM3dGLinPC8cM3dGTriP3Vecbb */
extern void cM3d_Cross_LinTri_Easy(const cM3dGTri*, const Vec*); /* cM3d_Cross_LinTri_Easy__FPC8cM3dGTriPC3Vec */
extern void cM3d_Cross_SphPnt(const cM3dGSph*, const Vec*); /* cM3d_Cross_SphPnt__FPC8cM3dGSphPC3Vec */
extern void cM3d_Cross_LinSph(const cM3dGLin*, const cM3dGSph*, Vec*); /* cM3d_Cross_LinSph__FPC8cM3dGLinPC8cM3dGSphP3Vec */
extern void cM3d_Cross_LinSph_CrossPos(const cM3dGSph&, const cM3dGLin&, Vec*, Vec*); /* cM3d_Cross_LinSph_CrossPos__FRC8cM3dGSphRC8cM3dGLinP3VecP3Vec */
extern void cM3d_Cross_CylSph(const cM3dGCyl*, const cM3dGSph*, Vec*, f32*); /* cM3d_Cross_CylSph__FPC8cM3dGCylPC8cM3dGSphP3VecPf */
extern void cM3d_Cross_SphSph(const cM3dGSph*, const cM3dGSph*, f32*, f32*); /* cM3d_Cross_SphSph__FPC8cM3dGSphPC8cM3dGSphPfPf */
extern void cM3d_CalcSphVsTriCrossPoint(const cM3dGSph*, const cM3dGTri*, Vec*); /* cM3d_CalcSphVsTriCrossPoint__FPC8cM3dGSphPC8cM3dGTriP3Vec */
extern void cM3d_Cross_SphTri(const cM3dGSph*, const cM3dGTri*, Vec*); /* cM3d_Cross_SphTri__FPC8cM3dGSphPC8cM3dGTriP3Vec */
extern void cM3d_Cross_CylLin(const cM3dGCyl*, const cM3dGLin*, Vec*, Vec*); /* cM3d_Cross_CylLin__FPC8cM3dGCylPC8cM3dGLinP3VecP3Vec */
extern void cM3d_Cross_CylPntPnt(const cM3dGCyl*, const Vec*, const Vec*, Vec*, Vec*); /* cM3d_Cross_CylPntPnt__FPC8cM3dGCylPC3VecPC3VecP3VecP3Vec */
extern void cM3d_Cross_CylPnt(const cM3dGCyl*, const Vec*); /* cM3d_Cross_CylPnt__FPC8cM3dGCylPC3Vec */
extern void cM3d_Cross_CpsSph_CrossPos(const cM3dGCps&, const cM3dGSph&, const Vec&, Vec*); /* cM3d_Cross_CpsSph_CrossPos__FRC8cM3dGCpsRC8cM3dGSphRC3VecP3Vec */
extern void cM3d_PlaneCrossLineProcWork(f32, f32, f32, f32, f32, f32, f32, f32*, f32*); /* cM3d_PlaneCrossLineProcWork__FfffffffPfPf */
extern void cM3d_2PlaneCrossLine(const cM3dGPla&, const cM3dGPla&, cM3dGLin*); /* cM3d_2PlaneCrossLine__FRC8cM3dGPlaRC8cM3dGPlaP8cM3dGLin */
extern void cM3d_lineVsPosSuisenCross(const cM3dGLin*, const Vec*, Vec*); /* cM3d_lineVsPosSuisenCross__FPC8cM3dGLinPC3VecP3Vec */

extern "C" {
extern void cM_atan2s__Fff();
extern void cM3d_InDivPos1__FPC3VecPC3VecfP3Vec();
extern void cM3d_InDivPos2__FPC3VecPC3VecfP3Vec();
extern void cM3d_Len2dSq__Fffff();
extern void cM3d_Len3dSqPntAndSegLine__FPC8cM3dGLinPC3VecP3VecPf();
extern void cM3d_SignedLenPlaAndPos__FPC8cM3dGPlaPC3Vec();
extern void cM3d_VectorProduct2d__Fffffff();
extern void cM3d_Check_LinLin__FPC8cM3dGLinPC8cM3dGLinPfPf();
extern void cM3d_CrossInfLineVsInfPlane_proc__FffPC3VecPC3VecP3Vec();
extern void cM3d_Cross_LinPla__FPC8cM3dGLinPC8cM3dGPlaP3Vecbb();
extern void cM3d_InclusionCheckPosIn3PosBox3d__FPC3VecPC3VecPC3VecPC3Vecf();
extern void cM3d_InclusionCheckPosIn3PosBox2d__Ffffffffff();
extern void cM3d_CrossX_Tri__FPC8cM3dGTriPC3Vecf();
extern void cM3d_CrossX_Tri__FPC8cM3dGTriPC3Vec();
extern void cM3d_CrossX_LinTri_proc__FPC8cM3dGTriPC3Vec();
extern void cM3d_CrossY_Tri__FPC8cM3dGTriPC3Vec();
extern void cM3d_CrossY_LinTri_proc__FPC8cM3dGTriPC3Vec();
extern void cM3d_CrossY_Tri__FPC8cM3dGTriPC3VecPf();
extern void cM3d_CrossY_Tri__FPC8cM3dGTriPC3Vecf();
extern void cM3d_CrossY_Tri__FPC8cM3dGTriPC3VecPC10cM3d_RangePf();
extern void cM3d_CrossZ_Tri__FPC8cM3dGTriPC3Vecf();
extern void cM3d_CrossZ_Tri__FPC8cM3dGTriPC3Vec();
extern void cM3d_CrossZ_LinTri_proc__FPC8cM3dGTriPC3Vec();
extern void cM3d_Cross_LinTri__FPC8cM3dGLinPC8cM3dGTriP3Vecbb();
extern void cM3d_Cross_LinTri_Easy__FPC8cM3dGTriPC3Vec();
extern void cM3d_Cross_SphPnt__FPC8cM3dGSphPC3Vec();
extern void cM3d_Cross_LinSph__FPC8cM3dGLinPC8cM3dGSphP3Vec();
extern void cM3d_Cross_LinSph_CrossPos__FRC8cM3dGSphRC8cM3dGLinP3VecP3Vec();
extern void cM3d_Cross_CylSph__FPC8cM3dGCylPC8cM3dGSphP3VecPf();
extern void cM3d_Cross_SphSph__FPC8cM3dGSphPC8cM3dGSphPfPf();
extern void cM3d_CalcSphVsTriCrossPoint__FPC8cM3dGSphPC8cM3dGTriP3Vec();
extern void cM3d_Cross_SphTri__FPC8cM3dGSphPC8cM3dGTriP3Vec();
extern void cM3d_Cross_CylLin__FPC8cM3dGCylPC8cM3dGLinP3VecP3Vec();
extern void cM3d_Cross_CylPntPnt__FPC8cM3dGCylPC3VecPC3VecP3VecP3Vec();
extern void cM3d_Cross_CylPnt__FPC8cM3dGCylPC3Vec();
extern void cM3d_Cross_CpsSph_CrossPos__FRC8cM3dGCpsRC8cM3dGSphRC3VecP3Vec();
extern void cM3d_PlaneCrossLineProcWork__FfffffffPfPf();
extern void cM3d_2PlaneCrossLine__FRC8cM3dGPlaRC8cM3dGPlaP8cM3dGLin();
extern void cM3d_lineVsPosSuisenCross__FPC8cM3dGLinPC3VecP3Vec();
extern void __ct__8cM3dGLinFRC4cXyzRC4cXyz();
extern void SetStartEnd__8cM3dGLinFRC3VecRC3Vec();
extern void CalcPos__8cM3dGLinCFP3Vecf();
extern void SetC__8cM3dGSphFRC4cXyz();
extern void SetR__8cM3dGSphFf();
extern void PSVECAdd();
extern void PSVECSubtract();
extern void PSVECScale();
extern void PSVECSquareMag();
extern void PSVECMag();
extern void PSVECDotProduct();
extern void PSVECCrossProduct();
extern void PSVECSquareDistance();
extern void PSVECDistance();
extern void _savegpr_26();
extern void _savegpr_27();
extern void _savegpr_28();
extern void _savegpr_29();
extern void _restgpr_26();
extern void _restgpr_27();
extern void _restgpr_28();
extern void _restgpr_29();
SECTION_DATA extern const void* __vt__8cM3dGPla[3];
SECTION_DATA extern const void* __vt__8cM3dGLin[3];
SECTION_DATA extern const void* __vt__8cM3dGSph[3];
SECTION_SDATA extern u8 __float_nan[4];
SECTION_SDATA extern u8 __float_epsilon[4];
SECTION_SBSS extern u8 G_CM3D_F_ABS_MIN[4];
SECTION_SDATA2 extern u8 c_m3d__LIT_2256[8];
SECTION_SDATA2 extern f64 c_m3d__LIT_2257;
SECTION_SDATA2 extern f64 c_m3d__LIT_2258;
SECTION_SDATA2 extern u8 c_m3d__LIT_2259[8];
SECTION_SDATA2 extern f32 LIT_2273;
SECTION_SDATA2 extern u8 LIT_2346[4];
SECTION_SDATA2 extern u8 BPCP_OUTCODE0[4];
SECTION_SDATA2 extern u8 BPCP_OUTCODE1[4];
SECTION_SDATA2 extern u8 BPCP_OUTCODE4[4];
SECTION_SDATA2 extern u8 BPCP_OUTCODE5[4];
SECTION_SDATA2 extern u8 BPCP_OUTCODE2[4];
SECTION_SDATA2 extern u8 BPCP_OUTCODE3[4];
SECTION_SDATA2 extern u8 BEVEL2D_OUTCODE0[4];
SECTION_SDATA2 extern u8 BEVEL2D_OUTCODE1[4];
SECTION_SDATA2 extern u8 BEVEL2D_OUTCODE2[4];
SECTION_SDATA2 extern u8 BEVEL2D_OUTCODE3[4];
SECTION_SDATA2 extern u8 BEVEL2D_OUTCODE4[4];
SECTION_SDATA2 extern u8 BEVEL2D_OUTCODE5[4];
SECTION_SDATA2 extern u8 BEVEL2D_OUTCODE6[4];
SECTION_SDATA2 extern u8 BEVEL2D_OUTCODE7[4];
SECTION_SDATA2 extern u8 BEVEL2D_OUTCODE8[4];
SECTION_SDATA2 extern u8 BEVEL2D_OUTCODE9[4];
SECTION_SDATA2 extern u8 BEVEL2D_OUTCODE10[4];
SECTION_SDATA2 extern u8 BEVEL2D_OUTCODE11[4];
SECTION_SDATA2 extern u8 BEVEL3D_OUTCODE0[4];
SECTION_SDATA2 extern u8 BEVEL3D_OUTCODE1[4];
SECTION_SDATA2 extern u8 BEVEL3D_OUTCODE2[4];
SECTION_SDATA2 extern u8 BEVEL3D_OUTCODE3[4];
SECTION_SDATA2 extern u8 BEVEL3D_OUTCODE4[4];
SECTION_SDATA2 extern u8 BEVEL3D_OUTCODE5[4];
SECTION_SDATA2 extern u8 BEVEL3D_OUTCODE6[4];
SECTION_SDATA2 extern u8 BEVEL3D_OUTCODE7[4];
SECTION_SDATA2 extern f32 LIT_3082;
SECTION_SDATA2 extern u8 LIT_3205[4];
SECTION_SDATA2 extern f32 LIT_3229;
SECTION_SDATA2 extern f32 LIT_3230;
SECTION_SDATA2 extern u8 LIT_3497[4];
SECTION_SDATA2 extern f32 c_m3d__LIT_3739;
SECTION_SDATA2 extern f32 c_m3d__LIT_3740;
SECTION_SDATA2 extern f32 c_m3d__LIT_3892;
SECTION_SDATA2 extern f32 LIT_4255;
SECTION_SDATA2 extern f32 c_m3d__LIT_5508;
}


/* ###################################################################################### */
/*                                        .sdata2                                         */
/* ###################################################################################### */

extern "C" {
/* 80455118 0004 .sdata2    @2256                                                        */
SECTION_SDATA2 u8 c_m3d__LIT_2256[8] = {
	0x00, 0x00, 0x00, 0x00,
	/* padding */
	0x00, 0x00, 0x00, 0x00,
};
/* 80455120 0008 .sdata2    @2257                                                        */
// 0x3fe0000000000000
SECTION_SDATA2 f64 c_m3d__LIT_2257 = 0.500000;
/* 80455128 0008 .sdata2    @2258                                                        */
// 0x4008000000000000
SECTION_SDATA2 f64 c_m3d__LIT_2258 = 3.000000;
/* 80455130 0008 .sdata2    @2259                                                        */
SECTION_SDATA2 u8 c_m3d__LIT_2259[8] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
/* 80455138 0004 .sdata2    @2273                                                        */
// 0x3f800000
SECTION_SDATA2 f32 LIT_2273 = 1.000000f;
/* 8045513C 0004 .sdata2    @2346                                                        */
SECTION_SDATA2 u8 LIT_2346[4] = {
	0x3C, 0xA3, 0xD7, 0x0A,
};
/* 80455140 0004 .sdata2    BPCP_OUTCODE0                                                */
SECTION_SDATA2 u8 BPCP_OUTCODE0[4] = {
	0x00, 0x00, 0x00, 0x01,
};
/* 80455144 0004 .sdata2    BPCP_OUTCODE1                                                */
SECTION_SDATA2 u8 BPCP_OUTCODE1[4] = {
	0x00, 0x00, 0x00, 0x02,
};
/* 80455148 0004 .sdata2    BPCP_OUTCODE4                                                */
SECTION_SDATA2 u8 BPCP_OUTCODE4[4] = {
	0x00, 0x00, 0x00, 0x10,
};
/* 8045514C 0004 .sdata2    BPCP_OUTCODE5                                                */
SECTION_SDATA2 u8 BPCP_OUTCODE5[4] = {
	0x00, 0x00, 0x00, 0x20,
};
/* 80455150 0004 .sdata2    BPCP_OUTCODE2                                                */
SECTION_SDATA2 u8 BPCP_OUTCODE2[4] = {
	0x00, 0x00, 0x00, 0x04,
};
/* 80455154 0004 .sdata2    BPCP_OUTCODE3                                                */
SECTION_SDATA2 u8 BPCP_OUTCODE3[4] = {
	0x00, 0x00, 0x00, 0x08,
};
/* 80455158 0004 .sdata2    BEVEL2D_OUTCODE0                                             */
SECTION_SDATA2 u8 BEVEL2D_OUTCODE0[4] = {
	0x00, 0x00, 0x00, 0x01,
};
/* 8045515C 0004 .sdata2    BEVEL2D_OUTCODE1                                             */
SECTION_SDATA2 u8 BEVEL2D_OUTCODE1[4] = {
	0x00, 0x00, 0x00, 0x02,
};
/* 80455160 0004 .sdata2    BEVEL2D_OUTCODE2                                             */
SECTION_SDATA2 u8 BEVEL2D_OUTCODE2[4] = {
	0x00, 0x00, 0x00, 0x04,
};
/* 80455164 0004 .sdata2    BEVEL2D_OUTCODE3                                             */
SECTION_SDATA2 u8 BEVEL2D_OUTCODE3[4] = {
	0x00, 0x00, 0x00, 0x08,
};
/* 80455168 0004 .sdata2    BEVEL2D_OUTCODE4                                             */
SECTION_SDATA2 u8 BEVEL2D_OUTCODE4[4] = {
	0x00, 0x00, 0x00, 0x10,
};
/* 8045516C 0004 .sdata2    BEVEL2D_OUTCODE5                                             */
SECTION_SDATA2 u8 BEVEL2D_OUTCODE5[4] = {
	0x00, 0x00, 0x00, 0x20,
};
/* 80455170 0004 .sdata2    BEVEL2D_OUTCODE6                                             */
SECTION_SDATA2 u8 BEVEL2D_OUTCODE6[4] = {
	0x00, 0x00, 0x00, 0x40,
};
/* 80455174 0004 .sdata2    BEVEL2D_OUTCODE7                                             */
SECTION_SDATA2 u8 BEVEL2D_OUTCODE7[4] = {
	0x00, 0x00, 0x00, 0x80,
};
/* 80455178 0004 .sdata2    BEVEL2D_OUTCODE8                                             */
SECTION_SDATA2 u8 BEVEL2D_OUTCODE8[4] = {
	0x00, 0x00, 0x01, 0x00,
};
/* 8045517C 0004 .sdata2    BEVEL2D_OUTCODE9                                             */
SECTION_SDATA2 u8 BEVEL2D_OUTCODE9[4] = {
	0x00, 0x00, 0x02, 0x00,
};
/* 80455180 0004 .sdata2    BEVEL2D_OUTCODE10                                            */
SECTION_SDATA2 u8 BEVEL2D_OUTCODE10[4] = {
	0x00, 0x00, 0x04, 0x00,
};
/* 80455184 0004 .sdata2    BEVEL2D_OUTCODE11                                            */
SECTION_SDATA2 u8 BEVEL2D_OUTCODE11[4] = {
	0x00, 0x00, 0x08, 0x00,
};
/* 80455188 0004 .sdata2    BEVEL3D_OUTCODE0                                             */
SECTION_SDATA2 u8 BEVEL3D_OUTCODE0[4] = {
	0x00, 0x00, 0x00, 0x01,
};
/* 8045518C 0004 .sdata2    BEVEL3D_OUTCODE1                                             */
SECTION_SDATA2 u8 BEVEL3D_OUTCODE1[4] = {
	0x00, 0x00, 0x00, 0x02,
};
/* 80455190 0004 .sdata2    BEVEL3D_OUTCODE2                                             */
SECTION_SDATA2 u8 BEVEL3D_OUTCODE2[4] = {
	0x00, 0x00, 0x00, 0x04,
};
/* 80455194 0004 .sdata2    BEVEL3D_OUTCODE3                                             */
SECTION_SDATA2 u8 BEVEL3D_OUTCODE3[4] = {
	0x00, 0x00, 0x00, 0x08,
};
/* 80455198 0004 .sdata2    BEVEL3D_OUTCODE4                                             */
SECTION_SDATA2 u8 BEVEL3D_OUTCODE4[4] = {
	0x00, 0x00, 0x00, 0x10,
};
/* 8045519C 0004 .sdata2    BEVEL3D_OUTCODE5                                             */
SECTION_SDATA2 u8 BEVEL3D_OUTCODE5[4] = {
	0x00, 0x00, 0x00, 0x20,
};
/* 804551A0 0004 .sdata2    BEVEL3D_OUTCODE6                                             */
SECTION_SDATA2 u8 BEVEL3D_OUTCODE6[4] = {
	0x00, 0x00, 0x00, 0x40,
};
/* 804551A4 0004 .sdata2    BEVEL3D_OUTCODE7                                             */
SECTION_SDATA2 u8 BEVEL3D_OUTCODE7[4] = {
	0x00, 0x00, 0x00, 0x80,
};
/* 804551A8 0004 .sdata2    @3082                                                        */
// 0xbf800000
SECTION_SDATA2 f32 LIT_3082 = -1.000000f;
/* 804551AC 0004 .sdata2    @3205                                                        */
SECTION_SDATA2 u8 LIT_3205[4] = {
	0x3B, 0xA3, 0xD7, 0x0A,
};
/* 804551B0 0004 .sdata2    @3229                                                        */
// 0x41a00000
SECTION_SDATA2 f32 LIT_3229 = 20.000000f;
/* 804551B4 0004 .sdata2    @3230                                                        */
// 0xc1a00000
SECTION_SDATA2 f32 LIT_3230 = -20.000000f;
/* 804551B8 0004 .sdata2    @3497                                                        */
SECTION_SDATA2 u8 LIT_3497[4] = {
	0x3C, 0x03, 0x12, 0x6F,
};
/* 804551BC 0004 .sdata2    @3739                                                        */
// 0x40000000
SECTION_SDATA2 f32 c_m3d__LIT_3739 = 2.000000f;
/* 804551C0 0004 .sdata2    @3740                                                        */
// 0x40800000
SECTION_SDATA2 f32 c_m3d__LIT_3740 = 4.000000f;
/* 804551C4 0004 .sdata2    @3892                                                        */
// 0x3f000000
SECTION_SDATA2 f32 c_m3d__LIT_3892 = 0.500000f;
/* 804551C8 0004 .sdata2    @4255                                                        */
// 0x4e6e6b28
SECTION_SDATA2 f32 LIT_4255 = 1000000000.000000f;
/* 804551CC 0004 .sdata2    @5508                                                        */
// 0x42000000
SECTION_SDATA2 f32 c_m3d__LIT_5508 = 32.000000f;
}


/* ###################################################################################### */
/*                                         .sbss                                          */
/* ###################################################################################### */

extern "C" {
/* 80451180 0004 .sbss      G_CM3D_F_ABS_MIN                                             */
SECTION_SBSS u8 G_CM3D_F_ABS_MIN[4];
SECTION_SBSS u8 pad_80451184[4];
}


/* ###################################################################################### */
/*                                         .text                                          */
/* ###################################################################################### */

extern "C" {
/* 80268560 0050 .text      cM3d_InDivPos1__FPC3VecPC3VecfP3Vec                          */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_InDivPos1(const Vec*, const Vec*, f32, Vec*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_InDivPos1__FPC3VecPC3VecfP3Vec.s"
}
#pragma pop

extern "C" {
/* 802685B0 0064 .text      cM3d_InDivPos2__FPC3VecPC3VecfP3Vec                          */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_InDivPos2(const Vec*, const Vec*, f32, Vec*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_InDivPos2__FPC3VecPC3VecfP3Vec.s"
}
#pragma pop

extern "C" {
/* 80268614 0018 .text      cM3d_Len2dSq__Fffff                                          */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_Len2dSq(f32, f32, f32, f32) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_Len2dSq__Fffff.s"
}
#pragma pop

extern "C" {
/* 8026862C 00E4 .text      cM3d_Len2dSqPntAndSegLine__FffffffPfPfPf                     */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_Len2dSqPntAndSegLine(f32, f32, f32, f32, f32, f32, f32*, f32*, f32*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_Len2dSqPntAndSegLine__FffffffPfPfPf.s"
}
#pragma pop

extern "C" {
/* 80268710 0104 .text      cM3d_Len3dSqPntAndSegLine__FPC8cM3dGLinPC3VecP3VecPf         */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_Len3dSqPntAndSegLine(const cM3dGLin*, const Vec*, Vec*, f32*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_Len3dSqPntAndSegLine__FPC8cM3dGLinPC3VecP3VecPf.s"
}
#pragma pop

extern "C" {
/* 80268814 0080 .text      cM3d_SignedLenPlaAndPos__FPC8cM3dGPlaPC3Vec                  */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_SignedLenPlaAndPos(const cM3dGPla*, const Vec*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_SignedLenPlaAndPos__FPC8cM3dGPlaPC3Vec.s"
}
#pragma pop

extern "C" {
/* 80268894 0020 .text      cM3d_VectorProduct2d__Fffffff                                */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_VectorProduct2d(f32, f32, f32, f32, f32, f32) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_VectorProduct2d__Fffffff.s"
}
#pragma pop

extern "C" {
/* 802688B4 0068 .text      cM3d_VectorProduct__FPC4cXyzPC4cXyzPC4cXyzP4cXyz             */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_VectorProduct(const cXyz*, const cXyz*, const cXyz*, cXyz*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_VectorProduct__FPC4cXyzPC4cXyzPC4cXyzP4cXyz.s"
}
#pragma pop

extern "C" {
/* 8026891C 00CC .text      cM3d_CalcPla__FPC3VecPC3VecPC3VecP3VecPf                     */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_CalcPla(const Vec*, const Vec*, const Vec*, Vec*, f32*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_CalcPla__FPC3VecPC3VecPC3VecP3VecPf.s"
}
#pragma pop

extern "C" {
/* 802689E8 0124 .text      cM3d_Cross_AabAab__FPC8cM3dGAabPC8cM3dGAab                   */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_Cross_AabAab(const cM3dGAab*, const cM3dGAab*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_Cross_AabAab__FPC8cM3dGAabPC8cM3dGAab.s"
}
#pragma pop

extern "C" {
/* 80268B0C 00A8 .text      cM3d_Cross_AabCyl__FPC8cM3dGAabPC8cM3dGCyl                   */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_Cross_AabCyl(const cM3dGAab*, const cM3dGCyl*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_Cross_AabCyl__FPC8cM3dGAabPC8cM3dGCyl.s"
}
#pragma pop

extern "C" {
/* 80268BB4 00A8 .text      cM3d_Cross_AabSph__FPC8cM3dGAabPC8cM3dGSph                   */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_Cross_AabSph(const cM3dGAab*, const cM3dGSph*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_Cross_AabSph__FPC8cM3dGAabPC8cM3dGSph.s"
}
#pragma pop

extern "C" {
/* 80268C5C 0278 .text      cM3d_Check_LinLin__FPC8cM3dGLinPC8cM3dGLinPfPf               */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_Check_LinLin(const cM3dGLin*, const cM3dGLin*, f32*, f32*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_Check_LinLin__FPC8cM3dGLinPC8cM3dGLinPfPf.s"
}
#pragma pop

extern "C" {
/* 80268ED4 0060 .text      cM3d_CrossInfLineVsInfPlane_proc__FffPC3VecPC3VecP3Vec       */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_CrossInfLineVsInfPlane_proc(f32, f32, const Vec*, const Vec*, Vec*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_CrossInfLineVsInfPlane_proc__FffPC3VecPC3VecP3Vec.s"
}
#pragma pop

extern "C" {
/* 80268F34 011C .text      cM3d_Cross_LinPla__FPC8cM3dGLinPC8cM3dGPlaP3Vecbb            */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_Cross_LinPla(const cM3dGLin*, const cM3dGPla*, Vec*, bool, bool) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_Cross_LinPla__FPC8cM3dGLinPC8cM3dGPlaP3Vecbb.s"
}
#pragma pop

extern "C" {
/* 80269050 0BDC .text      cM3d_Cross_MinMaxBoxLine__FPC3VecPC3VecPC3VecPC3Vec          */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_Cross_MinMaxBoxLine(const Vec*, const Vec*, const Vec*, const Vec*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_Cross_MinMaxBoxLine__FPC3VecPC3VecPC3VecPC3Vec.s"
}
#pragma pop

extern "C" {
/* 80269C2C 0138 .text      cM3d_InclusionCheckPosIn3PosBox3d__FPC3VecPC3VecPC3VecPC3Vecf */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_InclusionCheckPosIn3PosBox3d(const Vec*, const Vec*, const Vec*, const Vec*, f32) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_InclusionCheckPosIn3PosBox3d__FPC3VecPC3VecPC3VecPC3Vecf.s"
}
#pragma pop

extern "C" {
/* 80269D64 00B4 .text      cM3d_InclusionCheckPosIn3PosBox2d__Ffffffffff                */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_InclusionCheckPosIn3PosBox2d(f32, f32, f32, f32, f32, f32, f32, f32, f32) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_InclusionCheckPosIn3PosBox2d__Ffffffffff.s"
}
#pragma pop

extern "C" {
/* 80269E18 01A4 .text      cM3d_CrossX_Tri__FPC8cM3dGTriPC3Vecf                         */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_CrossX_Tri(const cM3dGTri*, const Vec*, f32) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_CrossX_Tri__FPC8cM3dGTriPC3Vecf.s"
}
#pragma pop

extern "C" {
/* 80269FBC 01A4 .text      cM3d_CrossX_Tri__FPC8cM3dGTriPC3Vec                          */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_CrossX_Tri(const cM3dGTri*, const Vec*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_CrossX_Tri__FPC8cM3dGTriPC3Vec.s"
}
#pragma pop

extern "C" {
/* 8026A160 0184 .text      cM3d_CrossX_LinTri_proc__FPC8cM3dGTriPC3Vec                  */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_CrossX_LinTri_proc(const cM3dGTri*, const Vec*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_CrossX_LinTri_proc__FPC8cM3dGTriPC3Vec.s"
}
#pragma pop

extern "C" {
/* 8026A2E4 01A4 .text      cM3d_CrossY_Tri__FPC8cM3dGTriPC3Vec                          */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_CrossY_Tri(const cM3dGTri*, const Vec*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_CrossY_Tri__FPC8cM3dGTriPC3Vec.s"
}
#pragma pop

extern "C" {
/* 8026A488 0184 .text      cM3d_CrossY_LinTri_proc__FPC8cM3dGTriPC3Vec                  */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_CrossY_LinTri_proc(const cM3dGTri*, const Vec*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_CrossY_LinTri_proc__FPC8cM3dGTriPC3Vec.s"
}
#pragma pop

extern "C" {
/* 8026A60C 01AC .text      cM3d_CrossY_Tri__FRC3VecRC3VecRC3VecRC8cM3dGPlaPC3Vec        */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_CrossY_Tri(const Vec&, const Vec&, const Vec&, const cM3dGPla&, const Vec*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_CrossY_Tri__FRC3VecRC3VecRC3VecRC8cM3dGPlaPC3Vec.s"
}
#pragma pop

extern "C" {
/* 8026A7B8 0108 .text      cM3d_CrossY_Tri_Front__FRC3VecRC3VecRC3VecPC3Vec             */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_CrossY_Tri_Front(const Vec&, const Vec&, const Vec&, const Vec*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_CrossY_Tri_Front__FRC3VecRC3VecRC3VecPC3Vec.s"
}
#pragma pop

extern "C" {
/* 8026A8C0 0084 .text      cM3d_CrossY_Tri__FPC8cM3dGTriPC3VecPf                        */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_CrossY_Tri(const cM3dGTri*, const Vec*, f32*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_CrossY_Tri__FPC8cM3dGTriPC3VecPf.s"
}
#pragma pop

extern "C" {
/* 8026A944 01A4 .text      cM3d_CrossY_Tri__FPC8cM3dGTriPC3Vecf                         */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_CrossY_Tri(const cM3dGTri*, const Vec*, f32) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_CrossY_Tri__FPC8cM3dGTriPC3Vecf.s"
}
#pragma pop

extern "C" {
/* 8026AAE8 00F0 .text      cM3d_CrossY_Tri__FPC8cM3dGTriPC3VecPC10cM3d_RangePf          */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_CrossY_Tri(const cM3dGTri*, const Vec*, const cM3d_Range*, f32*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_CrossY_Tri__FPC8cM3dGTriPC3VecPC10cM3d_RangePf.s"
}
#pragma pop

extern "C" {
/* 8026ABD8 01A4 .text      cM3d_CrossZ_Tri__FPC8cM3dGTriPC3Vecf                         */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_CrossZ_Tri(const cM3dGTri*, const Vec*, f32) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_CrossZ_Tri__FPC8cM3dGTriPC3Vecf.s"
}
#pragma pop

extern "C" {
/* 8026AD7C 01A4 .text      cM3d_CrossZ_Tri__FPC8cM3dGTriPC3Vec                          */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_CrossZ_Tri(const cM3dGTri*, const Vec*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_CrossZ_Tri__FPC8cM3dGTriPC3Vec.s"
}
#pragma pop

extern "C" {
/* 8026AF20 0184 .text      cM3d_CrossZ_LinTri_proc__FPC8cM3dGTriPC3Vec                  */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_CrossZ_LinTri_proc(const cM3dGTri*, const Vec*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_CrossZ_LinTri_proc__FPC8cM3dGTriPC3Vec.s"
}
#pragma pop

extern "C" {
/* 8026B0A4 00D8 .text      cM3d_Cross_LinTri__FPC8cM3dGLinPC8cM3dGTriP3Vecbb            */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_Cross_LinTri(const cM3dGLin*, const cM3dGTri*, Vec*, bool, bool) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_Cross_LinTri__FPC8cM3dGLinPC8cM3dGTriP3Vecbb.s"
}
#pragma pop

extern "C" {
/* 8026B17C 00BC .text      cM3d_Cross_LinTri_Easy__FPC8cM3dGTriPC3Vec                   */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_Cross_LinTri_Easy(const cM3dGTri*, const Vec*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_Cross_LinTri_Easy__FPC8cM3dGTriPC3Vec.s"
}
#pragma pop

extern "C" {
/* 8026B238 0048 .text      cM3d_Cross_SphPnt__FPC8cM3dGSphPC3Vec                        */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_Cross_SphPnt(const cM3dGSph*, const Vec*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_Cross_SphPnt__FPC8cM3dGSphPC3Vec.s"
}
#pragma pop

extern "C" {
/* 8026B280 0268 .text      cM3d_Cross_LinSph__FPC8cM3dGLinPC8cM3dGSphP3Vec              */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_Cross_LinSph(const cM3dGLin*, const cM3dGSph*, Vec*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_Cross_LinSph__FPC8cM3dGLinPC8cM3dGSphP3Vec.s"
}
#pragma pop

extern "C" {
/* 8026B4E8 03BC .text      cM3d_Cross_LinSph_CrossPos__FRC8cM3dGSphRC8cM3dGLinP3VecP3Vec */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_Cross_LinSph_CrossPos(const cM3dGSph&, const cM3dGLin&, Vec*, Vec*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_Cross_LinSph_CrossPos__FRC8cM3dGSphRC8cM3dGLinP3VecP3Vec.s"
}
#pragma pop

extern "C" {
/* 8026B8A4 01A4 .text      cM3d_Cross_CylSph__FPC8cM3dGCylPC8cM3dGSphPf                 */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_Cross_CylSph(const cM3dGCyl*, const cM3dGSph*, f32*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_Cross_CylSph__FPC8cM3dGCylPC8cM3dGSphPf.s"
}
#pragma pop

extern "C" {
/* 8026BA48 0234 .text      cM3d_Cross_CylSph__FPC8cM3dGCylPC8cM3dGSphP3VecPf            */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_Cross_CylSph(const cM3dGCyl*, const cM3dGSph*, Vec*, f32*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_Cross_CylSph__FPC8cM3dGCylPC8cM3dGSphP3VecPf.s"
}
#pragma pop

extern "C" {
/* 8026BC7C 0080 .text      cM3d_Cross_SphSph__FPC8cM3dGSphPC8cM3dGSphPf                 */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_Cross_SphSph(const cM3dGSph*, const cM3dGSph*, f32*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_Cross_SphSph__FPC8cM3dGSphPC8cM3dGSphPf.s"
}
#pragma pop

extern "C" {
/* 8026BCFC 008C .text      cM3d_Cross_SphSph__FPC8cM3dGSphPC8cM3dGSphPfPf               */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_Cross_SphSph(const cM3dGSph*, const cM3dGSph*, f32*, f32*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_Cross_SphSph__FPC8cM3dGSphPC8cM3dGSphPfPf.s"
}
#pragma pop

extern "C" {
/* 8026BD88 00D4 .text      cM3d_Cross_SphSph__FPC8cM3dGSphPC8cM3dGSphP3Vec              */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_Cross_SphSph(const cM3dGSph*, const cM3dGSph*, Vec*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_Cross_SphSph__FPC8cM3dGSphPC8cM3dGSphP3Vec.s"
}
#pragma pop

extern "C" {
/* 8026BE5C 00A8 .text      cM3d_CalcSphVsTriCrossPoint__FPC8cM3dGSphPC8cM3dGTriP3Vec    */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_CalcSphVsTriCrossPoint(const cM3dGSph*, const cM3dGTri*, Vec*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_CalcSphVsTriCrossPoint__FPC8cM3dGSphPC8cM3dGTriP3Vec.s"
}
#pragma pop

extern "C" {
/* 8026BF04 0328 .text      cM3d_Cross_SphTri__FPC8cM3dGSphPC8cM3dGTriP3Vec              */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_Cross_SphTri(const cM3dGSph*, const cM3dGTri*, Vec*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_Cross_SphTri__FPC8cM3dGSphPC8cM3dGTriP3Vec.s"
}
#pragma pop

extern "C" {
/* 8026C22C 0188 .text      cM3d_Cross_CylCyl__FPC8cM3dGCylPC8cM3dGCylPf                 */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_Cross_CylCyl(const cM3dGCyl*, const cM3dGCyl*, f32*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_Cross_CylCyl__FPC8cM3dGCylPC8cM3dGCylPf.s"
}
#pragma pop

extern "C" {
/* 8026C3B4 021C .text      cM3d_Cross_CylCyl__FPC8cM3dGCylPC8cM3dGCylP3Vec              */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_Cross_CylCyl(const cM3dGCyl*, const cM3dGCyl*, Vec*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_Cross_CylCyl__FPC8cM3dGCylPC8cM3dGCylP3Vec.s"
}
#pragma pop

extern "C" {
/* 8026C5D0 0374 .text      cM3d_Cross_CylTri__FPC8cM3dGCylPC8cM3dGTriP3Vec              */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_Cross_CylTri(const cM3dGCyl*, const cM3dGTri*, Vec*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_Cross_CylTri__FPC8cM3dGCylPC8cM3dGTriP3Vec.s"
}
#pragma pop

extern "C" {
/* 8026C944 0700 .text      cM3d_Cross_CylLin__FPC8cM3dGCylPC8cM3dGLinP3VecP3Vec         */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_Cross_CylLin(const cM3dGCyl*, const cM3dGLin*, Vec*, Vec*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_Cross_CylLin__FPC8cM3dGCylPC8cM3dGLinP3VecP3Vec.s"
}
#pragma pop

extern "C" {
/* 8026D044 006C .text      cM3d_Cross_CylPntPnt__FPC8cM3dGCylPC3VecPC3VecP3VecP3Vec     */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_Cross_CylPntPnt(const cM3dGCyl*, const Vec*, const Vec*, Vec*, Vec*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_Cross_CylPntPnt__FPC8cM3dGCylPC3VecPC3VecP3VecP3Vec.s"
}
#pragma pop

extern "C" {
/* 8026D0B0 0064 .text      cM3d_Cross_CylPnt__FPC8cM3dGCylPC3Vec                        */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_Cross_CylPnt(const cM3dGCyl*, const Vec*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_Cross_CylPnt__FPC8cM3dGCylPC3Vec.s"
}
#pragma pop

extern "C" {
/* 8026D114 02C0 .text      cM3d_Cross_CpsCps__FRC8cM3dGCpsRC8cM3dGCpsP3Vec              */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_Cross_CpsCps(const cM3dGCps&, const cM3dGCps&, Vec*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_Cross_CpsCps__FRC8cM3dGCpsRC8cM3dGCpsP3Vec.s"
}
#pragma pop

extern "C" {
/* 8026D3D4 070C .text      cM3d_Cross_CpsCyl__FRC8cM3dGCpsRC8cM3dGCylP3Vec              */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_Cross_CpsCyl(const cM3dGCps&, const cM3dGCyl&, Vec*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_Cross_CpsCyl__FRC8cM3dGCpsRC8cM3dGCylP3Vec.s"
}
#pragma pop

extern "C" {
/* 8026DAE0 015C .text      cM3d_Cross_CpsSph_CrossPos__FRC8cM3dGCpsRC8cM3dGSphRC3VecP3Vec */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_Cross_CpsSph_CrossPos(const cM3dGCps&, const cM3dGSph&, const Vec&, Vec*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_Cross_CpsSph_CrossPos__FRC8cM3dGCpsRC8cM3dGSphRC3VecP3Vec.s"
}
#pragma pop

extern "C" {
/* 8026DC3C 01F0 .text      cM3d_Cross_CpsSph__FRC8cM3dGCpsRC8cM3dGSphP3Vec              */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_Cross_CpsSph(const cM3dGCps&, const cM3dGSph&, Vec*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_Cross_CpsSph__FRC8cM3dGCpsRC8cM3dGSphP3Vec.s"
}
#pragma pop

extern "C" {
/* 8026DE2C 0300 .text      cM3d_Cross_TriTri__FRC8cM3dGTriRC8cM3dGTriP3Vec              */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_Cross_TriTri(const cM3dGTri&, const cM3dGTri&, Vec*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_Cross_TriTri__FRC8cM3dGTriRC8cM3dGTriP3Vec.s"
}
#pragma pop

extern "C" {
/* 8026E12C 03D0 .text      cM3d_Cross_CpsTri__FRC8cM3dGCps8cM3dGTriP3Vec                */
// cM3d_Cross_CpsTri(const cM3dGCps&, cM3dGTri, Vec*)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_Cross_CpsTri__FRC8cM3dGCps8cM3dGTriP3Vec() {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_Cross_CpsTri__FRC8cM3dGCps8cM3dGTriP3Vec.s"
}
#pragma pop

/* 8026E4FC 0074 .text      cM3d_CalcVecAngle__FRC3VecPsPs                               */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_CalcVecAngle(const Vec&, s16*, s16*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_CalcVecAngle__FRC3VecPsPs.s"
}
#pragma pop

extern "C" {
/* 8026E570 0154 .text      cM3d_CalcVecZAngle__FRC3VecP5csXyz                           */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_CalcVecZAngle(const Vec&, csXyz*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_CalcVecZAngle__FRC3VecP5csXyz.s"
}
#pragma pop

extern "C" {
/* 8026E6C4 002C .text      cM3d_PlaneCrossLineProcWork__FfffffffPfPf                    */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_PlaneCrossLineProcWork(f32, f32, f32, f32, f32, f32, f32, f32*, f32*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_PlaneCrossLineProcWork__FfffffffPfPf.s"
}
#pragma pop

extern "C" {
/* 8026E6F0 01B0 .text      cM3d_2PlaneCrossLine__FRC8cM3dGPlaRC8cM3dGPlaP8cM3dGLin      */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_2PlaneCrossLine(const cM3dGPla&, const cM3dGPla&, cM3dGLin*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_2PlaneCrossLine__FRC8cM3dGPlaRC8cM3dGPlaP8cM3dGLin.s"
}
#pragma pop

extern "C" {
/* 8026E8A0 00E0 .text      cM3d_3PlaneCrossPos__FRC8cM3dGPlaRC8cM3dGPlaRC8cM3dGPlaP3Vec */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_3PlaneCrossPos(const cM3dGPla&, const cM3dGPla&, const cM3dGPla&, Vec*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_3PlaneCrossPos__FRC8cM3dGPlaRC8cM3dGPlaRC8cM3dGPlaP3Vec.s"
}
#pragma pop

extern "C" {
/* 8026E980 00DC .text      cM3d_lineVsPosSuisenCross__FPC8cM3dGLinPC3VecP3Vec           */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_lineVsPosSuisenCross(const cM3dGLin*, const Vec*, Vec*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_lineVsPosSuisenCross__FPC8cM3dGLinPC3VecP3Vec.s"
}
#pragma pop

extern "C" {
/* 8026EA5C 00DC .text      cM3d_lineVsPosSuisenCross__FRC3VecRC3VecRC3VecP3Vec          */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_lineVsPosSuisenCross(const Vec&, const Vec&, const Vec&, Vec*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_lineVsPosSuisenCross__FRC3VecRC3VecRC3VecP3Vec.s"
}
#pragma pop

extern "C" {
/* 8026EB38 0084 .text      cM3d_2PlaneLinePosNearPos__FRC8cM3dGPlaRC8cM3dGPlaPC3VecP3Vec */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_2PlaneLinePosNearPos(const cM3dGPla&, const cM3dGPla&, const Vec*, Vec*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_2PlaneLinePosNearPos__FRC8cM3dGPlaRC8cM3dGPlaPC3VecP3Vec.s"
}
#pragma pop

extern "C" {
/* 8026EBBC 0080 .text      cM3d_CrawVec__FRC3VecRC3VecP3Vec                             */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cM3d_CrawVec(const Vec&, const Vec&, Vec*) {
	nofralloc
#include "_include/SComponent/c_m3d/cM3d_CrawVec__FRC3VecRC3VecP3Vec.s"
}
#pragma pop

extern "C" {
/* 8026EC3C 0018 .text      __sinit_c_m3d_cpp                                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void __sinit_c_m3d_cpp() {
	nofralloc
#include "_include/SComponent/c_m3d/__sinit_c_m3d_cpp.s"
}
#pragma pop

}

