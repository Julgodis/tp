// 
// Generated By: dol2asm
// 

#include "dolphin/types.h"

// 
// Additional Symbols:
// 

struct Vec;

extern void cM3d_InDivPos2(const Vec*, const Vec*, f32, Vec*); /* cM3d_InDivPos2__FPC3VecPC3VecfP3Vec */

extern "C" {
extern void cM3d_InDivPos2__FPC3VecPC3VecfP3Vec();
extern void PSVECNormalize();
extern void PSVECDotProduct();
extern void _savegpr_28();
extern void _restgpr_28();
SECTION_DATA extern const void* __vt__8cM3dGPla[3];
SECTION_SBSS extern u8 G_CM3D_F_ABS_MIN[4];
}


/* ###################################################################################### */
/*                                         .text                                          */
/* ###################################################################################### */

extern "C" {
/* 8026F3DC 002C .text      __ct__8cM3dGPlaFPC4cXyzf                                     */
// cM3dGPla::cM3dGPla(const cXyz*, f32)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void __ct__8cM3dGPlaFPC4cXyzf() {
	nofralloc
#include "_include/SComponent/c_m3d_g_pla/__ct__8cM3dGPlaFPC4cXyzf.s"
}
#pragma pop

/* 8026F408 00BC .text      crossInfLin__8cM3dGPlaCFRC4cXyzRC4cXyzR4cXyz                 */
// cM3dGPla::crossInfLin(const cXyz&, const cXyz&, cXyz&) const
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void crossInfLin__8cM3dGPlaCFRC4cXyzRC4cXyzR4cXyz() {
	nofralloc
#include "_include/SComponent/c_m3d_g_pla/crossInfLin__8cM3dGPlaCFRC4cXyzRC4cXyzR4cXyz.s"
}
#pragma pop

/* 8026F4C4 0068 .text      SetupNP0__8cM3dGPlaFRC3VecRC3Vec                             */
// cM3dGPla::SetupNP0(const Vec&, const Vec&)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void SetupNP0__8cM3dGPlaFRC3VecRC3Vec() {
	nofralloc
#include "_include/SComponent/c_m3d_g_pla/SetupNP0__8cM3dGPlaFRC3VecRC3Vec.s"
}
#pragma pop

/* 8026F52C 0050 .text      SetupNP__8cM3dGPlaFRC3VecRC3Vec                              */
// cM3dGPla::SetupNP(const Vec&, const Vec&)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void SetupNP__8cM3dGPlaFRC3VecRC3Vec() {
	nofralloc
#include "_include/SComponent/c_m3d_g_pla/SetupNP__8cM3dGPlaFRC3VecRC3Vec.s"
}
#pragma pop

/* 8026F57C 0058 .text      getCrossY__8cM3dGPlaCFRC4cXyzPf                              */
// cM3dGPla::getCrossY(const cXyz&, f32*) const
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void getCrossY__8cM3dGPlaCFRC4cXyzPf() {
	nofralloc
#include "_include/SComponent/c_m3d_g_pla/getCrossY__8cM3dGPlaCFRC4cXyzPf.s"
}
#pragma pop

/* 8026F5D4 0050 .text      getCrossYLessD__8cM3dGPlaCFRC3VecPf                          */
// cM3dGPla::getCrossYLessD(const Vec&, f32*) const
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void getCrossYLessD__8cM3dGPlaCFRC3VecPf() {
	nofralloc
#include "_include/SComponent/c_m3d_g_pla/getCrossYLessD__8cM3dGPlaCFRC3VecPf.s"
}
#pragma pop

/* 8026F624 0024 .text      Set__8cM3dGPlaFPC8cM3dGPla                                   */
// cM3dGPla::Set(const cM3dGPla*)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void Set__8cM3dGPlaFPC8cM3dGPla() {
	nofralloc
#include "_include/SComponent/c_m3d_g_pla/Set__8cM3dGPlaFPC8cM3dGPla.s"
}
#pragma pop

}

