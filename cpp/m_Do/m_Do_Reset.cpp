// 
// Generated By: dol2asm
// 

// 
// Compiler Options: -str pool,readonly,reuse
// 

#include "dolphin/types.h"

// 
// Additional Symbols:
// 

extern void destroyVideo(void); /* destroyVideo__Fv */
extern void mDoRst_resetCallBack(int, void*); /* mDoRst_resetCallBack__FiPv */
extern void mDoDvdErr_ThdCleanup(void); /* mDoDvdErr_ThdCleanup__Fv */
extern void cAPICPad_recalibrate(void); /* cAPICPad_recalibrate__Fv */

extern "C" {
extern void OSAttention();
extern void my_OSCancelAlarmAll__Fv();
extern void destroyVideo__Fv();
extern void mDoRst_resetCallBack__FiPv();
extern u32 getResetData__6mDoRstFv();
extern void mDoDvdErr_ThdCleanup__Fv();
extern void cAPICPad_recalibrate__Fv();
extern void pause__13JASTaskThreadFb();
extern u32 getThreadPointer__6JASDvdFv();
extern void hasReset__10Z2AudioMgrCFv();
extern void destroyManager__8JUTVideoFv();
extern void clearIndex__6JUTXfbFv();
extern void LCDisable();
extern void OSDisableInterrupts();
extern void OSRestoreInterrupts();
extern void OSSetSaveRegion();
extern void OSResetSystem();
extern void OSGetCurrentThread();
extern void OSCancelThread();
extern void OSDetachThread();
extern void OSSuspendThread();
extern void DVDGetDriveStatus();
extern void DVDCheckDisk();
extern void VIWaitForRetrace();
extern void VIFlush();
extern void VISetBlack();
extern void GXSetCurrentGXThread();
extern u32 GXGetCurrentGXThread();
extern void GXFlush();
extern void GXAbortFrame();
extern void GXDrawDone();
extern void GXSetDrawDoneCallback();
extern void _savegpr_27();
SECTION_RODATA extern const u8 m_Do_m_Do_Reset__stringBase0[16];
SECTION_BSS extern u8 g_mDoMemCd_control[8192];
SECTION_SBSS extern u8 merged_80450BB8[4];
SECTION_SBSS extern u8 mResetData__6mDoRst[4];
SECTION_SBSS extern u8 mAudioMgrPtr__10Z2AudioMgr[4];
SECTION_SBSS extern u8 sCallback__Q210JUTGamePad13C3ButtonReset[4];
SECTION_SBSS extern u8 sCallbackArg__Q210JUTGamePad13C3ButtonReset[4];
SECTION_SBSS extern u8 merged_80451500[4];
SECTION_SBSS extern u8 sManager__6JUTXfb[4];
}


/* ###################################################################################### */
/*                                        .rodata                                         */
/* ###################################################################################### */

extern "C" {
/* 80374198 0010 .rodata    @stringBase0                                                 */
const char* const stringBase_80374198 = "DVD_STATE_BUSY\n";
}


/* ###################################################################################### */
/*                                         .sbss                                          */
/* ###################################################################################### */

extern "C" {
/* 80450C78 0004 .sbss      mResetData__6mDoRst                                          */
SECTION_SBSS u8 mResetData__6mDoRst[4];
SECTION_SBSS u8 pad_80450C7C[4];
/* 80450C80 0008 .sbss      merged_80450C80                                              */
SECTION_SBSS u8 merged_80450C80[8];
/* 80450C80 0001 data_80450C80 */
/* 80450C81 0007 data_80450C81 */
/* 80450C88 0008 .sbss      data_80450C88                                                */
SECTION_SBSS u8 data_80450C88[8];
}


/* ###################################################################################### */
/*                                         .text                                          */
/* ###################################################################################### */

extern "C" {
/* 800155D8 0004 .text      my_OSCancelAlarmAll__Fv                                      */
// my_OSCancelAlarmAll(void)
void my_OSCancelAlarmAll__Fv() {
	return;
}

/* 800155DC 0038 .text      destroyVideo__Fv                                             */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void destroyVideo(void) {
	nofralloc
#include "_include/m_Do/m_Do_Reset/destroyVideo__Fv.s"
}
#pragma pop

extern "C" {
/* 80015614 0138 .text      mDoRst_reset__FiUli                                          */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void mDoRst_reset(int, u32, int) {
	nofralloc
#include "_include/m_Do/m_Do_Reset/mDoRst_reset__FiUli.s"
}
#pragma pop

extern "C" {
/* 8001574C 00A8 .text      mDoRst_resetCallBack__FiPv                                   */
}

#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void mDoRst_resetCallBack(int, void*) {
	nofralloc
#include "_include/m_Do/m_Do_Reset/mDoRst_resetCallBack__FiPv.s"
}
#pragma pop

extern "C" {
/* 800157F4 0008 .text      getResetData__6mDoRstFv                                      */
// mDoRst::getResetData(void)
u32 getResetData__6mDoRstFv() {
	return *(u32*)&mResetData__6mDoRst;
}

}

