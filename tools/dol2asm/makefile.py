import globals as g
import util
from builder import AsyncBuilder
from pathlib import Path

async def create_library(library):
    assert library.name
    lib_path = library.makefile_path
    cpp_path = library.source_path
    o_path = f"$(BUILD_DIR)/{cpp_path}"

    makefile_path = lib_path.joinpath("Makefile")
    await util.create_dirs_for_file(makefile_path)

    target = library.libname
    prefix = library.libname.replace(".", "_").upper()
    target_path = f"$(BUILD_DIR)/{target}"
    input_file = f"build/{prefix}_ofiles"

    async with AsyncBuilder(makefile_path) as builder:
        await builder.write("#")
        await builder.write("# Generated By: dol2asm")
        await builder.write("#")
        await builder.write("")

        await builder.write(f"{prefix}_CPP_FILES := \\")
        for tu in library.translation_units:
            await builder.write(f"\t{tu.source_path} \\")
        await builder.write("")

        await builder.write(f"{prefix}_O_FILES := \\")
        for tu in library.translation_units:
            # Skip empty translation units
            if len(tu.sections) == 0:
                continue
            if sum([len(x.symbols) for x in tu.sections]) == 0:
                continue
            
            await builder.write(f"\t$(BUILD_DIR)/{tu.object_path} \\")
        await builder.write("")

        await builder.write(f"{prefix}_CFLAGS := \\")
        await builder.write("")

        await builder.write(f"{prefix}_LDFLAGS := \\")
        await builder.write("\t-nodefaults \\")
        await builder.write("\t-fp hard \\")
        await builder.write("\t-proc gekko \\")
        await builder.write("\t-linkmode moreram \\")
        await builder.write("")
        
        await builder.write(f"{target_path}: $({prefix}_O_FILES)")
        await builder.write(f"\t@echo $({prefix}_O_FILES) > {input_file}")
        await builder.write(f"\t$(LD) -xm l $({prefix}_LDFLAGS) -o {target_path} @{input_file}")
        await builder.write(f"\t$(STRIP) -d -R .dead -R .comment {target_path}")
        await builder.write("")

        await builder.write(f"{o_path}/%.o: {cpp_path}/%.cpp")
        await builder.write(f"\t@mkdir -p $(@D)")
        await builder.write(f"\t$(CC) $(CFLAGS) $({prefix}_CFLAGS) -c -o $@ $<")
        await builder.write("")
    
    g.LOG.debug(f"generated Makefile: '{makefile_path}'")

async def create_obj_files(library):
    makefile_path = Path('obj_files.mk')
    async with AsyncBuilder(makefile_path) as builder:
        await builder.write("#")
        await builder.write("# Generated By: dol2asm")
        await builder.write("#")
        await builder.write("")

        await builder.write(f"O_FILES := \\")
        for tu in library.translation_units:
            # Skip empty translation units
            if len(tu.sections) == 0:
                continue
            if sum([len(x.symbols) for x in tu.sections]) == 0:
                continue

            await builder.write(f"\t$(BUILD_DIR)/{tu.object_path} \\")
        await builder.write("")

    g.LOG.debug(f"generated Makefile: '{makefile_path}'")
