
from dataclasses import dataclass, field
from .symbol import *
from ..builder import *

@dataclass(eq=False)
class LinkerGenerated(Symbol):
    async def export_forward_references(self, exporter, builder: AsyncBuilder, c_export: bool = False):
        if not c_export:
            return

        await self.export_section(builder)
        await self.export_extern(builder)
        await builder.write_nonewline(U8.decl(self.identifier.label))
        await builder.write(";")

    async def export_declaration(self, exporter, builder: AsyncBuilder):
        await builder.write(f"/* generated by the linker */")

    @staticmethod
    def create(identifier: Identifier, addr: int, size: int) -> "LinkerGenerated":
        return LinkerGenerated(
            identifier=identifier,
            data_type=U8,
            addr=addr,
            size=size
        )



