// 
// Generated By: dol2asm
// Translation Unit: msg/scrn/d_msg_scrn_place
// 

#include "dolphin/types.h"

// 
// Types:
// 

// build dMsgScrnPlace_c (['dMsgScrnPlace_c']) False/False
/* top-level dependencies (begin ['dMsgScrnPlace_c']) */
/* top-level dependencies (end ['dMsgScrnPlace_c']) */
struct dMsgScrnPlace_c {
	/* 802463CC */ dMsgScrnPlace_c();
	/* 802467C4 */ ~dMsgScrnPlace_c();
	/* 80246924 */ void exec();
	/* 80246A44 */ void drawSelf();
	/* 80246A9C */ void fukiAlpha(f32);
	/* 80246B28 */ void fukiScale(f32);
	/* 80246B2C */ void fukiTrans(f32, f32);
	/* 80246B30 */ void fontAlpha(f32);
};

// build dMsgScrnBase_c (['dMsgScrnBase_c']) False/False
/* top-level dependencies (begin ['dMsgScrnBase_c']) */
/* top-level dependencies (end ['dMsgScrnBase_c']) */
struct dMsgScrnBase_c {
	/* 80238C40 */ void setSelectRubyString(char*, char*, char*);
	/* 80238C44 */ void setSelectString(char*, char*, char*);
	/* 80238C48 */ bool selectAnimeMove(u8, u8, bool);
	/* 80238C50 */ void selectAnimeInit(u8, u8, f32, u8);
	/* 80238C54 */ void arwAnimeMove();
	/* 80238C58 */ void arwAnimeInit();
	/* 80238C5C */ void fukiPosCalc(u8);
	/* 80238C60 */ bool isSelect();
	/* 80238C68 */ bool selectAnimeEnd();
	/* 80238C70 */ void dotAnimeMove();
	/* 80238C74 */ void dotAnimeInit();
	/* 8023C0DC */ dMsgScrnBase_c();
	/* 8023C124 */ ~dMsgScrnBase_c();
	/* 8023C16C */ void init();
	/* 8023C234 */ void multiDraw();
	/* 8023C274 */ void draw();
	/* 8023C32C */ void drawOutFont(f32, f32, f32);
	/* 8023C574 */ void isTalkNow();
};

// build CPaneMgr (['CPaneMgr']) False/False
// build J2DScreen (['J2DScreen']) False/False
// build JKRArchive (['JKRArchive']) False/False
/* top-level dependencies (begin ['JKRArchive']) */
/* top-level dependencies (end ['JKRArchive']) */
struct JKRArchive {
};

/* top-level dependencies (begin ['J2DScreen']) */
// outer dependency: ('JKRArchive',)
/* top-level dependencies (end ['J2DScreen']) */
struct J2DScreen {
	// ('JKRArchive',)
	/* 802F8498 */ J2DScreen();
	/* 802F8648 */ void setPriority(char const*, u32, JKRArchive*);
};

// build JKRExpHeap (['JKRExpHeap']) False/False
/* top-level dependencies (begin ['JKRExpHeap']) */
/* top-level dependencies (end ['JKRExpHeap']) */
struct JKRExpHeap {
};

/* top-level dependencies (begin ['CPaneMgr']) */
// outer dependency: ('J2DScreen',)
// outer dependency: ('JKRExpHeap',)
/* top-level dependencies (end ['CPaneMgr']) */
struct CPaneMgr {
	// ('J2DScreen',)
	// ('JKRExpHeap',)
	/* 80253984 */ CPaneMgr(J2DScreen*, u64, u8, JKRExpHeap*);
	/* 802542E8 */ void getGlobalPosX();
	/* 80254364 */ void getGlobalPosY();
	/* 802545B0 */ void paneTrans(f32, f32);
};

// build J2DScreen (['J2DScreen']) True/True
// build JKRExpHeap (['JKRExpHeap']) True/True
// build CPaneMgrAlpha (['CPaneMgrAlpha']) False/False
/* top-level dependencies (begin ['CPaneMgrAlpha']) */
/* top-level dependencies (end ['CPaneMgrAlpha']) */
struct CPaneMgrAlpha {
	/* 802557D0 */ void setAlphaRate(f32);
};

// build JKRArchive (['JKRArchive']) True/True
// build J2DTextBox (['J2DTextBox']) False/False
/* top-level dependencies (begin ['J2DTextBox']) */
/* top-level dependencies (end ['J2DTextBox']) */
struct J2DTextBox {
	/* 8030074C */ void setString(s16, char const*, ...);
};

// 
// Forward References:
// 


extern "C" void __ct__15dMsgScrnPlace_cFv();
extern "C" void __dt__15dMsgScrnPlace_cFv();
extern "C" void exec__15dMsgScrnPlace_cFv();
extern "C" void drawSelf__15dMsgScrnPlace_cFv();
extern "C" void fukiAlpha__15dMsgScrnPlace_cFf();
extern "C" void fukiScale__15dMsgScrnPlace_cFf();
extern "C" void fukiTrans__15dMsgScrnPlace_cFff();
extern "C" void fontAlpha__15dMsgScrnPlace_cFf();
SECTION_RODATA extern const u8 msg_scrn_d_msg_scrn_place__stringBase0[32];
SECTION_DATA extern u8 data_803C12B0[56];
SECTION_DATA extern void*const __vt__15dMsgScrnPlace_c[22];
SECTION_SDATA2 extern u8 lit_3998[4];
SECTION_SDATA2 extern f32 lit_3999;
SECTION_SDATA2 extern f32 msg_scrn_d_msg_scrn_place__lit_4000;

// 
// External References:
// 

void mDoExt_getRubyFont();
void dCam_getBody();
void dPaneClass_showNullPane(J2DScreen*);
void* operator new(u32);
void operator delete(void*);
extern "C" void _savegpr_26();
extern "C" void _savegpr_29();
extern "C" void _restgpr_26();
extern "C" void _restgpr_29();

extern "C" void mDoExt_getRubyFont__Fv();
extern "C" void dCam_getBody__Fv();
extern "C" void setSelectRubyString__14dMsgScrnBase_cFPcPcPc();
extern "C" void setSelectString__14dMsgScrnBase_cFPcPcPc();
extern "C" bool selectAnimeMove__14dMsgScrnBase_cFUcUcb();
extern "C" void selectAnimeInit__14dMsgScrnBase_cFUcUcfUc();
extern "C" void arwAnimeMove__14dMsgScrnBase_cFv();
extern "C" void arwAnimeInit__14dMsgScrnBase_cFv();
extern "C" void fukiPosCalc__14dMsgScrnBase_cFUc();
extern "C" bool isSelect__14dMsgScrnBase_cFv();
extern "C" bool selectAnimeEnd__14dMsgScrnBase_cFv();
extern "C" void dotAnimeMove__14dMsgScrnBase_cFv();
extern "C" void dotAnimeInit__14dMsgScrnBase_cFv();
extern "C" void __ct__14dMsgScrnBase_cFv();
extern "C" void __dt__14dMsgScrnBase_cFv();
extern "C" void init__14dMsgScrnBase_cFv();
extern "C" void multiDraw__14dMsgScrnBase_cFv();
extern "C" void draw__14dMsgScrnBase_cFv();
extern "C" void drawOutFont__14dMsgScrnBase_cFfff();
extern "C" void isTalkNow__14dMsgScrnBase_cFv();
extern "C" void __ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap();
extern "C" void getGlobalPosX__8CPaneMgrFv();
extern "C" void getGlobalPosY__8CPaneMgrFv();
extern "C" void paneTrans__8CPaneMgrFff();
extern "C" void dPaneClass_showNullPane__FP9J2DScreen();
extern "C" void setAlphaRate__13CPaneMgrAlphaFf();
extern "C" void* __nw__FUl();
extern "C" void __dl__FPv();
extern "C" void __ct__9J2DScreenFv();
extern "C" void setPriority__9J2DScreenFPCcUlP10JKRArchive();
extern "C" void setString__10J2DTextBoxFsPCce();
extern "C" void _savegpr_26();
extern "C" void _savegpr_29();
extern "C" void _restgpr_26();
extern "C" void _restgpr_29();
SECTION_BSS extern u8 g_dComIfG_gameInfo[122384];
SECTION_BSS extern u8 g_MsgObject_HIO_c[1040];

// 
// Declarations:
// 

/* ############################################################################################## */
/* 80399B78-80399B98 001F+01 rc=1 efc=0 .rodata    @stringBase0                                                 */
#pragma push
#pragma force_active on
#pragma section ".dead"
SECTION_DEAD char* const stringBase_80399B78 = "zelda_stage_title_foreign.blo";
SECTION_DEAD char* const stringBase_80399B96 = "";
/* @stringBase0 padding */
SECTION_DEAD char* const pad_80399B97 = "";
#pragma pop

/* 803C12B0-803C12E8 0038+00 rc=1 efc=0 .data      t_tag$3877                                                   */
u8 data_803C12B0[56] = {
	0x00, 0x73, 0x66, 0x6F, 0x6E, 0x74, 0x62, 0x30, 0x00, 0x73, 0x66, 0x6F, 0x6E, 0x74, 0x62, 0x31,
	0x00, 0x73, 0x66, 0x6F, 0x6E, 0x74, 0x62, 0x32, 0x00, 0x73, 0x66, 0x6F, 0x6E, 0x74, 0x6C, 0x30,
	0x00, 0x73, 0x66, 0x6F, 0x6E, 0x74, 0x6C, 0x31, 0x00, 0x73, 0x66, 0x6F, 0x6E, 0x74, 0x6C, 0x32,
	0x00, 0x73, 0x66, 0x6F, 0x6E, 0x74, 0x30, 0x30,
};

/* 803C12E8-803C1340 0058+00 rc=2 efc=0 .data      __vt__15dMsgScrnPlace_c                                      */
void* const __vt__15dMsgScrnPlace_c[22] = {
	NULL, /* RTTI */
	NULL,
	(void*)draw__14dMsgScrnBase_cFv,
	(void*)__dt__15dMsgScrnPlace_cFv,
	(void*)exec__15dMsgScrnPlace_cFv,
	(void*)multiDraw__14dMsgScrnBase_cFv,
	(void*)drawSelf__15dMsgScrnPlace_cFv,
	(void*)setSelectString__14dMsgScrnBase_cFPcPcPc,
	(void*)setSelectRubyString__14dMsgScrnBase_cFPcPcPc,
	(void*)arwAnimeInit__14dMsgScrnBase_cFv,
	(void*)arwAnimeMove__14dMsgScrnBase_cFv,
	(void*)dotAnimeInit__14dMsgScrnBase_cFv,
	(void*)dotAnimeMove__14dMsgScrnBase_cFv,
	(void*)isSelect__14dMsgScrnBase_cFv,
	(void*)selectAnimeInit__14dMsgScrnBase_cFUcUcfUc,
	(void*)selectAnimeMove__14dMsgScrnBase_cFUcUcb,
	(void*)selectAnimeEnd__14dMsgScrnBase_cFv,
	(void*)fukiScale__15dMsgScrnPlace_cFf,
	(void*)fukiTrans__15dMsgScrnPlace_cFff,
	(void*)fukiAlpha__15dMsgScrnPlace_cFf,
	(void*)fontAlpha__15dMsgScrnPlace_cFf,
	(void*)fukiPosCalc__14dMsgScrnBase_cFUc,
};

/* 80454CE8-80454CEC 0004+00 rc=2 efc=0 .sdata2    @3998                                                        */
u8 lit_3998[4] = {
	0x00, 0x00, 0x00, 0x00,
};

/* 80454CEC-80454CF0 0004+00 rc=3 efc=0 .sdata2    @3999                                                        */
f32 lit_3999 = 1.0f;

/* 80454CF0-80454CF8 0004+04 rc=1 efc=0 .sdata2    @4000                                                        */
f32 msg_scrn_d_msg_scrn_place__lit_4000 = 6.0f / 5.0f;
/* padding 4 bytes */

/* 802463CC-802467C4 03F8+00 rc=1 efc=1 .text      __ct__15dMsgScrnPlace_cFv                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm dMsgScrnPlace_c::dMsgScrnPlace_c() {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_place/__ct__15dMsgScrnPlace_cFv.s"
}
#pragma pop


/* 802467C4-80246924 0160+00 rc=1 efc=0 .text      __dt__15dMsgScrnPlace_cFv                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm dMsgScrnPlace_c::~dMsgScrnPlace_c() {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_place/__dt__15dMsgScrnPlace_cFv.s"
}
#pragma pop


/* 80246924-80246A44 0120+00 rc=1 efc=0 .text      exec__15dMsgScrnPlace_cFv                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMsgScrnPlace_c::exec() {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_place/exec__15dMsgScrnPlace_cFv.s"
}
#pragma pop


/* 80246A44-80246A9C 0058+00 rc=1 efc=0 .text      drawSelf__15dMsgScrnPlace_cFv                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMsgScrnPlace_c::drawSelf() {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_place/drawSelf__15dMsgScrnPlace_cFv.s"
}
#pragma pop


/* 80246A9C-80246B28 008C+00 rc=1 efc=0 .text      fukiAlpha__15dMsgScrnPlace_cFf                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMsgScrnPlace_c::fukiAlpha(f32 field_0) {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_place/fukiAlpha__15dMsgScrnPlace_cFf.s"
}
#pragma pop


/* 80246B28-80246B2C 0004+00 rc=1 efc=0 .text      fukiScale__15dMsgScrnPlace_cFf                               */
void dMsgScrnPlace_c::fukiScale(f32 field_0) {
	/* empty function */
}


/* 80246B2C-80246B30 0004+00 rc=1 efc=0 .text      fukiTrans__15dMsgScrnPlace_cFff                              */
void dMsgScrnPlace_c::fukiTrans(f32 field_0, f32 field_1) {
	/* empty function */
}


/* 80246B30-80246B34 0004+00 rc=1 efc=0 .text      fontAlpha__15dMsgScrnPlace_cFf                               */
void dMsgScrnPlace_c::fontAlpha(f32 field_0) {
	/* empty function */
}


