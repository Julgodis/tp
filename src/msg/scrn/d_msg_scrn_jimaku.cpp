// 
// Generated By: dol2asm
// Translation Unit: msg/scrn/d_msg_scrn_jimaku
// 

#include "dolphin/types.h"

// 
// Types:
// 

struct JKRExpHeap {
};

struct dMsgScrnJimaku_c {
	/* 80244558 */ dMsgScrnJimaku_c(u8, JKRExpHeap*);
	/* 80244A74 */ ~dMsgScrnJimaku_c();
	/* 80244C2C */ void exec();
	/* 80244D34 */ void drawSelf();
	/* 80244D8C */ void fukiAlpha(f32);
	/* 80244E2C */ void fukiScale(f32);
	/* 80244E30 */ void fukiTrans(f32, f32);
	/* 80244E34 */ void fontAlpha(f32);
};

struct dMsgScrnBase_c {
	/* 80238C40 */ void setSelectRubyString(char*, char*, char*);
	/* 80238C44 */ void setSelectString(char*, char*, char*);
	/* 80238C48 */ bool selectAnimeMove(u8, u8, bool);
	/* 80238C50 */ void selectAnimeInit(u8, u8, f32, u8);
	/* 80238C54 */ void arwAnimeMove();
	/* 80238C58 */ void arwAnimeInit();
	/* 80238C5C */ void fukiPosCalc(u8);
	/* 80238C60 */ bool isSelect();
	/* 80238C68 */ bool selectAnimeEnd();
	/* 80238C70 */ void dotAnimeMove();
	/* 80238C74 */ void dotAnimeInit();
	/* 8023C0DC */ dMsgScrnBase_c();
	/* 8023C124 */ ~dMsgScrnBase_c();
	/* 8023C16C */ void init();
	/* 8023C234 */ void multiDraw();
	/* 8023C274 */ void draw();
	/* 8023C32C */ void drawOutFont(f32, f32, f32);
	/* 8023C574 */ void isTalkNow();
};

struct dMsgScrnLight_c {
	/* 80245934 */ dMsgScrnLight_c(u8, u8);
};

struct JKRArchive {
};

struct J2DScreen {
	/* 802F8498 */ J2DScreen();
	/* 802F8648 */ void setPriority(char const*, u32, JKRArchive*);
};

struct JUtility {
	struct TColor {
	};

};

struct CPaneMgr {
	/* 80253984 */ CPaneMgr(J2DScreen*, u64, u8, JKRExpHeap*);
	/* 802542E8 */ void getGlobalPosX();
	/* 80254364 */ void getGlobalPosY();
	/* 80254458 */ void setBlackWhite(JUtility::TColor, JUtility::TColor);
	/* 802545B0 */ void paneTrans(f32, f32);
};

struct CPaneMgrAlpha {
	/* 802557D0 */ void setAlphaRate(f32);
};

struct JKRHeap {
	/* 802CE4D4 */ void alloc(u32, int);
	/* 802CE548 */ void free(void*);
};

struct J2DTextBox {
	/* 8030074C */ void setString(s16, char const*, ...);
};

// 
// Forward References:
// 


extern "C" void __ct__16dMsgScrnJimaku_cFUcP10JKRExpHeap(); // 1
extern "C" void __dt__16dMsgScrnJimaku_cFv(); // 1
extern "C" void exec__16dMsgScrnJimaku_cFv(); // 1
extern "C" void drawSelf__16dMsgScrnJimaku_cFv(); // 1
extern "C" void fukiAlpha__16dMsgScrnJimaku_cFf(); // 1
extern "C" void fukiScale__16dMsgScrnJimaku_cFf(); // 1
extern "C" void fukiTrans__16dMsgScrnJimaku_cFff(); // 1
extern "C" void fontAlpha__16dMsgScrnJimaku_cFf(); // 1
SECTION_RODATA extern const u8 msg_scrn_d_msg_scrn_jimaku__stringBase0[32];
SECTION_DATA extern void*const __vt__16dMsgScrnJimaku_c[22];
SECTION_SDATA2 extern u8 msg_scrn_d_msg_scrn_jimaku__lit_3941[4];
SECTION_SDATA2 extern f32 msg_scrn_d_msg_scrn_jimaku__lit_3942;
SECTION_SDATA2 extern f32 msg_scrn_d_msg_scrn_jimaku__lit_4021;

// 
// External References:
// 

SECTION_INIT void memset(); // 1
void mDoExt_getMesgFont(); // 2
void dComIfGp_getSubHeap2D(int); // 2
void dPaneClass_showNullPane(J2DScreen*); // 2
void* operator new(u32); // 2
void operator delete(void*); // 2
extern "C" void _savegpr_23(); // 1
extern "C" void _savegpr_24(); // 1
extern "C" void _savegpr_27(); // 1
extern "C" void _savegpr_28(); // 1
extern "C" void _restgpr_23(); // 1
extern "C" void _restgpr_24(); // 1
extern "C" void _restgpr_27(); // 1
extern "C" void _restgpr_28(); // 1

SECTION_INIT void memset(); // 1
extern "C" void mDoExt_getMesgFont__Fv(); // 1
extern "C" void dComIfGp_getSubHeap2D__Fi(); // 1
extern "C" void setSelectRubyString__14dMsgScrnBase_cFPcPcPc(); // 1
extern "C" void setSelectString__14dMsgScrnBase_cFPcPcPc(); // 1
extern "C" bool selectAnimeMove__14dMsgScrnBase_cFUcUcb(); // 1
extern "C" void selectAnimeInit__14dMsgScrnBase_cFUcUcfUc(); // 1
extern "C" void arwAnimeMove__14dMsgScrnBase_cFv(); // 1
extern "C" void arwAnimeInit__14dMsgScrnBase_cFv(); // 1
extern "C" void fukiPosCalc__14dMsgScrnBase_cFUc(); // 1
extern "C" bool isSelect__14dMsgScrnBase_cFv(); // 1
extern "C" bool selectAnimeEnd__14dMsgScrnBase_cFv(); // 1
extern "C" void dotAnimeMove__14dMsgScrnBase_cFv(); // 1
extern "C" void dotAnimeInit__14dMsgScrnBase_cFv(); // 1
extern "C" void __ct__14dMsgScrnBase_cFv(); // 1
extern "C" void __dt__14dMsgScrnBase_cFv(); // 1
extern "C" void init__14dMsgScrnBase_cFv(); // 1
extern "C" void multiDraw__14dMsgScrnBase_cFv(); // 1
extern "C" void draw__14dMsgScrnBase_cFv(); // 1
extern "C" void drawOutFont__14dMsgScrnBase_cFfff(); // 1
extern "C" void isTalkNow__14dMsgScrnBase_cFv(); // 1
extern "C" void __ct__15dMsgScrnLight_cFUcUc(); // 1
extern "C" void __ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap(); // 1
extern "C" void getGlobalPosX__8CPaneMgrFv(); // 1
extern "C" void getGlobalPosY__8CPaneMgrFv(); // 1
extern "C" void setBlackWhite__8CPaneMgrFQ28JUtility6TColorQ28JUtility6TColor(); // 1
extern "C" void paneTrans__8CPaneMgrFff(); // 1
extern "C" void dPaneClass_showNullPane__FP9J2DScreen(); // 1
extern "C" void setAlphaRate__13CPaneMgrAlphaFf(); // 1
extern "C" void alloc__7JKRHeapFUli(); // 1
extern "C" void free__7JKRHeapFPv(); // 1
extern "C" void* __nw__FUl(); // 1
extern "C" void __dl__FPv(); // 1
extern "C" void __ct__9J2DScreenFv(); // 1
extern "C" void setPriority__9J2DScreenFPCcUlP10JKRArchive(); // 1
extern "C" void setString__10J2DTextBoxFsPCce(); // 1
extern "C" void _savegpr_23(); // 1
extern "C" void _savegpr_24(); // 1
extern "C" void _savegpr_27(); // 1
extern "C" void _savegpr_28(); // 1
extern "C" void _restgpr_23(); // 1
extern "C" void _restgpr_24(); // 1
extern "C" void _restgpr_27(); // 1
extern "C" void _restgpr_28(); // 1
SECTION_BSS extern u8 g_dComIfG_gameInfo[122384];
SECTION_BSS extern u8 g_MsgObject_HIO_c[1040];

// 
// Declarations:
// 

/* ############################################################################################## */
/* 80399A80-80399AA0 001F+01 rc=1 efc=0 .rodata    @stringBase0                                                 */
#pragma push
#pragma force_active on
#pragma section ".dead"
SECTION_DEAD char* const stringBase_80399A80 = "zelda_jimaku_message_text.blo";
SECTION_DEAD char* const stringBase_80399A9E = "";
/* @stringBase0 padding */
SECTION_DEAD char* const pad_80399A9F = "";
#pragma pop

/* 803C11E8-803C1240 0058+00 rc=2 efc=0 .data      __vt__16dMsgScrnJimaku_c                                     */
void* const __vt__16dMsgScrnJimaku_c[22] = {
	NULL, /* RTTI */
	NULL,
	(void*)draw__14dMsgScrnBase_cFv,
	(void*)__dt__16dMsgScrnJimaku_cFv,
	(void*)exec__16dMsgScrnJimaku_cFv,
	(void*)multiDraw__14dMsgScrnBase_cFv,
	(void*)drawSelf__16dMsgScrnJimaku_cFv,
	(void*)setSelectString__14dMsgScrnBase_cFPcPcPc,
	(void*)setSelectRubyString__14dMsgScrnBase_cFPcPcPc,
	(void*)arwAnimeInit__14dMsgScrnBase_cFv,
	(void*)arwAnimeMove__14dMsgScrnBase_cFv,
	(void*)dotAnimeInit__14dMsgScrnBase_cFv,
	(void*)dotAnimeMove__14dMsgScrnBase_cFv,
	(void*)isSelect__14dMsgScrnBase_cFv,
	(void*)selectAnimeInit__14dMsgScrnBase_cFUcUcfUc,
	(void*)selectAnimeMove__14dMsgScrnBase_cFUcUcb,
	(void*)selectAnimeEnd__14dMsgScrnBase_cFv,
	(void*)fukiScale__16dMsgScrnJimaku_cFf,
	(void*)fukiTrans__16dMsgScrnJimaku_cFff,
	(void*)fukiAlpha__16dMsgScrnJimaku_cFf,
	(void*)fontAlpha__16dMsgScrnJimaku_cFf,
	(void*)fukiPosCalc__14dMsgScrnBase_cFUc,
};

/* 80454CB0-80454CB4 0004+00 rc=2 efc=0 .sdata2    @3941                                                        */
u8 msg_scrn_d_msg_scrn_jimaku__lit_3941[4] = {
	0x00, 0x00, 0x00, 0x00,
};

/* 80454CB4-80454CB8 0004+00 rc=1 efc=0 .sdata2    @3942                                                        */
f32 msg_scrn_d_msg_scrn_jimaku__lit_3942 = 6.0f / 5.0f;

/* 80244558-80244A74 051C+00 rc=1 efc=1 .text      __ct__16dMsgScrnJimaku_cFUcP10JKRExpHeap                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm dMsgScrnJimaku_c::dMsgScrnJimaku_c(u8 field_0, JKRExpHeap* field_1) {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_jimaku/__ct__16dMsgScrnJimaku_cFUcP10JKRExpHeap.s"
}
#pragma pop


/* 80244A74-80244C2C 01B8+00 rc=1 efc=0 .text      __dt__16dMsgScrnJimaku_cFv                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm dMsgScrnJimaku_c::~dMsgScrnJimaku_c() {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_jimaku/__dt__16dMsgScrnJimaku_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80454CB8-80454CC0 0004+04 rc=2 efc=0 .sdata2    @4021                                                        */
f32 msg_scrn_d_msg_scrn_jimaku__lit_4021 = 1.0f;
/* padding 4 bytes */

/* 80244C2C-80244D34 0108+00 rc=1 efc=0 .text      exec__16dMsgScrnJimaku_cFv                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMsgScrnJimaku_c::exec() {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_jimaku/exec__16dMsgScrnJimaku_cFv.s"
}
#pragma pop


/* 80244D34-80244D8C 0058+00 rc=1 efc=0 .text      drawSelf__16dMsgScrnJimaku_cFv                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMsgScrnJimaku_c::drawSelf() {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_jimaku/drawSelf__16dMsgScrnJimaku_cFv.s"
}
#pragma pop


/* 80244D8C-80244E2C 00A0+00 rc=1 efc=0 .text      fukiAlpha__16dMsgScrnJimaku_cFf                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMsgScrnJimaku_c::fukiAlpha(f32 field_0) {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_jimaku/fukiAlpha__16dMsgScrnJimaku_cFf.s"
}
#pragma pop


/* 80244E2C-80244E30 0004+00 rc=1 efc=0 .text      fukiScale__16dMsgScrnJimaku_cFf                              */
void dMsgScrnJimaku_c::fukiScale(f32 field_0) {
	/* empty function */
}


/* 80244E30-80244E34 0004+00 rc=1 efc=0 .text      fukiTrans__16dMsgScrnJimaku_cFff                             */
void dMsgScrnJimaku_c::fukiTrans(f32 field_0, f32 field_1) {
	/* empty function */
}


/* 80244E34-80244E38 0004+00 rc=1 efc=0 .text      fontAlpha__16dMsgScrnJimaku_cFf                              */
void dMsgScrnJimaku_c::fontAlpha(f32 field_0) {
	/* empty function */
}


