// 
// Generated By: dol2asm
// Translation Unit: d/pane/d_pane_class
// 

#include "dolphin/types.h"

// 
// Types:
// 

// build CPaneMgr (CPaneMgr) False/False
// build J2DScreen (J2DScreen) False/False
// build JSURandomInputStream (JSURandomInputStream) False/False
/* top-level dependencies (begin JSURandomInputStream) */
/* top-level dependencies (end JSURandomInputStream) */
struct JSURandomInputStream {
	/* 80255328 */ ~JSURandomInputStream();
};

// build JKRArchive (JKRArchive) False/False
/* top-level dependencies (begin JKRArchive) */
/* top-level dependencies (end JKRArchive) */
struct JKRArchive {
};

/* top-level dependencies (begin J2DScreen) */
// outer dependency: JSURandomInputStream
// outer dependency: JKRArchive
/* top-level dependencies (end J2DScreen) */
struct J2DScreen {
	// JSURandomInputStream
	// JKRArchive
	/* 802F8748 */ void setPriority(JSURandomInputStream*, u32, JKRArchive*);
};

// build JKRExpHeap (JKRExpHeap) False/False
/* top-level dependencies (begin JKRExpHeap) */
/* top-level dependencies (end JKRExpHeap) */
struct JKRExpHeap {
};

// build JUtility (JUtility) False/False
/* top-level dependencies (begin JUtility) */
/* top-level dependencies (end JUtility) */
struct JUtility {
	// build TColor (JUtility::TColor) False/False
	/* dependencies (begin JUtility::TColor) */
	/* dependencies (end JUtility::TColor) */
	struct TColor {
	};

};

// build J2DPane (J2DPane) False/False
// build J2DRotateAxis (J2DRotateAxis) False/False
/* top-level dependencies (begin J2DRotateAxis) */
/* top-level dependencies (end J2DRotateAxis) */
struct J2DRotateAxis {
};

/* top-level dependencies (begin J2DPane) */
// outer dependency: J2DRotateAxis
/* top-level dependencies (end J2DPane) */
struct J2DPane {
	// J2DRotateAxis
	/* 802F7100 */ void getBounds();
	/* 802F71DC */ void rotate(f32, f32, J2DRotateAxis, f32);
	/* 802F7A8C */ void getFirstChildPane();
	/* 802F7AC4 */ void getNextChildPane();
	/* 802F7AFC */ void getParentPane();
};

/* top-level dependencies (begin CPaneMgr) */
// outer dependency: J2DScreen
// outer dependency: JKRExpHeap
// outer dependency: JUtility::TColor
// outer dependency: J2DPane
/* top-level dependencies (end CPaneMgr) */
struct CPaneMgr {
	// J2DScreen
	// JKRExpHeap
	// JUtility::TColor
	// J2DPane
	/* 80253930 */ CPaneMgr();
	/* 80253984 */ CPaneMgr(J2DScreen*, u64, char, JKRExpHeap*);
	/* 80253A18 */ ~CPaneMgr();
	/* 80253AB4 */ void setAlpha(char);
	/* 80253B2C */ void reinit();
	/* 80253C08 */ void initiate(J2DPane*, JKRExpHeap*);
	/* 80254018 */ void childPaneGetSize(J2DPane*);
	/* 80254134 */ void childPaneSetSize(J2DPane*, f32, f32);
	/* 802542E8 */ void getGlobalPosX();
	/* 80254364 */ void getGlobalPosY();
	/* 80254458 */ void setBlackWhite(JUtility::TColor, JUtility::TColor);
	/* 802545B0 */ void paneTrans(f32, f32);
	/* 80254638 */ void paneScale(f32, f32);
	/* 802547CC */ void scaleAnime(s16, f32, f32, char);
	/* 802548BC */ void colorAnime(s16, JUtility::TColor, JUtility::TColor, JUtility::TColor, JUtility::TColor, char);
	/* 80254EBC */ void getGlobalVtxCenter(J2DPane*, bool, s16);
	/* 80254FB8 */ void getBounds(J2DPane*);
};

// build J2DScreen (J2DScreen) True/True
// build JKRExpHeap (JKRExpHeap) True/True
// build J2DPane (J2DPane) True/True
// build J2DWindow (J2DWindow) False/False
// build JUtility (JUtility) True/True
/* top-level dependencies (begin J2DWindow) */
// outer dependency: JUtility::TColor
/* top-level dependencies (end J2DWindow) */
struct J2DWindow {
	// JUtility::TColor
	/* 80254000 */ void getBlack() const;
	/* 8025400C */ void getWhite() const;
	/* 802543E0 */ void setWhite(JUtility::TColor);
	/* 80254430 */ void setBlack(JUtility::TColor);
	/* 80254568 */ void setBlackWhite(JUtility::TColor, JUtility::TColor);
};

// build JUtility (JUtility) True/True
// build J2DTextBox (J2DTextBox) False/False
// build JUtility (JUtility) True/True
/* top-level dependencies (begin J2DTextBox) */
// outer dependency: JUtility::TColor
/* top-level dependencies (end J2DTextBox) */
struct J2DTextBox {
	// JUtility::TColor
	/* 80254408 */ void setBlack(JUtility::TColor);
};

// build JKRHeap (JKRHeap) False/False
/* top-level dependencies (begin JKRHeap) */
/* top-level dependencies (end JKRHeap) */
struct JKRHeap {
	/* 802CE4D4 */ void alloc(u32, s32);
	/* 802CE548 */ void free(void*);
};

// build JKRArchive (JKRArchive) True/True
// build JSUMemoryInputStream (JSUMemoryInputStream) False/False
/* top-level dependencies (begin JSUMemoryInputStream) */
/* top-level dependencies (end JSUMemoryInputStream) */
struct JSUMemoryInputStream {
	/* 802552B8 */ ~JSUMemoryInputStream();
	/* 802DC520 */ void setBuffer(void const*, s32);
};

// build JSURandomInputStream (JSURandomInputStream) True/True
// build JSUIosBase (JSUIosBase) False/False
/* top-level dependencies (begin JSUIosBase) */
/* top-level dependencies (end JSUIosBase) */
struct JSUIosBase {
	/* 80255388 */ ~JSUIosBase();
};

// build JKRAramArchive (JKRAramArchive) False/False
/* top-level dependencies (begin JKRAramArchive) */
/* top-level dependencies (end JKRAramArchive) */
struct JKRAramArchive {
};

// build CPaneMgrAlpha (CPaneMgrAlpha) False/False
// build J2DPane (J2DPane) True/True
/* top-level dependencies (begin CPaneMgrAlpha) */
// outer dependency: J2DPane
/* top-level dependencies (end CPaneMgrAlpha) */
struct CPaneMgrAlpha {
	// J2DPane
	/* 802553EC */ CPaneMgrAlpha();
	/* 8025546C */ ~CPaneMgrAlpha();
	/* 80255658 */ void rateCalc(s16, s16, char);
	/* 80255A60 */ void childPaneCount(J2DPane*);
	/* 80255ACC */ void childPaneGetAlpha(J2DPane*);
	/* 80255B5C */ void childPaneSetAlpha(J2DPane*, char);
};

// build JSUInputStream (JSUInputStream) False/False
/* top-level dependencies (begin JSUInputStream) */
/* top-level dependencies (end JSUInputStream) */
struct JSUInputStream {
	/* 802DC23C */ ~JSUInputStream();
};

// build J2DOrthoGraph (J2DOrthoGraph) False/False
/* top-level dependencies (begin J2DOrthoGraph) */
/* top-level dependencies (end J2DOrthoGraph) */
struct J2DOrthoGraph {
	/* 802E96D0 */ J2DOrthoGraph(f32, f32, f32, f32, f32, f32);
};

// build J2DRotateAxis (J2DRotateAxis) True/True
// 
// Forward References:
// 

extern "C" void getGlobalVtx__8CPaneMgrFP7J2DPanePA3_A4_fUcbs();
void dPaneClass_showNullPane(J2DScreen*);
static void dPaneClass_showNullPane(J2DPane*);
void dPaneClass_setPriority(void**, JKRHeap*, J2DScreen*, char const*, u32, JKRArchive*);
extern "C" void __sinit_d_pane_class_cpp();

extern "C" void __ct__8CPaneMgrFv();
extern "C" void __ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap();
extern "C" void __dt__8CPaneMgrFv();
extern "C" void setAlpha__8CPaneMgrFUc();
extern "C" void reinit__8CPaneMgrFv();
extern "C" void initiate__8CPaneMgrFP7J2DPaneP10JKRExpHeap();
extern "C" void getBlack__9J2DWindowCFv();
extern "C" void getWhite__9J2DWindowCFv();
extern "C" void childPaneGetSize__8CPaneMgrFP7J2DPane();
extern "C" void childPaneSetSize__8CPaneMgrFP7J2DPaneff();
extern "C" void getGlobalPosX__8CPaneMgrFv();
extern "C" void getGlobalPosY__8CPaneMgrFv();
extern "C" void setWhite__9J2DWindowFQ28JUtility6TColor();
extern "C" void setBlack__10J2DTextBoxFQ28JUtility6TColor();
extern "C" void setBlack__9J2DWindowFQ28JUtility6TColor();
extern "C" void setBlackWhite__8CPaneMgrFQ28JUtility6TColorQ28JUtility6TColor();
extern "C" void setBlackWhite__9J2DWindowFQ28JUtility6TColorQ28JUtility6TColor();
extern "C" void paneTrans__8CPaneMgrFff();
extern "C" void paneScale__8CPaneMgrFff();
extern "C" void scaleAnime__8CPaneMgrFsffUc();
extern "C" void colorAnime__8CPaneMgrFsQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorUc();
extern "C" void getGlobalVtx__8CPaneMgrFP7J2DPanePA3_A4_fUcbs();
extern "C" void getGlobalVtxCenter__8CPaneMgrFP7J2DPanebs();
extern "C" void getBounds__8CPaneMgrFP7J2DPane();
extern "C" void dPaneClass_showNullPane__FP9J2DScreen();
extern "C" static void dPaneClass_showNullPane__FP7J2DPane();
extern "C" void dPaneClass_setPriority__FPPvP7JKRHeapP9J2DScreenPCcUlP10JKRArchive();
extern "C" void __dt__20JSUMemoryInputStreamFv();
extern "C" void __dt__20JSURandomInputStreamFv();
extern "C" void __dt__10JSUIosBaseFv();
extern "C" void __sinit_d_pane_class_cpp();
SECTION_DATA extern void*const __vt__10JSUIosBase[3];
SECTION_DATA extern void*const __vt__8CPaneMgr[5];
SECTION_BSS extern u8 static_mBounds[16];
SECTION_SDATA2 extern u8 d_pane_d_pane_class__lit_3858[4 + 4 /* padding */];
SECTION_SDATA2 extern f64 d_pane_d_pane_class__lit_3860;
SECTION_SDATA2 extern f32 d_pane_d_pane_class__lit_4046;
SECTION_SDATA2 extern f64 d_pane_d_pane_class__lit_4349;
SECTION_SDATA2 extern f32 d_pane_d_pane_class__lit_4473;
SECTION_SDATA2 extern f32 d_pane_d_pane_class__lit_4474;
SECTION_SDATA2 extern f32 d_pane_d_pane_class__lit_4475;
SECTION_SDATA2 extern f32 d_pane_d_pane_class__lit_4476;

// 
// External References:
// 

void mDoExt_getCurrentHeap();
void dLib_getExpandSizeFromAramArchive(JKRAramArchive*, char const*);
void operator delete(void*);
extern "C" void func_802E980C();
extern "C" void PSMTXCopy();
extern "C" void PSMTXConcat();
extern "C" void _savegpr_24();
extern "C" void _savegpr_25();
extern "C" void _savegpr_26();
extern "C" void _savegpr_27();
extern "C" void _savegpr_28();
extern "C" void _savegpr_29();
extern "C" void _restgpr_24();
extern "C" void _restgpr_25();
extern "C" void _restgpr_26();
extern "C" void _restgpr_27();
extern "C" void _restgpr_28();
extern "C" void _restgpr_29();

extern "C" void mDoExt_getCurrentHeap__Fv();
extern "C" void dLib_getExpandSizeFromAramArchive__FP14JKRAramArchivePCc();
extern "C" void __ct__13CPaneMgrAlphaFv();
extern "C" void __dt__13CPaneMgrAlphaFv();
extern "C" void rateCalc__13CPaneMgrAlphaFssUc();
extern "C" void childPaneCount__13CPaneMgrAlphaFP7J2DPane();
extern "C" void childPaneGetAlpha__13CPaneMgrAlphaFP7J2DPane();
extern "C" void childPaneSetAlpha__13CPaneMgrAlphaFP7J2DPaneUc();
extern "C" void alloc__7JKRHeapFUli();
extern "C" void free__7JKRHeapFPv();
extern "C" void __dl__FPv();
extern "C" void __dt__14JSUInputStreamFv();
extern "C" void setBuffer__20JSUMemoryInputStreamFPCvl();
extern "C" void __ct__13J2DOrthoGraphFffffff();
extern "C" void func_802E980C();
extern "C" void getBounds__7J2DPaneFv();
extern "C" void rotate__7J2DPaneFff13J2DRotateAxisf();
extern "C" void getFirstChildPane__7J2DPaneFv();
extern "C" void getNextChildPane__7J2DPaneFv();
extern "C" void getParentPane__7J2DPaneFv();
extern "C" void setPriority__9J2DScreenFP20JSURandomInputStreamUlP10JKRArchive();
extern "C" void PSMTXCopy();
extern "C" void PSMTXConcat();
extern "C" void _savegpr_24();
extern "C" void _savegpr_25();
extern "C" void _savegpr_26();
extern "C" void _savegpr_27();
extern "C" void _savegpr_28();
extern "C" void _savegpr_29();
extern "C" void _restgpr_24();
extern "C" void _restgpr_25();
extern "C" void _restgpr_26();
extern "C" void _restgpr_27();
extern "C" void _restgpr_28();
extern "C" void _restgpr_29();
SECTION_DATA extern void*const __vt__20JSURandomInputStream[9];
SECTION_DATA extern void*const __vt__14JSUInputStream[7];
SECTION_DATA extern void*const __vt__20JSUMemoryInputStream[10];
SECTION_DATA extern void*const __vt__14J2DGrafContext[10];
SECTION_DATA extern void*const __vt__13J2DOrthoGraph[10];

// 
// Declarations:
// 

/* ############################################################################################## */
/* 803C2DF8-803C2E04 000C+00 rc=6 efc=4 .data      __vt__10JSUIosBase                                           */
void* const __vt__10JSUIosBase[3] = {
	NULL, /* RTTI */
	NULL,
	(void*)__dt__10JSUIosBaseFv,
};

/* 803C2E04-803C2E18 0010+04 rc=3 efc=0 .data      __vt__8CPaneMgr                                              */
void* const __vt__8CPaneMgr[5] = {
	NULL, /* RTTI */
	NULL,
	(void*)__dt__8CPaneMgrFv,
	(void*)setAlpha__8CPaneMgrFUc,
	/* padding */
	NULL,
};

/* 80253930-80253984 0054+00 rc=11 efc=11 .text      __ct__8CPaneMgrFv                                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm CPaneMgr::CPaneMgr() {
	nofralloc
#include "asm/d/pane/d_pane_class/__ct__8CPaneMgrFv.s"
}
#pragma pop


/* 80253984-80253A18 0094+00 rc=58 efc=58 .text      __ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm CPaneMgr::CPaneMgr(J2DScreen* field_0, u64 field_1, char field_2, JKRExpHeap* field_3) {
	nofralloc
#include "asm/d/pane/d_pane_class/__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap.s"
}
#pragma pop


/* 80253A18-80253AB4 009C+00 rc=12 efc=11 .text      __dt__8CPaneMgrFv                                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm CPaneMgr::~CPaneMgr() {
	nofralloc
#include "asm/d/pane/d_pane_class/__dt__8CPaneMgrFv.s"
}
#pragma pop


/* 80253AB4-80253B2C 0078+00 rc=1 efc=0 .text      setAlpha__8CPaneMgrFUc                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void CPaneMgr::setAlpha(char field_0) {
	nofralloc
#include "asm/d/pane/d_pane_class/setAlpha__8CPaneMgrFUc.s"
}
#pragma pop


/* 80253B2C-80253C08 00DC+00 rc=3 efc=3 .text      reinit__8CPaneMgrFv                                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void CPaneMgr::reinit() {
	nofralloc
#include "asm/d/pane/d_pane_class/reinit__8CPaneMgrFv.s"
}
#pragma pop


/* 80253C08-80254000 03F8+00 rc=1 efc=0 .text      initiate__8CPaneMgrFP7J2DPaneP10JKRExpHeap                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void CPaneMgr::initiate(J2DPane* field_0, JKRExpHeap* field_1) {
	nofralloc
#include "asm/d/pane/d_pane_class/initiate__8CPaneMgrFP7J2DPaneP10JKRExpHeap.s"
}
#pragma pop


/* 80254000-8025400C 000C+00 rc=1 efc=1 .text      getBlack__9J2DWindowCFv                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DWindow::getBlack() const {
	nofralloc
#include "asm/d/pane/d_pane_class/getBlack__9J2DWindowCFv.s"
}
#pragma pop


/* 8025400C-80254018 000C+00 rc=1 efc=1 .text      getWhite__9J2DWindowCFv                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DWindow::getWhite() const {
	nofralloc
#include "asm/d/pane/d_pane_class/getWhite__9J2DWindowCFv.s"
}
#pragma pop


/* 80254018-80254134 011C+00 rc=1 efc=0 .text      childPaneGetSize__8CPaneMgrFP7J2DPane                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void CPaneMgr::childPaneGetSize(J2DPane* field_0) {
	nofralloc
#include "asm/d/pane/d_pane_class/childPaneGetSize__8CPaneMgrFP7J2DPane.s"
}
#pragma pop


/* ############################################################################################## */
/* 80454E88-80454E90 0004+04 rc=4 efc=0 .sdata2    @3858                                                        */
u8 d_pane_d_pane_class__lit_3858[8] = {
	0x00, 0x00, 0x00, 0x00,
	/* padding */
	0x00, 0x00, 0x00, 0x00,
};

/* 80454E90-80454E98 0008+00 rc=2 efc=0 .sdata2    @3860                                                        */
f64 d_pane_d_pane_class__lit_3860 = 4503601774854144.0 /* cast s32 to float */;

/* 80254134-802542E8 01B4+00 rc=1 efc=0 .text      childPaneSetSize__8CPaneMgrFP7J2DPaneff                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void CPaneMgr::childPaneSetSize(J2DPane* field_0, f32 field_1, f32 field_2) {
	nofralloc
#include "asm/d/pane/d_pane_class/childPaneSetSize__8CPaneMgrFP7J2DPaneff.s"
}
#pragma pop


/* 802542E8-80254364 007C+00 rc=20 efc=18 .text      getGlobalPosX__8CPaneMgrFv                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void CPaneMgr::getGlobalPosX() {
	nofralloc
#include "asm/d/pane/d_pane_class/getGlobalPosX__8CPaneMgrFv.s"
}
#pragma pop


/* 80254364-802543E0 007C+00 rc=17 efc=15 .text      getGlobalPosY__8CPaneMgrFv                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void CPaneMgr::getGlobalPosY() {
	nofralloc
#include "asm/d/pane/d_pane_class/getGlobalPosY__8CPaneMgrFv.s"
}
#pragma pop


/* 802543E0-80254408 0028+00 rc=1 efc=1 .text      setWhite__9J2DWindowFQ28JUtility6TColor                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DWindow::setWhite(JUtility::TColor field_0) {
	nofralloc
#include "asm/d/pane/d_pane_class/setWhite__9J2DWindowFQ28JUtility6TColor.s"
}
#pragma pop


/* 80254408-80254430 0028+00 rc=1 efc=1 .text      setBlack__10J2DTextBoxFQ28JUtility6TColor                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTextBox::setBlack(JUtility::TColor field_0) {
	nofralloc
#include "asm/d/pane/d_pane_class/setBlack__10J2DTextBoxFQ28JUtility6TColor.s"
}
#pragma pop


/* 80254430-80254458 0028+00 rc=1 efc=1 .text      setBlack__9J2DWindowFQ28JUtility6TColor                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DWindow::setBlack(JUtility::TColor field_0) {
	nofralloc
#include "asm/d/pane/d_pane_class/setBlack__9J2DWindowFQ28JUtility6TColor.s"
}
#pragma pop


/* 80254458-80254568 0110+00 rc=8 efc=7 .text      setBlackWhite__8CPaneMgrFQ28JUtility6TColorQ28JUtility6TColor */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void CPaneMgr::setBlackWhite(JUtility::TColor field_0, JUtility::TColor field_1) {
	nofralloc
#include "asm/d/pane/d_pane_class/setBlackWhite__8CPaneMgrFQ28JUtility6TColorQ28JUtility6TColor.s"
}
#pragma pop


/* 80254568-802545B0 0048+00 rc=1 efc=1 .text      setBlackWhite__9J2DWindowFQ28JUtility6TColorQ28JUtility6TColor */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DWindow::setBlackWhite(JUtility::TColor field_0, JUtility::TColor field_1) {
	nofralloc
#include "asm/d/pane/d_pane_class/setBlackWhite__9J2DWindowFQ28JUtility6TColorQ28JUtility6TColor.s"
}
#pragma pop


/* ############################################################################################## */
/* 80454E98-80454EA0 0004+04 rc=3 efc=0 .sdata2    @4046                                                        */
f32 d_pane_d_pane_class__lit_4046 = 0.5f;
/* padding 4 bytes */

/* 802545B0-80254638 0088+00 rc=51 efc=51 .text      paneTrans__8CPaneMgrFff                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void CPaneMgr::paneTrans(f32 field_0, f32 field_1) {
	nofralloc
#include "asm/d/pane/d_pane_class/paneTrans__8CPaneMgrFff.s"
}
#pragma pop


/* 80254638-802547CC 0194+00 rc=5 efc=5 .text      paneScale__8CPaneMgrFff                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void CPaneMgr::paneScale(f32 field_0, f32 field_1) {
	nofralloc
#include "asm/d/pane/d_pane_class/paneScale__8CPaneMgrFff.s"
}
#pragma pop


/* 802547CC-802548BC 00F0+00 rc=10 efc=10 .text      scaleAnime__8CPaneMgrFsffUc                                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void CPaneMgr::scaleAnime(s16 field_0, f32 field_1, f32 field_2, char field_3) {
	nofralloc
#include "asm/d/pane/d_pane_class/scaleAnime__8CPaneMgrFsffUc.s"
}
#pragma pop


/* ############################################################################################## */
/* 80454EA0-80454EA8 0008+00 rc=1 efc=0 .sdata2    @4349                                                        */
f64 d_pane_d_pane_class__lit_4349 = 4503599627370496.0 /* cast u32 to float */;

/* 802548BC-80254C90 03D4+00 rc=4 efc=4 .text      colorAnime__8CPaneMgrFsQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorUc */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void CPaneMgr::colorAnime(s16 field_0, JUtility::TColor field_1, JUtility::TColor field_2, JUtility::TColor field_3, JUtility::TColor field_4, char field_5) {
	nofralloc
#include "asm/d/pane/d_pane_class/func_802548BC.s"
}
#pragma pop


/* ############################################################################################## */
/* 80454EA8-80454EAC 0004+00 rc=1 efc=0 .sdata2    @4473                                                        */
f32 d_pane_d_pane_class__lit_4473 = 608.0f;

/* 80454EAC-80454EB0 0004+00 rc=1 efc=0 .sdata2    @4474                                                        */
f32 d_pane_d_pane_class__lit_4474 = 448.0f;

/* 80454EB0-80454EB4 0004+00 rc=1 efc=0 .sdata2    @4475                                                        */
f32 d_pane_d_pane_class__lit_4475 = -1.0f;

/* 80454EB4-80454EB8 0004+00 rc=1 efc=0 .sdata2    @4476                                                        */
f32 d_pane_d_pane_class__lit_4476 = 1.0f;

/* 80254C90-80254EBC 022C+00 rc=10 efc=9 .text      getGlobalVtx__8CPaneMgrFP7J2DPanePA3_A4_fUcbs                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void getGlobalVtx__8CPaneMgrFP7J2DPanePA3_A4_fUcbs() {
	nofralloc
#include "asm/d/pane/d_pane_class/getGlobalVtx__8CPaneMgrFP7J2DPanePA3_A4_fUcbs.s"
}
#pragma pop


/* 80254EBC-80254FB8 00FC+00 rc=56 efc=56 .text      getGlobalVtxCenter__8CPaneMgrFP7J2DPanebs                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void CPaneMgr::getGlobalVtxCenter(J2DPane* field_0, bool field_1, s16 field_2) {
	nofralloc
#include "asm/d/pane/d_pane_class/getGlobalVtxCenter__8CPaneMgrFP7J2DPanebs.s"
}
#pragma pop


/* ############################################################################################## */
/* 80430748-80430758 0010+00 rc=2 efc=0 .bss       static_mBounds                                               */
u8 static_mBounds[16];

/* 80254FB8-802550E8 0130+00 rc=1 efc=0 .text      getBounds__8CPaneMgrFP7J2DPane                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void CPaneMgr::getBounds(J2DPane* field_0) {
	nofralloc
#include "asm/d/pane/d_pane_class/getBounds__8CPaneMgrFP7J2DPane.s"
}
#pragma pop


/* 802550E8-8025512C 0044+00 rc=54 efc=54 .text      dPaneClass_showNullPane__FP9J2DScreen                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dPaneClass_showNullPane(J2DScreen* field_0) {
	nofralloc
#include "asm/d/pane/d_pane_class/dPaneClass_showNullPane__FP9J2DScreen.s"
}
#pragma pop


/* 8025512C-80255184 0058+00 rc=1 efc=0 .text      dPaneClass_showNullPane__FP7J2DPane                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm static void dPaneClass_showNullPane(J2DPane* field_0) {
	nofralloc
#include "asm/d/pane/d_pane_class/dPaneClass_showNullPane__FP7J2DPane.s"
}
#pragma pop


/* 80255184-802552B8 0134+00 rc=1 efc=1 .text      dPaneClass_setPriority__FPPvP7JKRHeapP9J2DScreenPCcUlP10JKRArchive */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dPaneClass_setPriority(void** field_0, JKRHeap* field_1, J2DScreen* field_2, char const* field_3, u32 field_4, JKRArchive* field_5) {
	nofralloc
#include "asm/d/pane/d_pane_class/dPaneClass_setPriority__FPPvP7JKRHeapP9J2DScreenPCcUlP10JKRArchive.s"
}
#pragma pop


/* 802552B8-80255328 0070+00 rc=1 efc=1 .text      __dt__20JSUMemoryInputStreamFv                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm JSUMemoryInputStream::~JSUMemoryInputStream() {
	nofralloc
#include "asm/d/pane/d_pane_class/__dt__20JSUMemoryInputStreamFv.s"
}
#pragma pop


/* 80255328-80255388 0060+00 rc=1 efc=1 .text      __dt__20JSURandomInputStreamFv                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm JSURandomInputStream::~JSURandomInputStream() {
	nofralloc
#include "asm/d/pane/d_pane_class/__dt__20JSURandomInputStreamFv.s"
}
#pragma pop


/* 80255388-802553D0 0048+00 rc=1 efc=0 .text      __dt__10JSUIosBaseFv                                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm JSUIosBase::~JSUIosBase() {
	nofralloc
#include "asm/d/pane/d_pane_class/__dt__10JSUIosBaseFv.s"
}
#pragma pop


/* 802553D0-802553EC 001C+00 rc=1 efc=1 .text      __sinit_d_pane_class_cpp                                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void __sinit_d_pane_class_cpp() {
	nofralloc
#include "asm/d/pane/d_pane_class/__sinit_d_pane_class_cpp.s"
}
#pragma pop


