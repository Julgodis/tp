//
// Generated By: dol2asm
// Translation Unit: d/d_jnt_col
//

#include "d/d_jnt_col.h"
#include "dol2asm.h"
#include "dolphin/types.h"

//
// Types:
//

struct Vec {};

struct cXyz {
    /* 80266AE4 */ void operator+(Vec const&) const;
    /* 80266B34 */ void operator-(Vec const&) const;
    /* 80266B84 */ void operator*(f32) const;
    /* 80266C18 */ void operator/(f32) const;
    /* 80266F48 */ void normalizeZP();
    /* 80267128 */ void atan2sX_Z() const;
    /* 80267150 */ void atan2sY_XZ() const;
};

struct csXyz {};

struct mDoMtx_stack_c {
    /* 8000CD64 */ void transS(cXyz const&);
    /* 8000CD9C */ void transM(f32, f32, f32);
    /* 8000CF0C */ void ZXYrotS(csXyz const&);
};

struct fopAc_ac_c {};

struct dJntColData_c {};

struct J3DModel {};

struct cM3dGLin {
    /* 80036A5C */ ~cM3dGLin();
    /* 8026F2E8 */ void SetStartEnd(cXyz const&, cXyz const&);
};

struct dJntCol_c {
    /* 80035C8C */ dJntCol_c();
    /* 80035CA0 */ void init(fopAc_ac_c*, dJntColData_c const*, J3DModel*, int);
    /* 80035CC8 */ void setNowLine(cM3dGLin*, cXyz const*, csXyz const*, cXyz*);
    /* 80035DC8 */ void searchNearPos(cM3dGLin const*, cXyz const*, cXyz*, int) const;
    /* 80036AEC */ void getArrowOffsetPosAndAngle(cXyz const*, csXyz const*, cXyz*, cXyz*) const;
    /* 80036C44 */ void getHitmarkPosAndAngle(cXyz const*, csXyz const*, cXyz*, csXyz*, int) const;
    /* 80036FA8 */ void setArrowPosAndAngle(cXyz const*, cXyz const*, int, cXyz*, csXyz*);
};

struct cM3dGSph {
    /* 80036AA4 */ ~cM3dGSph();
    /* 8026F664 */ void Set(cXyz const&, f32);
};

struct cM3dGPla {
    /* 8026F408 */ void crossInfLin(cXyz const&, cXyz const&, cXyz&) const;
    /* 8026F4C4 */ void SetupNP0(Vec const&, Vec const&);
};

struct cM3dGCyl {
    /* 8026F180 */ void Set(cXyz const&, f32, f32);
};

//
// Forward References:
//

extern "C" extern void* __vt__8cM3dGLin[3];
extern "C" extern void* __vt__8cM3dGSph[3];

extern "C" void __ct__9dJntCol_cFv();
extern "C" void init__9dJntCol_cFP10fopAc_ac_cPC13dJntColData_cP8J3DModeli();
extern "C" void setNowLine__9dJntCol_cFP8cM3dGLinPC4cXyzPC5csXyzP4cXyz();
extern "C" void searchNearPos__9dJntCol_cCFPC8cM3dGLinPC4cXyzP4cXyzi();
extern "C" void __dt__8cM3dGLinFv();
extern "C" void __dt__8cM3dGSphFv();
extern "C" void getArrowOffsetPosAndAngle__9dJntCol_cCFPC4cXyzPC5csXyzP4cXyzP4cXyz();
extern "C" void getHitmarkPosAndAngle__9dJntCol_cCFPC4cXyzPC5csXyzP4cXyzP5csXyzi();
extern "C" void setArrowPosAndAngle__9dJntCol_cFPC4cXyzPC4cXyziP4cXyzP5csXyz();
extern "C" extern void* __vt__8cM3dGLin[3];
extern "C" extern void* __vt__8cM3dGSph[3];

//
// External References:
//

void mDoMtx_XrotM(f32 (*)[4], s16);
void mDoMtx_YrotM(f32 (*)[4], s16);
void cM_atan2s(f32, f32);
void cM3d_SignedLenPlaAndPos(cM3dGPla const*, Vec const*);
void cM3d_Cross_LinPla(cM3dGLin const*, cM3dGPla const*, Vec*, bool, bool);
void cM3d_Cross_LinSph_CrossPos(cM3dGSph const&, cM3dGLin const&, Vec*, Vec*);
void cM3d_Cross_CylLin(cM3dGCyl const*, cM3dGLin const*, Vec*, Vec*);
void cM3d_lineVsPosSuisenCross(cM3dGLin const*, Vec const*, Vec*);
void cM3d_lineVsPosSuisenCross(Vec const&, Vec const&, Vec const&, Vec*);
void operator delete(void*);
extern "C" extern void* __vt__8cM3dGPla[3];
extern "C" extern void* __vt__8cM3dGCyl[3];
extern "C" extern u8 now__14mDoMtx_stack_c[48];
extern "C" extern u8 BaseZ__4cXyz[12];
extern "C" extern u32 __float_nan;
extern "C" extern u32 __float_max;

extern "C" void mDoMtx_XrotM__FPA4_fs();
extern "C" void mDoMtx_YrotM__FPA4_fs();
extern "C" void transS__14mDoMtx_stack_cFRC4cXyz();
extern "C" void transM__14mDoMtx_stack_cFfff();
extern "C" void ZXYrotS__14mDoMtx_stack_cFRC5csXyz();
extern "C" void __pl__4cXyzCFRC3Vec();
extern "C" void __mi__4cXyzCFRC3Vec();
extern "C" void __ml__4cXyzCFf();
extern "C" void __dv__4cXyzCFf();
extern "C" void normalizeZP__4cXyzFv();
extern "C" void atan2sX_Z__4cXyzCFv();
extern "C" void atan2sY_XZ__4cXyzCFv();
extern "C" void cM_atan2s__Fff();
extern "C" void cM3d_SignedLenPlaAndPos__FPC8cM3dGPlaPC3Vec();
extern "C" void cM3d_Cross_LinPla__FPC8cM3dGLinPC8cM3dGPlaP3Vecbb();
extern "C" void cM3d_Cross_LinSph_CrossPos__FRC8cM3dGSphRC8cM3dGLinP3VecP3Vec();
extern "C" void cM3d_Cross_CylLin__FPC8cM3dGCylPC8cM3dGLinP3VecP3Vec();
extern "C" void cM3d_lineVsPosSuisenCross__FPC8cM3dGLinPC3VecP3Vec();
extern "C" void cM3d_lineVsPosSuisenCross__FRC3VecRC3VecRC3VecP3Vec();
extern "C" void Set__8cM3dGCylFRC4cXyzff();
extern "C" void SetStartEnd__8cM3dGLinFRC4cXyzRC4cXyz();
extern "C" void crossInfLin__8cM3dGPlaCFRC4cXyzRC4cXyzR4cXyz();
extern "C" void SetupNP0__8cM3dGPlaFRC3VecRC3Vec();
extern "C" void Set__8cM3dGSphFRC4cXyzf();
extern "C" void __dl__FPv();
extern "C" void PSMTXCopy();
extern "C" void PSMTXInverse();
extern "C" void PSMTXMultVec();
extern "C" void PSMTXMultVecSR();
extern "C" void PSVECSquareMag();
extern "C" void PSVECDotProduct();
extern "C" void PSVECSquareDistance();
extern "C" void _savegpr_19();
extern "C" void _savegpr_27();
extern "C" void _savegpr_28();
extern "C" void _savegpr_29();
extern "C" void _restgpr_19();
extern "C" void _restgpr_27();
extern "C" void _restgpr_28();
extern "C" void _restgpr_29();
extern "C" extern void* __vt__8cM3dGPla[3];
extern "C" extern void* __vt__8cM3dGCyl[3];
extern "C" extern u8 now__14mDoMtx_stack_c[48];
extern "C" extern u8 BaseZ__4cXyz[12];
extern "C" extern u32 __float_nan;
extern "C" extern u32 __float_max;

//
// Declarations:
//

/* 80035C8C-80035CA0 0014+00 s=0 e=1 z=8  None .text      __ct__9dJntCol_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm dJntCol_c::dJntCol_c() {
    nofralloc
#include "asm/d/d_jnt_col/__ct__9dJntCol_cFv.s"
}
#pragma pop

/* 80035CA0-80035CC8 0028+00 s=0 e=2 z=8  None .text
 * init__9dJntCol_cFP10fopAc_ac_cPC13dJntColData_cP8J3DModeli   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dJntCol_c::init(fopAc_ac_c* param_0, dJntColData_c const* param_1, J3DModel* param_2,
                         int param_3) {
    nofralloc
#include "asm/d/d_jnt_col/init__9dJntCol_cFP10fopAc_ac_cPC13dJntColData_cP8J3DModeli.s"
}
#pragma pop

/* ############################################################################################## */
/* 80451D60-80451D64 0004+00 s=1 e=0 z=0  None .sdata2    @3655 */
SECTION_SDATA2 static u32 lit_3655 = 0x43FA0000;

/* 80035CC8-80035DC8 0100+00 s=2 e=0 z=0  None .text
 * setNowLine__9dJntCol_cFP8cM3dGLinPC4cXyzPC5csXyzP4cXyz       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dJntCol_c::setNowLine(cM3dGLin* param_0, cXyz const* param_1, csXyz const* param_2,
                               cXyz* param_3) {
    nofralloc
#include "asm/d/d_jnt_col/setNowLine__9dJntCol_cFP8cM3dGLinPC4cXyzPC5csXyzP4cXyz.s"
}
#pragma pop

/* ############################################################################################## */
/* 803A78F8-803A7904 000C+00 s=4 e=21 z=0  None .data      __vt__8cM3dGLin */
SECTION_DATA void* __vt__8cM3dGLin[3] = {
    (void*)NULL,
    (void*)NULL,
    (void*)__dt__8cM3dGLinFv,
};

/* 803A7904-803A7910 000C+00 s=2 e=10 z=0  None .data      __vt__8cM3dGSph */
SECTION_DATA void* __vt__8cM3dGSph[3] = {
    (void*)NULL,
    (void*)NULL,
    (void*)__dt__8cM3dGSphFv,
};

/* 80451D64-80451D68 0004+00 s=1 e=0 z=0  None .sdata2    @4141 */
SECTION_SDATA2 static u32 lit_4141 = 0xCB189680;

/* 80451D68-80451D70 0004+04 s=2 e=0 z=0  None .sdata2    @4142 */
SECTION_SDATA2 static u8 lit_4142[4 + 4 /* padding */] = {
    0x00,
    0x00,
    0x00,
    0x00,
    /* padding */
    0x00,
    0x00,
    0x00,
    0x00,
};

/* 80451D70-80451D78 0008+00 s=2 e=0 z=0  None .sdata2    @4143 */
SECTION_SDATA2 static u8 lit_4143[8] = {
    0x3F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 80451D78-80451D80 0008+00 s=2 e=0 z=0  None .sdata2    @4144 */
SECTION_SDATA2 static u8 lit_4144[8] = {
    0x40, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 80451D80-80451D88 0008+00 s=2 e=0 z=0  None .sdata2    @4145 */
SECTION_SDATA2 static u8 lit_4145[8] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 80451D88-80451D8C 0004+00 s=1 e=0 z=0  None .sdata2    @4146 */
SECTION_SDATA2 static u32 lit_4146 = 0x3C23D70A;

/* 80451D8C-80451D90 0004+00 s=2 e=0 z=0  None .sdata2    @4147 */
SECTION_SDATA2 static u32 lit_4147 = 0x38D1B717;

/* 80451D90-80451D94 0004+00 s=1 e=0 z=0  None .sdata2    @4148 */
SECTION_SDATA2 static u32 lit_4148 = 0x3F000000;

/* 80451D94-80451D98 0004+00 s=1 e=0 z=0  None .sdata2    @4149 */
SECTION_SDATA2 static u32 lit_4149 = 0x3F800000;

/* 80035DC8-80036A5C 0C94+00 s=2 e=0 z=0  None .text
 * searchNearPos__9dJntCol_cCFPC8cM3dGLinPC4cXyzP4cXyzi         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dJntCol_c::searchNearPos(cM3dGLin const* param_0, cXyz const* param_1, cXyz* param_2,
                                  int param_3) const {
    nofralloc
#include "asm/d/d_jnt_col/searchNearPos__9dJntCol_cCFPC8cM3dGLinPC4cXyzP4cXyzi.s"
}
#pragma pop

/* 80036A5C-80036AA4 0048+00 s=1 e=3 z=0  None .text      __dt__8cM3dGLinFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm cM3dGLin::~cM3dGLin() {
    nofralloc
#include "asm/d/d_jnt_col/__dt__8cM3dGLinFv.s"
}
#pragma pop

/* 80036AA4-80036AEC 0048+00 s=1 e=0 z=0  None .text      __dt__8cM3dGSphFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm cM3dGSph::~cM3dGSph() {
    nofralloc
#include "asm/d/d_jnt_col/__dt__8cM3dGSphFv.s"
}
#pragma pop

/* 80036AEC-80036C44 0158+00 s=0 e=0 z=1  None .text
 * getArrowOffsetPosAndAngle__9dJntCol_cCFPC4cXyzPC5csXyzP4cXyzP4cXyz */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dJntCol_c::getArrowOffsetPosAndAngle(cXyz const* param_0, csXyz const* param_1,
                                              cXyz* param_2, cXyz* param_3) const {
    nofralloc
#include "asm/d/d_jnt_col/getArrowOffsetPosAndAngle__9dJntCol_cCFPC4cXyzPC5csXyzP4cXyzP4cXyz.s"
}
#pragma pop

/* 80036C44-80036FA8 0364+00 s=0 e=3 z=0  None .text
 * getHitmarkPosAndAngle__9dJntCol_cCFPC4cXyzPC5csXyzP4cXyzP5csXyzi */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dJntCol_c::getHitmarkPosAndAngle(cXyz const* param_0, csXyz const* param_1, cXyz* param_2,
                                          csXyz* param_3, int param_4) const {
    nofralloc
#include "asm/d/d_jnt_col/getHitmarkPosAndAngle__9dJntCol_cCFPC4cXyzPC5csXyzP4cXyzP5csXyzi.s"
}
#pragma pop

/* 80036FA8-80037038 0090+00 s=0 e=0 z=1  None .text
 * setArrowPosAndAngle__9dJntCol_cFPC4cXyzPC4cXyziP4cXyzP5csXyz */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dJntCol_c::setArrowPosAndAngle(cXyz const* param_0, cXyz const* param_1, int param_2,
                                        cXyz* param_3, csXyz* param_4) {
    nofralloc
#include "asm/d/d_jnt_col/setArrowPosAndAngle__9dJntCol_cFPC4cXyzPC4cXyziP4cXyzP5csXyz.s"
}
#pragma pop
