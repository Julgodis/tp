// 
// Generated By: dol2asm
// Translation Unit: d/ovlp/d_ovlp_fade2
// 

#include "dolphin/types.h"

// 
// Types:
// 

// build dOvlpFd2_dlst_c (['dOvlpFd2_dlst_c']) False/False
/* top-level dependencies (begin ['dOvlpFd2_dlst_c']) */
/* top-level dependencies (end ['dOvlpFd2_dlst_c']) */
struct dOvlpFd2_dlst_c {
	/* 8025247C */ void draw();
	/* 80252E8C */ ~dOvlpFd2_dlst_c();
};

// build dOvlpFd2_c (['dOvlpFd2_c']) False/False
/* top-level dependencies (begin ['dOvlpFd2_c']) */
/* top-level dependencies (end ['dOvlpFd2_c']) */
struct dOvlpFd2_c {
	/* 80252990 */ dOvlpFd2_c();
	/* 802529F4 */ void execFirstSnap();
	/* 80252A78 */ void execFadeOut();
	/* 80252BC0 */ void execNextSnap();
	/* 80252C68 */ void execFadeIn();
};

// build mDoMtx_stack_c (['mDoMtx_stack_c']) False/False
/* top-level dependencies (begin ['mDoMtx_stack_c']) */
/* top-level dependencies (end ['mDoMtx_stack_c']) */
struct mDoMtx_stack_c {
	/* 8000CE38 */ void scaleM(f32, f32, f32);
};

// build overlap_task_class (['overlap_task_class']) False/False
/* top-level dependencies (begin ['overlap_task_class']) */
/* top-level dependencies (end ['overlap_task_class']) */
struct overlap_task_class {
};

// build dDlst_list_c (['dDlst_list_c']) False/False
// build dDlst_base_c (['dDlst_base_c']) False/False
/* top-level dependencies (begin ['dDlst_base_c']) */
/* top-level dependencies (end ['dDlst_base_c']) */
struct dDlst_base_c {
};

/* top-level dependencies (begin ['dDlst_list_c']) */
// outer dependency: ('dDlst_base_c',)
/* top-level dependencies (end ['dDlst_list_c']) */
struct dDlst_list_c {
	// ('dDlst_base_c',)
	/* 80056794 */ void set(dDlst_base_c**&, dDlst_base_c**&, dDlst_base_c*);
};

// build dDlst_base_c (['dDlst_base_c']) True/True
// 
// Forward References:
// 

static void dOvlpFd2_Draw(dOvlpFd2_c*);
static void dOvlpFd2_Execute(dOvlpFd2_c*);
static bool dOvlpFd2_IsDelete(dOvlpFd2_c*);
static bool dOvlpFd2_Delete(dOvlpFd2_c*);
static void dOvlpFd2_Create(void*);
extern "C" void func_80252E70();

extern "C" void draw__15dOvlpFd2_dlst_cFv();
extern "C" void __ct__10dOvlpFd2_cFv();
extern "C" void execFirstSnap__10dOvlpFd2_cFv();
extern "C" void execFadeOut__10dOvlpFd2_cFv();
extern "C" void execNextSnap__10dOvlpFd2_cFv();
extern "C" void execFadeIn__10dOvlpFd2_cFv();
extern "C" static void dOvlpFd2_Draw__FP10dOvlpFd2_c();
extern "C" static void dOvlpFd2_Execute__FP10dOvlpFd2_c();
extern "C" static bool dOvlpFd2_IsDelete__FP10dOvlpFd2_c();
extern "C" static bool dOvlpFd2_Delete__FP10dOvlpFd2_c();
extern "C" static void dOvlpFd2_Create__FPv();
extern "C" void func_80252E70();
extern "C" void __dt__15dOvlpFd2_dlst_cFv();
SECTION_DATA extern void*d_ovlp_d_ovlp_fade2__lit_3695[3];
SECTION_DATA extern void*d_ovlp_d_ovlp_fade2__lit_3721[3];
SECTION_DATA extern void*d_ovlp_d_ovlp_fade2__lit_3736[3];
SECTION_DATA extern void*d_ovlp_d_ovlp_fade2__lit_3765[3];
SECTION_DATA extern void*l_dOvlpFd2_Method[5];
SECTION_DATA extern void*g_profile_OVERLAP2[10];
SECTION_DATA extern void*const __vt__15dOvlpFd2_dlst_c[5];
SECTION_SDATA2 extern u32 lit_3631;
SECTION_SDATA2 extern u8 lit_3683[4];
SECTION_SDATA2 extern f32 d_ovlp_d_ovlp_fade2__lit_3684;
SECTION_SDATA2 extern f32 d_ovlp_d_ovlp_fade2__lit_3685;
SECTION_SDATA2 extern f32 lit_3686;
SECTION_SDATA2 extern f32 lit_3687;
SECTION_SDATA2 extern f32 d_ovlp_d_ovlp_fade2__lit_3688;
SECTION_SDATA2 extern f32 d_ovlp_d_ovlp_fade2__lit_3689;
SECTION_SDATA2 extern f32 d_ovlp_d_ovlp_fade2__lit_3690;
SECTION_SDATA2 extern f32 d_ovlp_d_ovlp_fade2__lit_3691;
SECTION_SDATA2 extern f32 d_ovlp_d_ovlp_fade2__lit_3757;
SECTION_SDATA2 extern f32 d_ovlp_d_ovlp_fade2__lit_3794;
SECTION_SDATA2 extern f32 d_ovlp_d_ovlp_fade2__lit_3795;
SECTION_SDATA2 extern f32 d_ovlp_d_ovlp_fade2__lit_3822;

// 
// External References:
// 

void mDoMtx_ZrotM(f32 (* )[4], s16);
void fopOvlpM_SceneIsStop();
void fopOvlpM_SceneIsStart();
void fopOvlpM_IsOutReq(overlap_task_class*);
void fopOvlpM_Done(overlap_task_class*);
void cLib_addCalc2(f32*, f32, f32, f32);
void cLib_addCalc0(f32*, f32, f32);
void cLib_chaseAngleS(s16*, s16, s16);
void operator delete(void*);
extern "C" void func_802E980C();
extern "C" void PSMTXCopy();
extern "C" void PSMTXTrans();
extern "C" void C_MTXPerspective();
extern "C" void GXSetVtxDesc();
extern "C" void GXClearVtxDesc();
extern "C" void GXSetVtxAttrFmt();
extern "C" void GXSetTexCoordGen2();
extern "C" void GXSetNumTexGens();
extern "C" void GXBegin();
extern "C" void GXSetCullMode();
extern "C" void GXSetChanMatColor();
extern "C" void GXSetNumChans();
extern "C" void GXSetChanCtrl();
extern "C" void GXInitTexObj();
extern "C" void GXInitTexObjLOD();
extern "C" void GXLoadTexObj();
extern "C" void GXSetTevColorIn();
extern "C" void GXSetTevAlphaIn();
extern "C" void GXSetTevColorOp();
extern "C" void GXSetTevAlphaOp();
extern "C" void GXSetAlphaCompare();
extern "C" void GXSetTevOrder();
extern "C" void GXSetNumTevStages();
extern "C" void GXSetFog();
extern "C" void GXSetBlendMode();
extern "C" void GXSetZMode();
extern "C" void GXSetZCompLoc();
extern "C" void GXSetDither();
extern "C" void GXSetProjection();
extern "C" void GXLoadPosMtxImm();
extern "C" void GXSetCurrentMtx();
extern "C" void GXSetViewport();
extern "C" void GXSetScissor();
extern "C" void GXSetClipMode();
extern "C" void __ptmf_scall();

extern "C" void mDoMtx_ZrotM__FPA4_fs();
extern "C" void scaleM__14mDoMtx_stack_cFfff();
extern "C" void fopOvlpM_SceneIsStop__Fv();
extern "C" void fopOvlpM_SceneIsStart__Fv();
extern "C" void fopOvlpM_IsOutReq__FP18overlap_task_class();
extern "C" void fopOvlpM_Done__FP18overlap_task_class();
extern "C" void set__12dDlst_list_cFRPP12dDlst_base_cRPP12dDlst_base_cP12dDlst_base_c();
extern "C" void cLib_addCalc2__FPffff();
extern "C" void cLib_addCalc0__FPfff();
extern "C" void cLib_chaseAngleS__FPsss();
extern "C" void __dl__FPv();
extern "C" void func_802E980C();
extern "C" void PSMTXCopy();
extern "C" void PSMTXTrans();
extern "C" void C_MTXPerspective();
extern "C" void GXSetVtxDesc();
extern "C" void GXClearVtxDesc();
extern "C" void GXSetVtxAttrFmt();
extern "C" void GXSetTexCoordGen2();
extern "C" void GXSetNumTexGens();
extern "C" void GXBegin();
extern "C" void GXSetCullMode();
extern "C" void GXSetChanMatColor();
extern "C" void GXSetNumChans();
extern "C" void GXSetChanCtrl();
extern "C" void GXInitTexObj();
extern "C" void GXInitTexObjLOD();
extern "C" void GXLoadTexObj();
extern "C" void GXSetTevColorIn();
extern "C" void GXSetTevAlphaIn();
extern "C" void GXSetTevColorOp();
extern "C" void GXSetTevAlphaOp();
extern "C" void GXSetAlphaCompare();
extern "C" void GXSetTevOrder();
extern "C" void GXSetNumTevStages();
extern "C" void GXSetFog();
extern "C" void GXSetBlendMode();
extern "C" void GXSetZMode();
extern "C" void GXSetZCompLoc();
extern "C" void GXSetDither();
extern "C" void GXSetProjection();
extern "C" void GXLoadPosMtxImm();
extern "C" void GXSetCurrentMtx();
extern "C" void GXSetViewport();
extern "C" void GXSetScissor();
extern "C" void GXSetClipMode();
extern "C" void __ptmf_scall();
SECTION_DATA extern u8 g_mDoMtx_identity[48 + 24 /* padding */];
SECTION_DATA extern void*g_fopOvlp_Method[6];
SECTION_DATA extern void*g_fpcLf_Method[6];
SECTION_DATA extern void*const __vt__12dDlst_base_c[3];
SECTION_DATA extern void*const __vt__16dDlst_snapShot_c[3];
SECTION_BSS extern u8 mFrameBufferTexObj__13mDoGph_gInf_c[32];
SECTION_BSS extern u8 now__14mDoMtx_stack_c[48];
SECTION_BSS extern u8 g_dComIfG_gameInfo[122384];
SECTION_SDATA extern u8 g_clearColor[4];
SECTION_SBSS extern u8 mFrameBufferTex__13mDoGph_gInf_c[4];
SECTION_SBSS extern u8 struct_80450BE4[4];
SECTION_SBSS extern u8 sManager__10JFWDisplay[4];

// 
// Declarations:
// 

/* ############################################################################################## */
/* 80454E20-80454E24 0004+00 rc=1 efc=0 .sdata2    @3631                                                        */
u32 lit_3631 = 0xFFFFFFFF;

/* 80454E24-80454E28 0004+00 rc=2 efc=0 .sdata2    @3683                                                        */
u8 lit_3683[4] = {
	0x00, 0x00, 0x00, 0x00,
};

/* 80454E28-80454E2C 0004+00 rc=1 efc=0 .sdata2    @3684                                                        */
f32 d_ovlp_d_ovlp_fade2__lit_3684 = 608.0f;

/* 80454E2C-80454E30 0004+00 rc=1 efc=0 .sdata2    @3685                                                        */
f32 d_ovlp_d_ovlp_fade2__lit_3685 = 448.0f;

/* 80454E30-80454E34 0004+00 rc=4 efc=0 .sdata2    @3686                                                        */
f32 lit_3686 = 1.0f;

/* 80454E34-80454E38 0004+00 rc=1 efc=0 .sdata2    @3687                                                        */
f32 lit_3687 = 60.0f;

/* 80454E38-80454E3C 0004+00 rc=1 efc=0 .sdata2    @3688                                                        */
f32 d_ovlp_d_ovlp_fade2__lit_3688 = 19.0f / 14.0f;

/* 80454E3C-80454E40 0004+00 rc=1 efc=0 .sdata2    @3689                                                        */
f32 d_ovlp_d_ovlp_fade2__lit_3689 = 100.0f;

/* 80454E40-80454E44 0004+00 rc=1 efc=0 .sdata2    @3690                                                        */
f32 d_ovlp_d_ovlp_fade2__lit_3690 = 100000.0f;

/* 80454E44-80454E48 0004+00 rc=1 efc=0 .sdata2    @3691                                                        */
f32 d_ovlp_d_ovlp_fade2__lit_3691 = -1.0f;

/* 8025247C-80252990 0514+00 rc=1 efc=0 .text      draw__15dOvlpFd2_dlst_cFv                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dOvlpFd2_dlst_c::draw() {
	nofralloc
#include "asm/d/ovlp/d_ovlp_fade2/draw__15dOvlpFd2_dlst_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 803C2CF0-803C2CFC 000C+00 rc=1 efc=0 .data      @3695                                                        */
void* d_ovlp_d_ovlp_fade2__lit_3695[3] = {
	NULL,
	(void*)0xFFFFFFFF,
	(void*)execFirstSnap__10dOvlpFd2_cFv,
};

/* 803C2CFC-803C2D08 000C+00 rc=1 efc=0 .data      @3721                                                        */
void* d_ovlp_d_ovlp_fade2__lit_3721[3] = {
	NULL,
	(void*)0xFFFFFFFF,
	(void*)execFadeOut__10dOvlpFd2_cFv,
};

/* 803C2D08-803C2D14 000C+00 rc=1 efc=0 .data      @3736                                                        */
void* d_ovlp_d_ovlp_fade2__lit_3736[3] = {
	NULL,
	(void*)0xFFFFFFFF,
	(void*)execNextSnap__10dOvlpFd2_cFv,
};

/* 803C2D14-803C2D20 000C+00 rc=1 efc=0 .data      @3765                                                        */
void* d_ovlp_d_ovlp_fade2__lit_3765[3] = {
	NULL,
	(void*)0xFFFFFFFF,
	(void*)execFadeIn__10dOvlpFd2_cFv,
};

/* 803C2D20-803C2D34 0014+00 rc=1 efc=0 .data      l_dOvlpFd2_Method                                            */
void* l_dOvlpFd2_Method[5] = {
	(void*)dOvlpFd2_Create__FPv,
	(void*)dOvlpFd2_Delete__FP10dOvlpFd2_c,
	(void*)dOvlpFd2_Execute__FP10dOvlpFd2_c,
	(void*)dOvlpFd2_IsDelete__FP10dOvlpFd2_c,
	(void*)dOvlpFd2_Draw__FP10dOvlpFd2_c,
};

/* 803C2D34-803C2D5C 0028+00 rc=0 efc=0 .data      g_profile_OVERLAP2                                           */
void* g_profile_OVERLAP2[10] = {
	NULL,
	(void*)0x0002FFFD,
	(void*)0x00110000,
	(void*)&g_fpcLf_Method,
	(void*)0x00000120,
	NULL,
	NULL,
	(void*)&g_fopOvlp_Method,
	(void*)0x03070000,
	(void*)&l_dOvlpFd2_Method,
};

/* 803C2D5C-803C2D70 0010+04 rc=2 efc=0 .data      __vt__15dOvlpFd2_dlst_c                                      */
void* const __vt__15dOvlpFd2_dlst_c[5] = {
	NULL, /* RTTI */
	NULL,
	(void*)draw__15dOvlpFd2_dlst_cFv,
	(void*)__dt__15dOvlpFd2_dlst_cFv,
	/* padding */
	NULL,
};

/* 80252990-802529F4 0064+00 rc=1 efc=0 .text      __ct__10dOvlpFd2_cFv                                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm dOvlpFd2_c::dOvlpFd2_c() {
	nofralloc
#include "asm/d/ovlp/d_ovlp_fade2/__ct__10dOvlpFd2_cFv.s"
}
#pragma pop


/* 802529F4-80252A78 0084+00 rc=1 efc=0 .text      execFirstSnap__10dOvlpFd2_cFv                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dOvlpFd2_c::execFirstSnap() {
	nofralloc
#include "asm/d/ovlp/d_ovlp_fade2/execFirstSnap__10dOvlpFd2_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80454E48-80454E4C 0004+00 rc=1 efc=0 .sdata2    @3757                                                        */
f32 d_ovlp_d_ovlp_fade2__lit_3757 = 1.0f / 20.0f;

/* 80252A78-80252BC0 0148+00 rc=1 efc=0 .text      execFadeOut__10dOvlpFd2_cFv                                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dOvlpFd2_c::execFadeOut() {
	nofralloc
#include "asm/d/ovlp/d_ovlp_fade2/execFadeOut__10dOvlpFd2_cFv.s"
}
#pragma pop


/* 80252BC0-80252C68 00A8+00 rc=1 efc=0 .text      execNextSnap__10dOvlpFd2_cFv                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dOvlpFd2_c::execNextSnap() {
	nofralloc
#include "asm/d/ovlp/d_ovlp_fade2/execNextSnap__10dOvlpFd2_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80454E4C-80454E50 0004+00 rc=1 efc=0 .sdata2    @3794                                                        */
f32 d_ovlp_d_ovlp_fade2__lit_3794 = 3.0f / 100.0f;

/* 80454E50-80454E54 0004+00 rc=1 efc=0 .sdata2    @3795                                                        */
f32 d_ovlp_d_ovlp_fade2__lit_3795 = 0.0010000000474974513f;

/* 80252C68-80252D0C 00A4+00 rc=1 efc=0 .text      execFadeIn__10dOvlpFd2_cFv                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dOvlpFd2_c::execFadeIn() {
	nofralloc
#include "asm/d/ovlp/d_ovlp_fade2/execFadeIn__10dOvlpFd2_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80454E54-80454E58 0004+00 rc=1 efc=0 .sdata2    @3822                                                        */
f32 d_ovlp_d_ovlp_fade2__lit_3822 = -420.0f;

/* 80252D0C-80252E08 00FC+00 rc=1 efc=0 .text      dOvlpFd2_Draw__FP10dOvlpFd2_c                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm static void dOvlpFd2_Draw(dOvlpFd2_c* field_0) {
	nofralloc
#include "asm/d/ovlp/d_ovlp_fade2/dOvlpFd2_Draw__FP10dOvlpFd2_c.s"
}
#pragma pop


/* 80252E08-80252E34 002C+00 rc=1 efc=0 .text      dOvlpFd2_Execute__FP10dOvlpFd2_c                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm static void dOvlpFd2_Execute(dOvlpFd2_c* field_0) {
	nofralloc
#include "asm/d/ovlp/d_ovlp_fade2/dOvlpFd2_Execute__FP10dOvlpFd2_c.s"
}
#pragma pop


/* 80252E34-80252E3C 0008+00 rc=1 efc=0 .text      dOvlpFd2_IsDelete__FP10dOvlpFd2_c                            */
static bool dOvlpFd2_IsDelete(dOvlpFd2_c* field_0) {
	return true;
}


/* 80252E3C-80252E44 0008+00 rc=1 efc=0 .text      dOvlpFd2_Delete__FP10dOvlpFd2_c                              */
static bool dOvlpFd2_Delete(dOvlpFd2_c* field_0) {
	return true;
}


/* 80252E44-80252E70 002C+00 rc=1 efc=0 .text      dOvlpFd2_Create__FPv                                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm static void dOvlpFd2_Create(void* field_0) {
	nofralloc
#include "asm/d/ovlp/d_ovlp_fade2/dOvlpFd2_Create__FPv.s"
}
#pragma pop


/* 80252E70-80252E8C 001C+00 rc=7 efc=4 .text      cLib_calcTimer<Sc>__FPSc                                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void func_80252E70() {
	nofralloc
#include "asm/d/ovlp/d_ovlp_fade2/func_80252E70.s"
}
#pragma pop


/* 80252E8C-80252ED4 0048+00 rc=1 efc=0 .text      __dt__15dOvlpFd2_dlst_cFv                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm dOvlpFd2_dlst_c::~dOvlpFd2_dlst_c() {
	nofralloc
#include "asm/d/ovlp/d_ovlp_fade2/__dt__15dOvlpFd2_dlst_cFv.s"
}
#pragma pop


