//
// Generated By: dol2asm
// Translation Unit: d/bg/d_bg_w_kcol
//

#include "d/bg/d_bg_w_kcol.h"
#include "dol2asm.h"
#include "dolphin/types.h"

//
// Types:
//

struct sBgPc {};

struct fopAc_ac_c {};

struct cXyz {};

struct dBgW_Base {
    /* 80074AB4 */ void SetOldShapeAngleY(s16);
    /* 8007E5A8 */ dBgW_Base();
    /* 8007E640 */ ~dBgW_Base();
    /* 8007E69C */ void ClrDBgWBase();
    /* 8007E6D0 */ bool ChkMemoryError();
    /* 8007E6D8 */ void CallRideCallBack(fopAc_ac_c*, fopAc_ac_c*);
    /* 8007E6DC */ void CallArrowStickCallBack(fopAc_ac_c*, fopAc_ac_c*, cXyz&);
};

struct dBgS_SphChk {};

struct cBgS_PolyPassChk {};

struct cBgS_GndChk {};

struct dBgS_CaptPoly {};

struct dBgPc {
    /* 80074048 */ void setCode(sBgPc&);
};

struct KC_PrismData {};

struct dBgS_RoofChk {};

struct cBgS_LinChk {};

struct cBgS_PolyInfo {
    /* 802681A4 */ void SetPolyIndex(int);
};

struct Vec {};

struct dBgS_Acch {
    /* 800771E4 */ void GetSpeedY();
    /* 80077200 */ void GetWallAddY(Vec&);
    /* 80077288 */ void SetWallPolyIndex(int, int);
    /* 800772E8 */ void CalcMovePosWork();
};

struct csXyz {};

struct cBgS_GrpPassChk {};

struct cBgS_ShdwDraw {};

struct dBgS_SplGrpChk {};

struct dBgWKCol {
    /* 8007E6F4 */ dBgWKCol();
    /* 8007E74C */ ~dBgWKCol();
    /* 8007E7D0 */ void initKCollision(void*);
    /* 8007E804 */ void create(void*, void*);
    /* 8007E850 */ void getTriNrm(KC_PrismData*, Vec**) const;
    /* 8007E86C */ void ChkNotReady() const;
    /* 8007E87C */ bool ChkLock() const;
    /* 8007E884 */ bool ChkMoveBg() const;
    /* 8007E88C */ bool ChkMoveFlag() const;
    /* 8007E894 */ void GetTriPla(cBgS_PolyInfo const&) const;
    /* 8007E8C0 */ void GetTriPla(int) const;
    /* 8007E980 */ void GetTriPnt(cBgS_PolyInfo const&, cXyz*, cXyz*, cXyz*) const;
    /* 8007E9A4 */ void GetTriPnt(int, Vec*, Vec*, Vec*) const;
    /* 8007E9D4 */ void GetTriPnt(KC_PrismData const*, Vec*, Vec*, Vec*) const;
    /* 8007EB28 */ void GetBnd() const;
    /* 8007EB30 */ void GetGrpInf(cBgS_PolyInfo const&) const;
    /* 8007EB6C */ void OffMoveFlag();
    /* 8007EB70 */ void getPolyCode(int, dBgPc*) const;
    /* 8007EBC4 */ void chkPolyThrough(dBgPc*, cBgS_PolyPassChk*, cBgS_GrpPassChk*, cXyz&) const;
    /* 8007EE34 */ void LineCheck(cBgS_LinChk*);
    /* 8007F628 */ void GroundCross(cBgS_GndChk*);
    /* 8007F9A4 */ void ShdwDraw(cBgS_ShdwDraw*);
    /* 8007FF00 */ void ChkShdwDrawThrough(dBgPc*);
    /* 8007FF1C */ void CaptPoly(dBgS_CaptPoly&);
    /* 80080330 */ void WallCorrectSort(dBgS_Acch*);
    /* 800811A0 */ void WallCorrect(dBgS_Acch*);
    /* 80081E18 */ void RoofChk(dBgS_RoofChk*);
    /* 80082184 */ void SplGrpChk(dBgS_SplGrpChk*);
    /* 800824EC */ void SphChk(dBgS_SphChk*, void*);
    /* 800829AC */ void GetTopUnder(f32*, f32*) const;
    /* 800829F0 */ void GetGrpRoomIndex(cBgS_PolyInfo const&) const;
    /* 80082A20 */ void GetExitId(cBgS_PolyInfo const&);
    /* 80082A50 */ void GetPolyColor(cBgS_PolyInfo const&);
    /* 80082A80 */ void GetHorseNoEntry(cBgS_PolyInfo const&);
    /* 80082AB0 */ void GetSpecialCode(cBgS_PolyInfo const&);
    /* 80082AE0 */ void GetSpecialCode(int);
    /* 80082B0C */ void GetMagnetCode(cBgS_PolyInfo const&);
    /* 80082B3C */ void GetMonkeyBarsCode(cBgS_PolyInfo const&);
    /* 80082B6C */ void GetPolyObjThrough(int);
    /* 80082B98 */ void GetPolyCamThrough(int);
    /* 80082BC4 */ void GetPolyLinkThrough(int);
    /* 80082BF0 */ void GetPolyArrowThrough(int);
    /* 80082C1C */ void GetPolyHSStick(int);
    /* 80082C48 */ void GetPolyBoomerangThrough(int);
    /* 80082C74 */ void GetPolyRopeThrough(int);
    /* 80082CA0 */ void GetPolyBombThrough(int);
    /* 80082CCC */ void GetUnderwaterRoofCode(int);
    /* 80082CF8 */ void GetShdwThrough(int);
    /* 80082D24 */ void GetLinkNo(cBgS_PolyInfo const&);
    /* 80082D54 */ void GetWallCode(cBgS_PolyInfo const&);
    /* 80082D84 */ void GetPolyAtt0(cBgS_PolyInfo const&);
    /* 80082DB4 */ void GetPolyAtt1(cBgS_PolyInfo const&);
    /* 80082DE4 */ void GetGroundCode(cBgS_PolyInfo const&);
    /* 80082E14 */ void GetIronBallThrough(int);
    /* 80082E40 */ void GetAttackThrough(int);
    /* 80082E6C */ void GetCamMoveBG(cBgS_PolyInfo const&);
    /* 80082E9C */ void GetRoomCamId(cBgS_PolyInfo const&);
    /* 80082ECC */ void GetRoomPathId(cBgS_PolyInfo const&);
    /* 80082EFC */ void GetRoomPathPntNo(cBgS_PolyInfo const&);
    /* 80082F2C */ void GetPolyGrpRoomInfId(cBgS_PolyInfo const&);
    /* 80082F5C */ void GetGrpSoundId(cBgS_PolyInfo const&);
    /* 80082F8C */ void CrrPos(cBgS_PolyInfo const&, void*, bool, cXyz*, csXyz*, csXyz*);
    /* 80082F90 */ void TransPos(cBgS_PolyInfo const&, void*, bool, cXyz*, csXyz*, csXyz*);
    /* 80082F94 */ void MatrixCrrPos(cBgS_PolyInfo const&, void*, bool, cXyz*, csXyz*, csXyz*);
};

struct dBgS_PolyPassChk {
    /* 80078F04 */ void ChkNoHorse();
};

struct dBgPlc {
    /* 80074074 */ dBgPlc();
    /* 80074080 */ ~dBgPlc();
    /* 800740BC */ void setBase(void*);
    /* 800740C4 */ void getCode(int, sBgPc**) const;
    /* 800740DC */ void getGrpCode(int) const;
};

struct cM3dGTri {
    /* 8026F8C8 */ void set(Vec const*, Vec const*, Vec const*, Vec const*);
};

struct cM3dGSph {
    /* 8026F76C */ void GetMinMaxCube(cXyz&, cXyz&) const;
};

struct cM3dGPla {
    /* 8026F52C */ void SetupNP(Vec const&, Vec const&);
};

struct cM3dGCyl {
    /* 8026F24C */ void calcMinMax(cXyz*, cXyz*);
};

struct cM2dGCir {};

//
// Forward References:
//

extern "C" void __ct__8dBgWKColFv();
extern "C" void __dt__8dBgWKColFv();
extern "C" void initKCollision__8dBgWKColFPv();
extern "C" void create__8dBgWKColFPvPv();
extern "C" void getTriNrm__8dBgWKColCFP12KC_PrismDataPP3Vec();
extern "C" void ChkNotReady__8dBgWKColCFv();
extern "C" bool ChkLock__8dBgWKColCFv();
extern "C" bool ChkMoveBg__8dBgWKColCFv();
extern "C" bool ChkMoveFlag__8dBgWKColCFv();
extern "C" void GetTriPla__8dBgWKColCFRC13cBgS_PolyInfo();
extern "C" void GetTriPla__8dBgWKColCFi();
extern "C" void GetTriPnt__8dBgWKColCFRC13cBgS_PolyInfoP4cXyzP4cXyzP4cXyz();
extern "C" void GetTriPnt__8dBgWKColCFiP3VecP3VecP3Vec();
extern "C" void GetTriPnt__8dBgWKColCFPC12KC_PrismDataP3VecP3VecP3Vec();
extern "C" void GetBnd__8dBgWKColCFv();
extern "C" void GetGrpInf__8dBgWKColCFRC13cBgS_PolyInfo();
extern "C" void OffMoveFlag__8dBgWKColFv();
extern "C" void getPolyCode__8dBgWKColCFiP5dBgPc();
extern "C" void chkPolyThrough__8dBgWKColCFP5dBgPcP16cBgS_PolyPassChkP15cBgS_GrpPassChkR4cXyz();
extern "C" void LineCheck__8dBgWKColFP11cBgS_LinChk();
extern "C" void GroundCross__8dBgWKColFP11cBgS_GndChk();
extern "C" void ShdwDraw__8dBgWKColFP13cBgS_ShdwDraw();
extern "C" void ChkShdwDrawThrough__8dBgWKColFP5dBgPc();
extern "C" void CaptPoly__8dBgWKColFR13dBgS_CaptPoly();
extern "C" void WallCorrectSort__8dBgWKColFP9dBgS_Acch();
extern "C" void WallCorrect__8dBgWKColFP9dBgS_Acch();
extern "C" void RoofChk__8dBgWKColFP12dBgS_RoofChk();
extern "C" void SplGrpChk__8dBgWKColFP14dBgS_SplGrpChk();
extern "C" void SphChk__8dBgWKColFP11dBgS_SphChkPv();
extern "C" void GetTopUnder__8dBgWKColCFPfPf();
extern "C" void GetGrpRoomIndex__8dBgWKColCFRC13cBgS_PolyInfo();
extern "C" void GetExitId__8dBgWKColFRC13cBgS_PolyInfo();
extern "C" void GetPolyColor__8dBgWKColFRC13cBgS_PolyInfo();
extern "C" void GetHorseNoEntry__8dBgWKColFRC13cBgS_PolyInfo();
extern "C" void GetSpecialCode__8dBgWKColFRC13cBgS_PolyInfo();
extern "C" void GetSpecialCode__8dBgWKColFi();
extern "C" void GetMagnetCode__8dBgWKColFRC13cBgS_PolyInfo();
extern "C" void GetMonkeyBarsCode__8dBgWKColFRC13cBgS_PolyInfo();
extern "C" void GetPolyObjThrough__8dBgWKColFi();
extern "C" void GetPolyCamThrough__8dBgWKColFi();
extern "C" void GetPolyLinkThrough__8dBgWKColFi();
extern "C" void GetPolyArrowThrough__8dBgWKColFi();
extern "C" void GetPolyHSStick__8dBgWKColFi();
extern "C" void GetPolyBoomerangThrough__8dBgWKColFi();
extern "C" void GetPolyRopeThrough__8dBgWKColFi();
extern "C" void GetPolyBombThrough__8dBgWKColFi();
extern "C" void GetUnderwaterRoofCode__8dBgWKColFi();
extern "C" void GetShdwThrough__8dBgWKColFi();
extern "C" void GetLinkNo__8dBgWKColFRC13cBgS_PolyInfo();
extern "C" void GetWallCode__8dBgWKColFRC13cBgS_PolyInfo();
extern "C" void GetPolyAtt0__8dBgWKColFRC13cBgS_PolyInfo();
extern "C" void GetPolyAtt1__8dBgWKColFRC13cBgS_PolyInfo();
extern "C" void GetGroundCode__8dBgWKColFRC13cBgS_PolyInfo();
extern "C" void GetIronBallThrough__8dBgWKColFi();
extern "C" void GetAttackThrough__8dBgWKColFi();
extern "C" void GetCamMoveBG__8dBgWKColFRC13cBgS_PolyInfo();
extern "C" void GetRoomCamId__8dBgWKColFRC13cBgS_PolyInfo();
extern "C" void GetRoomPathId__8dBgWKColFRC13cBgS_PolyInfo();
extern "C" void GetRoomPathPntNo__8dBgWKColFRC13cBgS_PolyInfo();
extern "C" void GetPolyGrpRoomInfId__8dBgWKColFRC13cBgS_PolyInfo();
extern "C" void GetGrpSoundId__8dBgWKColFRC13cBgS_PolyInfo();
extern "C" void CrrPos__8dBgWKColFRC13cBgS_PolyInfoPvbP4cXyzP5csXyzP5csXyz();
extern "C" void TransPos__8dBgWKColFRC13cBgS_PolyInfoPvbP4cXyzP5csXyzP5csXyz();
extern "C" void MatrixCrrPos__8dBgWKColFRC13cBgS_PolyInfoPvbP4cXyzP5csXyzP5csXyz();

//
// External References:
//

void cM_atan2s(f32, f32);
void cBgW_CheckBGround(f32);
void cBgW_CheckBRoof(f32);
void cBgW_CheckBWall(f32);
void cM2d_CrossCirLin(cM2dGCir&, f32, f32, f32, f32, f32*, f32*);
void cM3d_Len2dSq(f32, f32, f32, f32);
void cM3d_Len2dSqPntAndSegLine(f32, f32, f32, f32, f32, f32, f32*, f32*, f32*);
void cM3d_Cross_SphTri(cM3dGSph const*, cM3dGTri const*, Vec*);
void operator delete(void*);
extern "C" extern void* __vt__8cM3dGPla[3];
extern "C" extern void* __vt__8cM3dGAab[3];
extern "C" extern void* __vt__8cM3dGTri[3];
extern "C" extern u8 g_dComIfG_gameInfo[122384];
extern "C" extern u8 sincosTable___5JMath[65536];
extern "C" extern u32 __float_nan;
extern "C" extern f32 G_CM3D_F_ABS_MIN[1 + 1 /* padding */];

extern "C" void setCode__5dBgPcFR5sBgPc();
extern "C" void __ct__6dBgPlcFv();
extern "C" void __dt__6dBgPlcFv();
extern "C" void setBase__6dBgPlcFPv();
extern "C" void getCode__6dBgPlcCFiPP5sBgPc();
extern "C" void getGrpCode__6dBgPlcCFi();
extern "C" void SetOldShapeAngleY__9dBgW_BaseFs();
extern "C" void GetSpeedY__9dBgS_AcchFv();
extern "C" void GetWallAddY__9dBgS_AcchFR3Vec();
extern "C" void SetWallPolyIndex__9dBgS_AcchFii();
extern "C" void CalcMovePosWork__9dBgS_AcchFv();
extern "C" void ChkNoHorse__16dBgS_PolyPassChkFv();
extern "C" void __ct__9dBgW_BaseFv();
extern "C" void __dt__9dBgW_BaseFv();
extern "C" void ClrDBgWBase__9dBgW_BaseFv();
extern "C" bool ChkMemoryError__9dBgW_BaseFv();
extern "C" void CallRideCallBack__9dBgW_BaseFP10fopAc_ac_cP10fopAc_ac_c();
extern "C" void CallArrowStickCallBack__9dBgW_BaseFP10fopAc_ac_cP10fopAc_ac_cR4cXyz();
extern "C" void cM_atan2s__Fff();
extern "C" void SetPolyIndex__13cBgS_PolyInfoFi();
extern "C" void cBgW_CheckBGround__Ff();
extern "C" void cBgW_CheckBRoof__Ff();
extern "C" void cBgW_CheckBWall__Ff();
extern "C" void cM2d_CrossCirLin__FR8cM2dGCirffffPfPf();
extern "C" void cM3d_Len2dSq__Fffff();
extern "C" void cM3d_Len2dSqPntAndSegLine__FffffffPfPfPf();
extern "C" void cM3d_Cross_SphTri__FPC8cM3dGSphPC8cM3dGTriP3Vec();
extern "C" void calcMinMax__8cM3dGCylFP4cXyzP4cXyz();
extern "C" void SetupNP__8cM3dGPlaFRC3VecRC3Vec();
extern "C" void GetMinMaxCube__8cM3dGSphCFR4cXyzR4cXyz();
extern "C" void set__8cM3dGTriFPC3VecPC3VecPC3VecPC3Vec();
extern "C" void __dl__FPv();
extern "C" void PSVECAdd();
extern "C" void PSVECSubtract();
extern "C" void PSVECScale();
extern "C" void PSVECDotProduct();
extern "C" void PSVECCrossProduct();
extern "C" void PSVECSquareDistance();
extern "C" void __ptmf_scall();
extern "C" void __cvt_fp2unsigned();
extern "C" void __save_gpr();
extern "C" void _savegpr_19();
extern "C" void _savegpr_25();
extern "C" void _savegpr_29();
extern "C" void __restore_gpr();
extern "C" void _restgpr_19();
extern "C" void _restgpr_25();
extern "C" void _restgpr_29();
extern "C" extern void* __vt__8cM3dGPla[3];
extern "C" extern void* __vt__8cM3dGAab[3];
extern "C" extern void* __vt__8cM3dGTri[3];
extern "C" extern u8 g_dComIfG_gameInfo[122384];
extern "C" extern u8 sincosTable___5JMath[65536];
extern "C" extern u32 __float_nan;
extern "C" extern f32 G_CM3D_F_ABS_MIN[1 + 1 /* padding */];

//
// Declarations:
//

/* ############################################################################################## */
/* 803ABDC8-803ABEB8 00F0+00 s=2 e=0 z=0  None .data      __vt__8dBgWKCol */
SECTION_DATA static void* __vt__8dBgWKCol[60] = {
    (void*)NULL,
    (void*)NULL,
    (void*)__dt__8dBgWKColFv,
    (void*)ChkMemoryError__9dBgW_BaseFv,
    (void*)ChkNotReady__8dBgWKColCFv,
    (void*)ChkLock__8dBgWKColCFv,
    (void*)ChkMoveBg__8dBgWKColCFv,
    (void*)ChkMoveFlag__8dBgWKColCFv,
    (void*)GetTriPla__8dBgWKColCFRC13cBgS_PolyInfo,
    (void*)GetTriPnt__8dBgWKColCFRC13cBgS_PolyInfoP4cXyzP4cXyzP4cXyz,
    (void*)GetBnd__8dBgWKColCFv,
    (void*)GetGrpInf__8dBgWKColCFRC13cBgS_PolyInfo,
    (void*)OffMoveFlag__8dBgWKColFv,
    (void*)GetTopUnder__8dBgWKColCFPfPf,
    (void*)SetOldShapeAngleY__9dBgW_BaseFs,
    (void*)LineCheck__8dBgWKColFP11cBgS_LinChk,
    (void*)GroundCross__8dBgWKColFP11cBgS_GndChk,
    (void*)ShdwDraw__8dBgWKColFP13cBgS_ShdwDraw,
    (void*)CaptPoly__8dBgWKColFR13dBgS_CaptPoly,
    (void*)WallCorrect__8dBgWKColFP9dBgS_Acch,
    (void*)WallCorrectSort__8dBgWKColFP9dBgS_Acch,
    (void*)RoofChk__8dBgWKColFP12dBgS_RoofChk,
    (void*)SplGrpChk__8dBgWKColFP14dBgS_SplGrpChk,
    (void*)SphChk__8dBgWKColFP11dBgS_SphChkPv,
    (void*)GetGrpRoomIndex__8dBgWKColCFRC13cBgS_PolyInfo,
    (void*)GetExitId__8dBgWKColFRC13cBgS_PolyInfo,
    (void*)GetPolyColor__8dBgWKColFRC13cBgS_PolyInfo,
    (void*)GetHorseNoEntry__8dBgWKColFRC13cBgS_PolyInfo,
    (void*)GetSpecialCode__8dBgWKColFRC13cBgS_PolyInfo,
    (void*)GetSpecialCode__8dBgWKColFi,
    (void*)GetMagnetCode__8dBgWKColFRC13cBgS_PolyInfo,
    (void*)GetPolyObjThrough__8dBgWKColFi,
    (void*)GetPolyCamThrough__8dBgWKColFi,
    (void*)GetPolyLinkThrough__8dBgWKColFi,
    (void*)GetPolyArrowThrough__8dBgWKColFi,
    (void*)GetPolyHSStick__8dBgWKColFi,
    (void*)GetPolyBoomerangThrough__8dBgWKColFi,
    (void*)GetPolyRopeThrough__8dBgWKColFi,
    (void*)GetPolyBombThrough__8dBgWKColFi,
    (void*)GetShdwThrough__8dBgWKColFi,
    (void*)GetUnderwaterRoofCode__8dBgWKColFi,
    (void*)GetMonkeyBarsCode__8dBgWKColFRC13cBgS_PolyInfo,
    (void*)GetLinkNo__8dBgWKColFRC13cBgS_PolyInfo,
    (void*)GetWallCode__8dBgWKColFRC13cBgS_PolyInfo,
    (void*)GetPolyAtt0__8dBgWKColFRC13cBgS_PolyInfo,
    (void*)GetPolyAtt1__8dBgWKColFRC13cBgS_PolyInfo,
    (void*)GetGroundCode__8dBgWKColFRC13cBgS_PolyInfo,
    (void*)GetIronBallThrough__8dBgWKColFi,
    (void*)GetAttackThrough__8dBgWKColFi,
    (void*)GetCamMoveBG__8dBgWKColFRC13cBgS_PolyInfo,
    (void*)GetRoomCamId__8dBgWKColFRC13cBgS_PolyInfo,
    (void*)GetRoomPathId__8dBgWKColFRC13cBgS_PolyInfo,
    (void*)GetRoomPathPntNo__8dBgWKColFRC13cBgS_PolyInfo,
    (void*)GetPolyGrpRoomInfId__8dBgWKColFRC13cBgS_PolyInfo,
    (void*)GetGrpSoundId__8dBgWKColFRC13cBgS_PolyInfo,
    (void*)CrrPos__8dBgWKColFRC13cBgS_PolyInfoPvbP4cXyzP5csXyzP5csXyz,
    (void*)TransPos__8dBgWKColFRC13cBgS_PolyInfoPvbP4cXyzP5csXyzP5csXyz,
    (void*)MatrixCrrPos__8dBgWKColFRC13cBgS_PolyInfoPvbP4cXyzP5csXyzP5csXyz,
    (void*)CallRideCallBack__9dBgW_BaseFP10fopAc_ac_cP10fopAc_ac_c,
    (void*)CallArrowStickCallBack__9dBgW_BaseFP10fopAc_ac_cP10fopAc_ac_cR4cXyz,
};

/* 8007E6F4-8007E74C 0058+00 s=0 e=0 z=1  None .text      __ct__8dBgWKColFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm dBgWKCol::dBgWKCol() {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/__ct__8dBgWKColFv.s"
}
#pragma pop

/* 8007E74C-8007E7D0 0084+00 s=1 e=0 z=0  None .text      __dt__8dBgWKColFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm dBgWKCol::~dBgWKCol() {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/__dt__8dBgWKColFv.s"
}
#pragma pop

/* 8007E7D0-8007E804 0034+00 s=0 e=1 z=0  None .text      initKCollision__8dBgWKColFPv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::initKCollision(void* param_0) {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/initKCollision__8dBgWKColFPv.s"
}
#pragma pop

/* 8007E804-8007E850 004C+00 s=0 e=0 z=1  None .text      create__8dBgWKColFPvPv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::create(void* param_0, void* param_1) {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/create__8dBgWKColFPvPv.s"
}
#pragma pop

/* 8007E850-8007E86C 001C+00 s=1 e=0 z=0  None .text getTriNrm__8dBgWKColCFP12KC_PrismDataPP3Vec
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::getTriNrm(KC_PrismData* param_0, Vec** param_1) const {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/getTriNrm__8dBgWKColCFP12KC_PrismDataPP3Vec.s"
}
#pragma pop

/* 8007E86C-8007E87C 0010+00 s=1 e=0 z=0  None .text      ChkNotReady__8dBgWKColCFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::ChkNotReady() const {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/ChkNotReady__8dBgWKColCFv.s"
}
#pragma pop

/* 8007E87C-8007E884 0008+00 s=1 e=0 z=0  None .text      ChkLock__8dBgWKColCFv */
bool dBgWKCol::ChkLock() const {
    return false;
}

/* 8007E884-8007E88C 0008+00 s=1 e=0 z=0  None .text      ChkMoveBg__8dBgWKColCFv */
bool dBgWKCol::ChkMoveBg() const {
    return false;
}

/* 8007E88C-8007E894 0008+00 s=1 e=0 z=0  None .text      ChkMoveFlag__8dBgWKColCFv */
bool dBgWKCol::ChkMoveFlag() const {
    return false;
}

/* 8007E894-8007E8C0 002C+00 s=1 e=0 z=0  None .text      GetTriPla__8dBgWKColCFRC13cBgS_PolyInfo */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::GetTriPla(cBgS_PolyInfo const& param_0) const {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/GetTriPla__8dBgWKColCFRC13cBgS_PolyInfo.s"
}
#pragma pop

/* 8007E8C0-8007E980 00C0+00 s=3 e=0 z=0  None .text      GetTriPla__8dBgWKColCFi */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::GetTriPla(int param_0) const {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/GetTriPla__8dBgWKColCFi.s"
}
#pragma pop

/* 8007E980-8007E9A4 0024+00 s=1 e=0 z=0  None .text
 * GetTriPnt__8dBgWKColCFRC13cBgS_PolyInfoP4cXyzP4cXyzP4cXyz    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::GetTriPnt(cBgS_PolyInfo const& param_0, cXyz* param_1, cXyz* param_2,
                             cXyz* param_3) const {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/GetTriPnt__8dBgWKColCFRC13cBgS_PolyInfoP4cXyzP4cXyzP4cXyz.s"
}
#pragma pop

/* 8007E9A4-8007E9D4 0030+00 s=3 e=0 z=0  None .text      GetTriPnt__8dBgWKColCFiP3VecP3VecP3Vec */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::GetTriPnt(int param_0, Vec* param_1, Vec* param_2, Vec* param_3) const {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/GetTriPnt__8dBgWKColCFiP3VecP3VecP3Vec.s"
}
#pragma pop

/* 8007E9D4-8007EB28 0154+00 s=3 e=0 z=0  None .text
 * GetTriPnt__8dBgWKColCFPC12KC_PrismDataP3VecP3VecP3Vec        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::GetTriPnt(KC_PrismData const* param_0, Vec* param_1, Vec* param_2,
                             Vec* param_3) const {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/GetTriPnt__8dBgWKColCFPC12KC_PrismDataP3VecP3VecP3Vec.s"
}
#pragma pop

/* 8007EB28-8007EB30 0008+00 s=1 e=0 z=0  None .text      GetBnd__8dBgWKColCFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::GetBnd() const {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/GetBnd__8dBgWKColCFv.s"
}
#pragma pop

/* 8007EB30-8007EB6C 003C+00 s=1 e=0 z=0  None .text      GetGrpInf__8dBgWKColCFRC13cBgS_PolyInfo */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::GetGrpInf(cBgS_PolyInfo const& param_0) const {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/GetGrpInf__8dBgWKColCFRC13cBgS_PolyInfo.s"
}
#pragma pop

/* 8007EB6C-8007EB70 0004+00 s=1 e=0 z=0  None .text      OffMoveFlag__8dBgWKColFv */
void dBgWKCol::OffMoveFlag() {
    /* empty function */
}

/* 8007EB70-8007EBC4 0054+00 s=39 e=0 z=0  None .text      getPolyCode__8dBgWKColCFiP5dBgPc */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::getPolyCode(int param_0, dBgPc* param_1) const {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/getPolyCode__8dBgWKColCFiP5dBgPc.s"
}
#pragma pop

/* 8007EBC4-8007EE34 0270+00 s=8 e=0 z=0  None .text
 * chkPolyThrough__8dBgWKColCFP5dBgPcP16cBgS_PolyPassChkP15cBgS_GrpPassChkR4cXyz */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::chkPolyThrough(dBgPc* param_0, cBgS_PolyPassChk* param_1,
                                  cBgS_GrpPassChk* param_2, cXyz& param_3) const {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/chkPolyThrough__8dBgWKColCFP5dBgPcP16cBgS_PolyPassChkP15cBgS_GrpPassChkR4cXyz.s"
}
#pragma pop

/* ############################################################################################## */
/* 80452718-8045271C 0004+00 s=5 e=0 z=0  None .sdata2    @4187 */
SECTION_SDATA2 static u8 lit_4187[4] = {
    0x00,
    0x00,
    0x00,
    0x00,
};

/* 8045271C-80452720 0004+00 s=1 e=0 z=0  None .sdata2    @4188 */
SECTION_SDATA2 static u32 lit_4188 = 0x43FA0000;

/* 80452720-80452724 0004+00 s=6 e=0 z=0  None .sdata2    @4189 */
SECTION_SDATA2 static u32 lit_4189 = 0x3F800000;

/* 80452724-80452728 0004+00 s=4 e=0 z=0  None .sdata2    @4190 */
SECTION_SDATA2 static u32 lit_4190 = 0x3BF5C28F;

/* 80452728-8045272C 0004+00 s=4 e=0 z=0  None .sdata2    @4191 */
SECTION_SDATA2 static u32 lit_4191 = 0xBBF5C28F;

/* 8007EE34-8007F628 07F4+00 s=1 e=0 z=0  None .text      LineCheck__8dBgWKColFP11cBgS_LinChk */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::LineCheck(cBgS_LinChk* param_0) {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/LineCheck__8dBgWKColFP11cBgS_LinChk.s"
}
#pragma pop

/* ############################################################################################## */
/* 8045272C-80452730 0004+00 s=1 e=0 z=0  None .sdata2    @4293 */
SECTION_SDATA2 static u32 lit_4293 = 0x3C656042;

/* 8007F628-8007F9A4 037C+00 s=1 e=0 z=0  None .text      GroundCross__8dBgWKColFP11cBgS_GndChk */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::GroundCross(cBgS_GndChk* param_0) {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/GroundCross__8dBgWKColFP11cBgS_GndChk.s"
}
#pragma pop

/* 8007F9A4-8007FF00 055C+00 s=1 e=0 z=0  None .text      ShdwDraw__8dBgWKColFP13cBgS_ShdwDraw */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::ShdwDraw(cBgS_ShdwDraw* param_0) {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/ShdwDraw__8dBgWKColFP13cBgS_ShdwDraw.s"
}
#pragma pop

/* 8007FF00-8007FF1C 001C+00 s=1 e=0 z=0  None .text      ChkShdwDrawThrough__8dBgWKColFP5dBgPc */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::ChkShdwDrawThrough(dBgPc* param_0) {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/ChkShdwDrawThrough__8dBgWKColFP5dBgPc.s"
}
#pragma pop

/* ############################################################################################## */
/* 80424F70-80424F94 0024+00 s=1 e=0 z=0  None .bss       vtx_tbl$4582 */
static u8 vtx_tbl_4582[36];

/* 8007FF1C-80080330 0414+00 s=1 e=0 z=0  None .text      CaptPoly__8dBgWKColFR13dBgS_CaptPoly */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::CaptPoly(dBgS_CaptPoly& param_0) {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/CaptPoly__8dBgWKColFR13dBgS_CaptPoly.s"
}
#pragma pop

/* ############################################################################################## */
/* 80424F94-80425384 03F0+00 s=1 e=0 z=0  None .bss       l_wcsbuf */
static u8 l_wcsbuf[1008];

/* 80452730-80452738 0008+00 s=2 e=0 z=0  None .sdata2    @5298 */
SECTION_SDATA2 static u8 lit_5298[8] = {
    0x3F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 80452738-80452740 0008+00 s=2 e=0 z=0  None .sdata2    @5299 */
SECTION_SDATA2 static u8 lit_5299[8] = {
    0x40, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 80452740-80452748 0008+00 s=2 e=0 z=0  None .sdata2    @5300 */
SECTION_SDATA2 static u8 lit_5300[8] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 80452748-80452750 0004+04 s=2 e=0 z=0  None .sdata2    @5301 */
SECTION_SDATA2 static f32 lit_5301[1 + 1 /* padding */] = {
    1.0f / 125.0f,
    /* padding */
    0.0f,
};

/* 80080330-800811A0 0E70+00 s=1 e=0 z=0  None .text      WallCorrectSort__8dBgWKColFP9dBgS_Acch */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::WallCorrectSort(dBgS_Acch* param_0) {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/WallCorrectSort__8dBgWKColFP9dBgS_Acch.s"
}
#pragma pop

/* 800811A0-80081E18 0C78+00 s=1 e=0 z=0  None .text      WallCorrect__8dBgWKColFP9dBgS_Acch */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::WallCorrect(dBgS_Acch* param_0) {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/WallCorrect__8dBgWKColFP9dBgS_Acch.s"
}
#pragma pop

/* 80081E18-80082184 036C+00 s=1 e=0 z=0  None .text      RoofChk__8dBgWKColFP12dBgS_RoofChk */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::RoofChk(dBgS_RoofChk* param_0) {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/RoofChk__8dBgWKColFP12dBgS_RoofChk.s"
}
#pragma pop

/* 80082184-800824EC 0368+00 s=1 e=0 z=0  None .text      SplGrpChk__8dBgWKColFP14dBgS_SplGrpChk */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::SplGrpChk(dBgS_SplGrpChk* param_0) {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/SplGrpChk__8dBgWKColFP14dBgS_SplGrpChk.s"
}
#pragma pop

/* ############################################################################################## */
/* 80425384-804253A8 0024+00 s=1 e=0 z=0  None .bss       vtx_tbl$5950 */
static u8 vtx_tbl_5950[36];

/* 800824EC-800829AC 04C0+00 s=1 e=0 z=0  None .text      SphChk__8dBgWKColFP11dBgS_SphChkPv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::SphChk(dBgS_SphChk* param_0, void* param_1) {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/SphChk__8dBgWKColFP11dBgS_SphChkPv.s"
}
#pragma pop

/* ############################################################################################## */
/* 80452750-80452758 0008+00 s=1 e=0 z=0  None .sdata2    @6099 */
SECTION_SDATA2 static u8 lit_6099[8] = {
    0x43, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 800829AC-800829F0 0044+00 s=1 e=0 z=0  None .text      GetTopUnder__8dBgWKColCFPfPf */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::GetTopUnder(f32* param_0, f32* param_1) const {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/GetTopUnder__8dBgWKColCFPfPf.s"
}
#pragma pop

/* 800829F0-80082A20 0030+00 s=1 e=0 z=0  None .text GetGrpRoomIndex__8dBgWKColCFRC13cBgS_PolyInfo
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::GetGrpRoomIndex(cBgS_PolyInfo const& param_0) const {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/GetGrpRoomIndex__8dBgWKColCFRC13cBgS_PolyInfo.s"
}
#pragma pop

/* 80082A20-80082A50 0030+00 s=1 e=0 z=0  None .text      GetExitId__8dBgWKColFRC13cBgS_PolyInfo */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::GetExitId(cBgS_PolyInfo const& param_0) {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/GetExitId__8dBgWKColFRC13cBgS_PolyInfo.s"
}
#pragma pop

/* 80082A50-80082A80 0030+00 s=1 e=0 z=0  None .text      GetPolyColor__8dBgWKColFRC13cBgS_PolyInfo
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::GetPolyColor(cBgS_PolyInfo const& param_0) {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/GetPolyColor__8dBgWKColFRC13cBgS_PolyInfo.s"
}
#pragma pop

/* 80082A80-80082AB0 0030+00 s=1 e=0 z=0  None .text GetHorseNoEntry__8dBgWKColFRC13cBgS_PolyInfo
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::GetHorseNoEntry(cBgS_PolyInfo const& param_0) {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/GetHorseNoEntry__8dBgWKColFRC13cBgS_PolyInfo.s"
}
#pragma pop

/* 80082AB0-80082AE0 0030+00 s=1 e=0 z=0  None .text GetSpecialCode__8dBgWKColFRC13cBgS_PolyInfo
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::GetSpecialCode(cBgS_PolyInfo const& param_0) {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/GetSpecialCode__8dBgWKColFRC13cBgS_PolyInfo.s"
}
#pragma pop

/* 80082AE0-80082B0C 002C+00 s=1 e=0 z=0  None .text      GetSpecialCode__8dBgWKColFi */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::GetSpecialCode(int param_0) {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/GetSpecialCode__8dBgWKColFi.s"
}
#pragma pop

/* 80082B0C-80082B3C 0030+00 s=1 e=0 z=0  None .text      GetMagnetCode__8dBgWKColFRC13cBgS_PolyInfo
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::GetMagnetCode(cBgS_PolyInfo const& param_0) {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/GetMagnetCode__8dBgWKColFRC13cBgS_PolyInfo.s"
}
#pragma pop

/* 80082B3C-80082B6C 0030+00 s=1 e=0 z=0  None .text
 * GetMonkeyBarsCode__8dBgWKColFRC13cBgS_PolyInfo               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::GetMonkeyBarsCode(cBgS_PolyInfo const& param_0) {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/GetMonkeyBarsCode__8dBgWKColFRC13cBgS_PolyInfo.s"
}
#pragma pop

/* 80082B6C-80082B98 002C+00 s=1 e=0 z=0  None .text      GetPolyObjThrough__8dBgWKColFi */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::GetPolyObjThrough(int param_0) {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/GetPolyObjThrough__8dBgWKColFi.s"
}
#pragma pop

/* 80082B98-80082BC4 002C+00 s=1 e=0 z=0  None .text      GetPolyCamThrough__8dBgWKColFi */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::GetPolyCamThrough(int param_0) {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/GetPolyCamThrough__8dBgWKColFi.s"
}
#pragma pop

/* 80082BC4-80082BF0 002C+00 s=1 e=0 z=0  None .text      GetPolyLinkThrough__8dBgWKColFi */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::GetPolyLinkThrough(int param_0) {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/GetPolyLinkThrough__8dBgWKColFi.s"
}
#pragma pop

/* 80082BF0-80082C1C 002C+00 s=1 e=0 z=0  None .text      GetPolyArrowThrough__8dBgWKColFi */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::GetPolyArrowThrough(int param_0) {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/GetPolyArrowThrough__8dBgWKColFi.s"
}
#pragma pop

/* 80082C1C-80082C48 002C+00 s=1 e=0 z=0  None .text      GetPolyHSStick__8dBgWKColFi */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::GetPolyHSStick(int param_0) {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/GetPolyHSStick__8dBgWKColFi.s"
}
#pragma pop

/* 80082C48-80082C74 002C+00 s=1 e=0 z=0  None .text      GetPolyBoomerangThrough__8dBgWKColFi */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::GetPolyBoomerangThrough(int param_0) {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/GetPolyBoomerangThrough__8dBgWKColFi.s"
}
#pragma pop

/* 80082C74-80082CA0 002C+00 s=1 e=0 z=0  None .text      GetPolyRopeThrough__8dBgWKColFi */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::GetPolyRopeThrough(int param_0) {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/GetPolyRopeThrough__8dBgWKColFi.s"
}
#pragma pop

/* 80082CA0-80082CCC 002C+00 s=1 e=0 z=0  None .text      GetPolyBombThrough__8dBgWKColFi */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::GetPolyBombThrough(int param_0) {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/GetPolyBombThrough__8dBgWKColFi.s"
}
#pragma pop

/* 80082CCC-80082CF8 002C+00 s=1 e=0 z=0  None .text      GetUnderwaterRoofCode__8dBgWKColFi */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::GetUnderwaterRoofCode(int param_0) {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/GetUnderwaterRoofCode__8dBgWKColFi.s"
}
#pragma pop

/* 80082CF8-80082D24 002C+00 s=1 e=0 z=0  None .text      GetShdwThrough__8dBgWKColFi */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::GetShdwThrough(int param_0) {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/GetShdwThrough__8dBgWKColFi.s"
}
#pragma pop

/* 80082D24-80082D54 0030+00 s=1 e=0 z=0  None .text      GetLinkNo__8dBgWKColFRC13cBgS_PolyInfo */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::GetLinkNo(cBgS_PolyInfo const& param_0) {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/GetLinkNo__8dBgWKColFRC13cBgS_PolyInfo.s"
}
#pragma pop

/* 80082D54-80082D84 0030+00 s=1 e=0 z=0  None .text      GetWallCode__8dBgWKColFRC13cBgS_PolyInfo
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::GetWallCode(cBgS_PolyInfo const& param_0) {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/GetWallCode__8dBgWKColFRC13cBgS_PolyInfo.s"
}
#pragma pop

/* 80082D84-80082DB4 0030+00 s=1 e=0 z=0  None .text      GetPolyAtt0__8dBgWKColFRC13cBgS_PolyInfo
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::GetPolyAtt0(cBgS_PolyInfo const& param_0) {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/GetPolyAtt0__8dBgWKColFRC13cBgS_PolyInfo.s"
}
#pragma pop

/* 80082DB4-80082DE4 0030+00 s=1 e=0 z=0  None .text      GetPolyAtt1__8dBgWKColFRC13cBgS_PolyInfo
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::GetPolyAtt1(cBgS_PolyInfo const& param_0) {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/GetPolyAtt1__8dBgWKColFRC13cBgS_PolyInfo.s"
}
#pragma pop

/* 80082DE4-80082E14 0030+00 s=1 e=0 z=0  None .text      GetGroundCode__8dBgWKColFRC13cBgS_PolyInfo
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::GetGroundCode(cBgS_PolyInfo const& param_0) {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/GetGroundCode__8dBgWKColFRC13cBgS_PolyInfo.s"
}
#pragma pop

/* 80082E14-80082E40 002C+00 s=1 e=0 z=0  None .text      GetIronBallThrough__8dBgWKColFi */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::GetIronBallThrough(int param_0) {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/GetIronBallThrough__8dBgWKColFi.s"
}
#pragma pop

/* 80082E40-80082E6C 002C+00 s=1 e=0 z=0  None .text      GetAttackThrough__8dBgWKColFi */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::GetAttackThrough(int param_0) {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/GetAttackThrough__8dBgWKColFi.s"
}
#pragma pop

/* 80082E6C-80082E9C 0030+00 s=1 e=0 z=0  None .text      GetCamMoveBG__8dBgWKColFRC13cBgS_PolyInfo
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::GetCamMoveBG(cBgS_PolyInfo const& param_0) {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/GetCamMoveBG__8dBgWKColFRC13cBgS_PolyInfo.s"
}
#pragma pop

/* 80082E9C-80082ECC 0030+00 s=1 e=0 z=0  None .text      GetRoomCamId__8dBgWKColFRC13cBgS_PolyInfo
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::GetRoomCamId(cBgS_PolyInfo const& param_0) {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/GetRoomCamId__8dBgWKColFRC13cBgS_PolyInfo.s"
}
#pragma pop

/* 80082ECC-80082EFC 0030+00 s=1 e=0 z=0  None .text      GetRoomPathId__8dBgWKColFRC13cBgS_PolyInfo
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::GetRoomPathId(cBgS_PolyInfo const& param_0) {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/GetRoomPathId__8dBgWKColFRC13cBgS_PolyInfo.s"
}
#pragma pop

/* 80082EFC-80082F2C 0030+00 s=1 e=0 z=0  None .text GetRoomPathPntNo__8dBgWKColFRC13cBgS_PolyInfo
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::GetRoomPathPntNo(cBgS_PolyInfo const& param_0) {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/GetRoomPathPntNo__8dBgWKColFRC13cBgS_PolyInfo.s"
}
#pragma pop

/* 80082F2C-80082F5C 0030+00 s=1 e=0 z=0  None .text
 * GetPolyGrpRoomInfId__8dBgWKColFRC13cBgS_PolyInfo             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::GetPolyGrpRoomInfId(cBgS_PolyInfo const& param_0) {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/GetPolyGrpRoomInfId__8dBgWKColFRC13cBgS_PolyInfo.s"
}
#pragma pop

/* 80082F5C-80082F8C 0030+00 s=1 e=0 z=0  None .text      GetGrpSoundId__8dBgWKColFRC13cBgS_PolyInfo
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgWKCol::GetGrpSoundId(cBgS_PolyInfo const& param_0) {
    nofralloc
#include "asm/d/bg/d_bg_w_kcol/GetGrpSoundId__8dBgWKColFRC13cBgS_PolyInfo.s"
}
#pragma pop

/* 80082F8C-80082F90 0004+00 s=1 e=0 z=0  None .text
 * CrrPos__8dBgWKColFRC13cBgS_PolyInfoPvbP4cXyzP5csXyzP5csXyz   */
void dBgWKCol::CrrPos(cBgS_PolyInfo const& param_0, void* param_1, bool param_2, cXyz* param_3,
                      csXyz* param_4, csXyz* param_5) {
    /* empty function */
}

/* 80082F90-80082F94 0004+00 s=1 e=0 z=0  None .text
 * TransPos__8dBgWKColFRC13cBgS_PolyInfoPvbP4cXyzP5csXyzP5csXyz */
void dBgWKCol::TransPos(cBgS_PolyInfo const& param_0, void* param_1, bool param_2, cXyz* param_3,
                        csXyz* param_4, csXyz* param_5) {
    /* empty function */
}

/* 80082F94-80082F98 0004+00 s=1 e=0 z=0  None .text
 * MatrixCrrPos__8dBgWKColFRC13cBgS_PolyInfoPvbP4cXyzP5csXyzP5csXyz */
void dBgWKCol::MatrixCrrPos(cBgS_PolyInfo const& param_0, void* param_1, bool param_2,
                            cXyz* param_3, csXyz* param_4, csXyz* param_5) {
    /* empty function */
}
