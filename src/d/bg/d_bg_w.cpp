// 
// Generated By: dol2asm
// Translation Unit: d/bg/d_bg_w
// 

#include "dolphin/types.h"

// 
// Types:
// 

struct cBgW_RwgElm {
	/* 800791C4 */ cBgW_RwgElm();
	/* 800791D4 */ ~cBgW_RwgElm();
};

struct cBgW_NodeTree {
	/* 8007921C */ cBgW_NodeTree();
	/* 80079238 */ ~cBgW_NodeTree();
};

struct cBgS_LinChk {
};

struct cBgS_PolyInfo {
	/* 802681A4 */ void SetPolyIndex(int);
};

struct cBgS_GndChk {
};

struct cBgS_PolyPassChk {
};

struct cBgS_ShdwDraw {
};

struct cBgS_GrpPassChk {
};

struct cBgD_t {
};

struct cXyz {
};

struct cBgW {
	/* 80079294 */ cBgW();
	/* 8007933C */ ~cBgW();
	/* 800793A4 */ void FreeArea();
	/* 800793C4 */ void GlobalVtx();
	/* 80079484 */ void SetVtx();
	/* 80079564 */ void CalcPlane();
	/* 80079668 */ void SetTri();
	/* 80079770 */ void BlckConnect(u16*, int*, int);
	/* 800797BC */ void ClassifyPlane();
	/* 8007998C */ void MakeBlckTransMinMax(cXyz*, cXyz*);
	/* 800799E0 */ void MakeBlckMinMax(int, cXyz*, cXyz*);
	/* 80079A68 */ void MakeBlckBnd(int, cXyz*, cXyz*);
	/* 80079BDC */ void MakeNodeTreeRp(int);
	/* 80079CC4 */ void MakeNodeTreeGrpRp(int);
	/* 80079DF0 */ void MakeNodeTree();
	/* 80079EEC */ void ChkMemoryError();
	/* 80079F38 */ void Set(cBgD_t*, u32, f32 (* )[3][4]);
	/* 8007A200 */ void RwgLineCheck(u16, cBgS_LinChk*);
	/* 8007A3A0 */ void LineCheckRp(cBgS_LinChk*, int);
	/* 8007A52C */ void LineCheckGrpRp(cBgS_LinChk*, int, int);
	/* 8007A658 */ void LineCheck(cBgS_LinChk*);
	/* 8007A680 */ void RwgGroundCheckCommon(f32, u16, cBgS_GndChk*);
	/* 8007A774 */ void RwgGroundCheckGnd(u16, cBgS_GndChk*);
	/* 8007A824 */ void RwgGroundCheckWall(u16, cBgS_GndChk*);
	/* 8007A8F4 */ void GroundCrossRp(cBgS_GndChk*, int);
	/* 8007AA50 */ void GroundCrossGrpRp(cBgS_GndChk*, int, int);
	/* 8007AB9C */ void GroundCross(cBgS_GndChk*);
	/* 8007ABC4 */ void CopyOldMtx();
	/* 8007AC10 */ void Move();
	/* 8007ADF0 */ void RwgShdwDraw(int, cBgS_ShdwDraw*);
	/* 8007AEA4 */ void ShdwDrawRp(cBgS_ShdwDraw*, int);
	/* 8007AFC0 */ void ShdwDrawGrpRp(cBgS_ShdwDraw*, int);
	/* 8007B084 */ void ShdwDraw(cBgS_ShdwDraw*);
	/* 8007B0A8 */ bool ChkPolyThrough(int, cBgS_PolyPassChk*);
	/* 8007B0B0 */ void ChkShdwDrawThrough(int, cBgS_PolyPassChk*);
	/* 8007B0DC */ bool ChkGrpThrough(int, cBgS_GrpPassChk*, int);
	/* 8007B0E4 */ void GetGrpRoomIndex(cBgS_PolyInfo const&) const;
	/* 8007B164 */ void GetBnd() const;
	/* 8007B17C */ void GetTrans(cXyz*) const;
	/* 8007B1B4 */ void GetTriPnt(cBgS_PolyInfo const&, cXyz*, cXyz*, cXyz*) const;
	/* 8007B240 */ void GetTopUnder(f32*, f32*) const;
	/* 8007B270 */ void GetTriPla(cBgS_PolyInfo const&) const;
	/* 8007B2B0 */ void GetGrpInf(cBgS_PolyInfo const&) const;
	/* 8007B2F4 */ void GetPolyInfId(int) const;
	/* 8007B30C */ void GetPolyInf0(int, u32, u32) const;
	/* 8007B360 */ void GetMaskPolyInf0_NoShift(int, u32) const;
	/* 8007B654 */ void GetPolyInf1(int, u32, u32) const;
	/* 8007B78C */ void GetMaskPolyInf1_NoShift(int, u32) const;
	/* 8007B824 */ void GetPolyInf2(int, u32, u32) const;
	/* 8007B930 */ void GetTriGrp(int) const;
	/* 8007B948 */ void ChkNotReady() const;
	/* 8007B958 */ void ChkLock() const;
	/* 8007B964 */ void ChkMoveBg() const;
};

struct cBgW_TriElm {
	/* 800796F8 */ ~cBgW_TriElm();
	/* 80079754 */ cBgW_TriElm();
};

struct cBgW_GrpElm {
	/* 8007A184 */ ~cBgW_GrpElm();
	/* 8007A1E4 */ cBgW_GrpElm();
};

struct cM3dGPla {
	/* 8026F57C */ void getCrossY(cXyz const&, f32*) const;
};

struct Vec {
};

struct cM3dGTri {
	/* 8007A344 */ ~cM3dGTri();
	/* 8026F85C */ void setBg(Vec const*, Vec const*, Vec const*, cM3dGPla const*);
};

struct dBgS_RoofChk {
};

struct dBgS_SphChk {
};

struct dBgS_Acch {
	/* 800771E4 */ void GetSpeedY();
	/* 80077200 */ void GetWallAddY(Vec&);
	/* 80077288 */ void SetWallPolyIndex(int, int);
	/* 800772E8 */ void CalcMovePosWork();
};

struct fopAc_ac_c {
};

struct dBgS_CaptPoly {
};

struct dBgS_SplGrpChk {
};

struct csXyz {
};

struct dBgW {
	/* 8007B3AC */ void GetExitId(cBgS_PolyInfo const&);
	/* 8007B3D8 */ void GetPolyColor(cBgS_PolyInfo const&);
	/* 8007B404 */ void GetHorseNoEntry(cBgS_PolyInfo const&);
	/* 8007B430 */ void GetSpecialCode(cBgS_PolyInfo const&);
	/* 8007B460 */ void GetSpecialCode(int);
	/* 8007B488 */ void GetMagnetCode(cBgS_PolyInfo const&);
	/* 8007B4B4 */ void GetMonkeyBarsCode(cBgS_PolyInfo const&);
	/* 8007B4E0 */ void GetPolyObjThrough(int);
	/* 8007B504 */ void GetPolyCamThrough(int);
	/* 8007B52C */ void GetPolyLinkThrough(int);
	/* 8007B550 */ void GetPolyArrowThrough(int);
	/* 8007B574 */ void GetPolyHSStick(int);
	/* 8007B598 */ void GetPolyBoomerangThrough(int);
	/* 8007B5BC */ void GetPolyRopeThrough(int);
	/* 8007B5E0 */ void GetPolyBombThrough(int);
	/* 8007B604 */ void GetShdwThrough(int);
	/* 8007B630 */ void GetUnderwaterRoofCode(int);
	/* 8007B6AC */ void GetLinkNo(cBgS_PolyInfo const&);
	/* 8007B6D8 */ void GetWallCode(cBgS_PolyInfo const&);
	/* 8007B704 */ void GetPolyAtt0(cBgS_PolyInfo const&);
	/* 8007B734 */ void GetPolyAtt1(cBgS_PolyInfo const&);
	/* 8007B760 */ void GetGroundCode(cBgS_PolyInfo const&);
	/* 8007B7DC */ void GetIronBallThrough(int);
	/* 8007B800 */ void GetAttackThrough(int);
	/* 8007B87C */ void GetCamMoveBG(cBgS_PolyInfo const&);
	/* 8007B8A8 */ void GetRoomCamId(cBgS_PolyInfo const&);
	/* 8007B8D8 */ void GetRoomPathId(cBgS_PolyInfo const&);
	/* 8007B904 */ void GetRoomPathPntNo(cBgS_PolyInfo const&);
	/* 8007B970 */ dBgW();
	/* 8007B9C0 */ void Move();
	/* 8007B9EC */ void positionWallCorrect(dBgS_Acch*, f32, cM3dGPla&, cXyz*, f32);
	/* 8007BA40 */ void RwgWallCorrect(dBgS_Acch*, u16);
	/* 8007C234 */ void WallCorrectRp(dBgS_Acch*, int);
	/* 8007C360 */ void WallCorrectGrpRp(dBgS_Acch*, int, int);
	/* 8007C484 */ void WallCorrect(dBgS_Acch*);
	/* 8007C4AC */ void RwgWallCorrectSort(dBgS_Acch*, u16);
	/* 8007C714 */ void WallCorrectRpSort(dBgS_Acch*, int);
	/* 8007C808 */ void WallCorrectGrpRpSort(dBgS_Acch*, int, int);
	/* 8007C910 */ void WallCorrectSort(dBgS_Acch*);
	/* 8007D0DC */ void RwgRoofChk(u16, dBgS_RoofChk*);
	/* 8007D208 */ void RoofChkRp(dBgS_RoofChk*, int);
	/* 8007D330 */ void RoofChkGrpRp(dBgS_RoofChk*, int, int);
	/* 8007D470 */ void RoofChk(dBgS_RoofChk*);
	/* 8007D498 */ void RwgSplGrpChk(u16, dBgS_SplGrpChk*);
	/* 8007D5C4 */ void SplGrpChkRp(dBgS_SplGrpChk*, int);
	/* 8007D6F0 */ void SplGrpChkGrpRp(dBgS_SplGrpChk*, int, int);
	/* 8007D830 */ void SplGrpChk(dBgS_SplGrpChk*);
	/* 8007D858 */ void RwgCaptPoly(int, dBgS_CaptPoly&);
	/* 8007D8E8 */ void CaptPolyRp(dBgS_CaptPoly&, int);
	/* 8007DA04 */ void CaptPolyGrpRp(dBgS_CaptPoly&, int, int);
	/* 8007DAF8 */ void CaptPoly(dBgS_CaptPoly&);
	/* 8007DB20 */ void RwgSphChk(u16, dBgS_SphChk*, void*);
	/* 8007DC70 */ void SphChkRp(dBgS_SphChk*, void*, int);
	/* 8007DDE0 */ void SphChkGrpRp(dBgS_SphChk*, void*, int, int);
	/* 8007DF00 */ void SphChk(dBgS_SphChk*, void*);
	/* 8007DF28 */ void GetPolyGrpRoomInfId(cBgS_PolyInfo const&);
	/* 8007DF58 */ void GetGrpSoundId(cBgS_PolyInfo const&);
	/* 8007DF88 */ void CrrPos(cBgS_PolyInfo const&, void*, bool, cXyz*, csXyz*, csXyz*);
	/* 8007DFC4 */ void TransPos(cBgS_PolyInfo const&, void*, bool, cXyz*, csXyz*, csXyz*);
	/* 8007E000 */ void MatrixCrrPos(cBgS_PolyInfo const&, void*, bool, cXyz*, csXyz*, csXyz*);
	/* 8007E02C */ void ChkPolyThrough(int, cBgS_PolyPassChk*);
	/* 8007E360 */ void ChkShdwDrawThrough(int, cBgS_PolyPassChk*);
	/* 8007E3D8 */ void ChkGrpThrough(int, cBgS_GrpPassChk*, int);
	/* 8007E444 */ void CallRideCallBack(fopAc_ac_c*, fopAc_ac_c*);
	/* 8007E474 */ void CallArrowStickCallBack(fopAc_ac_c*, fopAc_ac_c*, cXyz&);
	/* 8007E4A4 */ void OffMoveFlag();
	/* 8007E4B4 */ void ChkMoveFlag() const;
	/* 8007E548 */ ~dBgW();
};

struct dBgW_Base {
	/* 80074AB4 */ void SetOldShapeAngleY(s16);
	/* 8007E5A8 */ dBgW_Base();
	/* 8007E640 */ ~dBgW_Base();
	/* 8007E6D8 */ void CallRideCallBack(fopAc_ac_c*, fopAc_ac_c*);
	/* 8007E6DC */ void CallArrowStickCallBack(fopAc_ac_c*, fopAc_ac_c*, cXyz&);
};

struct dBgS_PolyPassChk {
	/* 80078F04 */ void ChkNoHorse();
};

struct cM2dGCir {
};

struct cM3dGAab {
	/* 8026EC88 */ void CrossY(cXyz const*) const;
	/* 8026ECD0 */ void UnderPlaneYUnder(f32) const;
	/* 8026ECE4 */ void TopPlaneYUnder(f32) const;
	/* 8026ECF8 */ void ClearForMinMax();
	/* 8026ED1C */ void SetMinMax(cXyz const&);
	/* 8026EDA4 */ void SetMin(cXyz const&);
	/* 8026EDE4 */ void SetMax(cXyz const&);
};

struct cM3dGCyl {
};

struct cM3dGSph {
};

struct cM3dGLin {
	/* 8026F3C0 */ void SetEnd(cXyz const&);
};

// 
// Forward References:
// 

void dBgW_NewSet(cBgD_t*, u32, f32 (* )[3][4]); // 2

extern "C" void __ct__11cBgW_RwgElmFv(); // 1
extern "C" void __dt__11cBgW_RwgElmFv(); // 1
extern "C" void __ct__13cBgW_NodeTreeFv(); // 1
extern "C" void __dt__13cBgW_NodeTreeFv(); // 1
extern "C" void __ct__4cBgWFv(); // 1
extern "C" void __dt__4cBgWFv(); // 1
extern "C" void FreeArea__4cBgWFv(); // 1
extern "C" void GlobalVtx__4cBgWFv(); // 1
extern "C" void SetVtx__4cBgWFv(); // 1
extern "C" void CalcPlane__4cBgWFv(); // 1
extern "C" void SetTri__4cBgWFv(); // 1
extern "C" void __dt__11cBgW_TriElmFv(); // 1
extern "C" void __ct__11cBgW_TriElmFv(); // 1
extern "C" void BlckConnect__4cBgWFPUsPii(); // 1
extern "C" void ClassifyPlane__4cBgWFv(); // 1
extern "C" void MakeBlckTransMinMax__4cBgWFP4cXyzP4cXyz(); // 1
extern "C" void MakeBlckMinMax__4cBgWFiP4cXyzP4cXyz(); // 1
extern "C" void MakeBlckBnd__4cBgWFiP4cXyzP4cXyz(); // 1
extern "C" void MakeNodeTreeRp__4cBgWFi(); // 1
extern "C" void MakeNodeTreeGrpRp__4cBgWFi(); // 1
extern "C" void MakeNodeTree__4cBgWFv(); // 1
extern "C" void ChkMemoryError__4cBgWFv(); // 1
extern "C" void Set__4cBgWFP6cBgD_tUlPA3_A4_f(); // 1
extern "C" void __dt__11cBgW_GrpElmFv(); // 1
extern "C" void __ct__11cBgW_GrpElmFv(); // 1
extern "C" void RwgLineCheck__4cBgWFUsP11cBgS_LinChk(); // 1
extern "C" void __dt__8cM3dGTriFv(); // 1
extern "C" void LineCheckRp__4cBgWFP11cBgS_LinChki(); // 1
extern "C" void LineCheckGrpRp__4cBgWFP11cBgS_LinChkii(); // 1
extern "C" void LineCheck__4cBgWFP11cBgS_LinChk(); // 1
extern "C" void RwgGroundCheckCommon__4cBgWFfUsP11cBgS_GndChk(); // 1
extern "C" void RwgGroundCheckGnd__4cBgWFUsP11cBgS_GndChk(); // 1
extern "C" void RwgGroundCheckWall__4cBgWFUsP11cBgS_GndChk(); // 1
extern "C" void GroundCrossRp__4cBgWFP11cBgS_GndChki(); // 1
extern "C" void GroundCrossGrpRp__4cBgWFP11cBgS_GndChkii(); // 1
extern "C" void GroundCross__4cBgWFP11cBgS_GndChk(); // 1
extern "C" void CopyOldMtx__4cBgWFv(); // 1
extern "C" void Move__4cBgWFv(); // 1
extern "C" void RwgShdwDraw__4cBgWFiP13cBgS_ShdwDraw(); // 1
extern "C" void ShdwDrawRp__4cBgWFP13cBgS_ShdwDrawi(); // 1
extern "C" void ShdwDrawGrpRp__4cBgWFP13cBgS_ShdwDrawi(); // 1
extern "C" void ShdwDraw__4cBgWFP13cBgS_ShdwDraw(); // 1
extern "C" bool ChkPolyThrough__4cBgWFiP16cBgS_PolyPassChk(); // 1
extern "C" void ChkShdwDrawThrough__4cBgWFiP16cBgS_PolyPassChk(); // 1
extern "C" bool ChkGrpThrough__4cBgWFiP15cBgS_GrpPassChki(); // 1
extern "C" void GetGrpRoomIndex__4cBgWCFRC13cBgS_PolyInfo(); // 1
extern "C" void GetBnd__4cBgWCFv(); // 1
extern "C" void GetTrans__4cBgWCFP4cXyz(); // 1
extern "C" void GetTriPnt__4cBgWCFRC13cBgS_PolyInfoP4cXyzP4cXyzP4cXyz(); // 1
extern "C" void GetTopUnder__4cBgWCFPfPf(); // 1
extern "C" void GetTriPla__4cBgWCFRC13cBgS_PolyInfo(); // 1
extern "C" void GetGrpInf__4cBgWCFRC13cBgS_PolyInfo(); // 1
extern "C" void GetPolyInfId__4cBgWCFi(); // 1
extern "C" void GetPolyInf0__4cBgWCFiUlUl(); // 1
extern "C" void GetMaskPolyInf0_NoShift__4cBgWCFiUl(); // 1
extern "C" void GetExitId__4dBgWFRC13cBgS_PolyInfo(); // 1
extern "C" void GetPolyColor__4dBgWFRC13cBgS_PolyInfo(); // 1
extern "C" void GetHorseNoEntry__4dBgWFRC13cBgS_PolyInfo(); // 1
extern "C" void GetSpecialCode__4dBgWFRC13cBgS_PolyInfo(); // 1
extern "C" void GetSpecialCode__4dBgWFi(); // 1
extern "C" void GetMagnetCode__4dBgWFRC13cBgS_PolyInfo(); // 1
extern "C" void GetMonkeyBarsCode__4dBgWFRC13cBgS_PolyInfo(); // 1
extern "C" void GetPolyObjThrough__4dBgWFi(); // 1
extern "C" void GetPolyCamThrough__4dBgWFi(); // 1
extern "C" void GetPolyLinkThrough__4dBgWFi(); // 1
extern "C" void GetPolyArrowThrough__4dBgWFi(); // 1
extern "C" void GetPolyHSStick__4dBgWFi(); // 1
extern "C" void GetPolyBoomerangThrough__4dBgWFi(); // 1
extern "C" void GetPolyRopeThrough__4dBgWFi(); // 1
extern "C" void GetPolyBombThrough__4dBgWFi(); // 1
extern "C" void GetShdwThrough__4dBgWFi(); // 1
extern "C" void GetUnderwaterRoofCode__4dBgWFi(); // 1
extern "C" void GetPolyInf1__4cBgWCFiUlUl(); // 1
extern "C" void GetLinkNo__4dBgWFRC13cBgS_PolyInfo(); // 1
extern "C" void GetWallCode__4dBgWFRC13cBgS_PolyInfo(); // 1
extern "C" void GetPolyAtt0__4dBgWFRC13cBgS_PolyInfo(); // 1
extern "C" void GetPolyAtt1__4dBgWFRC13cBgS_PolyInfo(); // 1
extern "C" void GetGroundCode__4dBgWFRC13cBgS_PolyInfo(); // 1
extern "C" void GetMaskPolyInf1_NoShift__4cBgWCFiUl(); // 1
extern "C" void GetIronBallThrough__4dBgWFi(); // 1
extern "C" void GetAttackThrough__4dBgWFi(); // 1
extern "C" void GetPolyInf2__4cBgWCFiUlUl(); // 1
extern "C" void GetCamMoveBG__4dBgWFRC13cBgS_PolyInfo(); // 1
extern "C" void GetRoomCamId__4dBgWFRC13cBgS_PolyInfo(); // 1
extern "C" void GetRoomPathId__4dBgWFRC13cBgS_PolyInfo(); // 1
extern "C" void GetRoomPathPntNo__4dBgWFRC13cBgS_PolyInfo(); // 1
extern "C" void GetTriGrp__4cBgWCFi(); // 1
extern "C" void ChkNotReady__4cBgWCFv(); // 1
extern "C" void ChkLock__4cBgWCFv(); // 1
extern "C" void ChkMoveBg__4cBgWCFv(); // 1
extern "C" void __ct__4dBgWFv(); // 1
extern "C" void Move__4dBgWFv(); // 1
extern "C" void positionWallCorrect__4dBgWFP9dBgS_AcchfR8cM3dGPlaP4cXyzf(); // 1
extern "C" void RwgWallCorrect__4dBgWFP9dBgS_AcchUs(); // 1
extern "C" void WallCorrectRp__4dBgWFP9dBgS_Acchi(); // 1
extern "C" void WallCorrectGrpRp__4dBgWFP9dBgS_Acchii(); // 1
extern "C" void WallCorrect__4dBgWFP9dBgS_Acch(); // 1
extern "C" void RwgWallCorrectSort__4dBgWFP9dBgS_AcchUs(); // 1
extern "C" void WallCorrectRpSort__4dBgWFP9dBgS_Acchi(); // 1
extern "C" void WallCorrectGrpRpSort__4dBgWFP9dBgS_Acchii(); // 1
extern "C" void WallCorrectSort__4dBgWFP9dBgS_Acch(); // 1
extern "C" void RwgRoofChk__4dBgWFUsP12dBgS_RoofChk(); // 1
extern "C" void RoofChkRp__4dBgWFP12dBgS_RoofChki(); // 1
extern "C" void RoofChkGrpRp__4dBgWFP12dBgS_RoofChkii(); // 1
extern "C" void RoofChk__4dBgWFP12dBgS_RoofChk(); // 1
extern "C" void RwgSplGrpChk__4dBgWFUsP14dBgS_SplGrpChk(); // 1
extern "C" void SplGrpChkRp__4dBgWFP14dBgS_SplGrpChki(); // 1
extern "C" void SplGrpChkGrpRp__4dBgWFP14dBgS_SplGrpChkii(); // 1
extern "C" void SplGrpChk__4dBgWFP14dBgS_SplGrpChk(); // 1
extern "C" void RwgCaptPoly__4dBgWFiR13dBgS_CaptPoly(); // 1
extern "C" void CaptPolyRp__4dBgWFR13dBgS_CaptPolyi(); // 1
extern "C" void CaptPolyGrpRp__4dBgWFR13dBgS_CaptPolyii(); // 1
extern "C" void CaptPoly__4dBgWFR13dBgS_CaptPoly(); // 1
extern "C" void RwgSphChk__4dBgWFUsP11dBgS_SphChkPv(); // 1
extern "C" void SphChkRp__4dBgWFP11dBgS_SphChkPvi(); // 1
extern "C" void SphChkGrpRp__4dBgWFP11dBgS_SphChkPvii(); // 1
extern "C" void SphChk__4dBgWFP11dBgS_SphChkPv(); // 1
extern "C" void GetPolyGrpRoomInfId__4dBgWFRC13cBgS_PolyInfo(); // 1
extern "C" void GetGrpSoundId__4dBgWFRC13cBgS_PolyInfo(); // 1
extern "C" void CrrPos__4dBgWFRC13cBgS_PolyInfoPvbP4cXyzP5csXyzP5csXyz(); // 1
extern "C" void TransPos__4dBgWFRC13cBgS_PolyInfoPvbP4cXyzP5csXyzP5csXyz(); // 1
extern "C" void MatrixCrrPos__4dBgWFRC13cBgS_PolyInfoPvbP4cXyzP5csXyzP5csXyz(); // 1
extern "C" void ChkPolyThrough__4dBgWFiP16cBgS_PolyPassChk(); // 1
extern "C" void ChkShdwDrawThrough__4dBgWFiP16cBgS_PolyPassChk(); // 1
extern "C" void ChkGrpThrough__4dBgWFiP15cBgS_GrpPassChki(); // 1
extern "C" void CallRideCallBack__4dBgWFP10fopAc_ac_cP10fopAc_ac_c(); // 1
extern "C" void CallArrowStickCallBack__4dBgWFP10fopAc_ac_cP10fopAc_ac_cR4cXyz(); // 1
extern "C" void OffMoveFlag__4dBgWFv(); // 1
extern "C" void ChkMoveFlag__4dBgWCFv(); // 1
extern "C" void dBgW_NewSet__FP6cBgD_tUlPA3_A4_f(); // 1
extern "C" void __dt__4dBgWFv(); // 1
extern "C" extern void* __vt__4dBgW[65];
extern "C" extern void* __vt__8cM3dGTri[3];
extern "C" extern u8 struct_80450F88[8];

// 
// External References:
// 

void cM_atan2s(f32, f32); // 2
void cM_rndF(f32); // 2
void cBgW_CheckBGround(f32); // 2
void cBgW_CheckBRoof(f32); // 2
void cM2d_CrossCirLin(cM2dGCir&, f32, f32, f32, f32, f32*, f32*); // 2
void cM3d_Len2dSq(f32, f32, f32, f32); // 2
void cM3d_Len2dSqPntAndSegLine(f32, f32, f32, f32, f32, f32, f32*, f32*, f32*); // 2
void cM3d_CalcPla(Vec const*, Vec const*, Vec const*, Vec*, f32*); // 2
void cM3d_Cross_AabAab(cM3dGAab const*, cM3dGAab const*); // 2
void cM3d_Cross_AabCyl(cM3dGAab const*, cM3dGCyl const*); // 2
void cM3d_Cross_AabSph(cM3dGAab const*, cM3dGSph const*); // 2
void cM3d_Cross_MinMaxBoxLine(Vec const*, Vec const*, Vec const*, Vec const*); // 2
void cM3d_CrossY_Tri(Vec const&, Vec const&, Vec const&, cM3dGPla const&, Vec const*); // 2
void cM3d_CrossY_Tri_Front(Vec const&, Vec const&, Vec const&, Vec const*); // 2
void cM3d_Cross_LinTri(cM3dGLin const*, cM3dGTri const*, Vec*, bool, bool); // 2
void cM3d_Cross_SphTri(cM3dGSph const*, cM3dGTri const*, Vec*); // 2
void* operator new(u32); // 2
void* operator new[](u32); // 2
void operator delete(void*); // 2
extern "C" void PSMTXIdentity(); // 1
extern "C" void PSMTXCopy(); // 1
extern "C" void PSMTXMultVec(); // 1
extern "C" void PSVECAdd(); // 1
extern "C" void PSVECDotProduct(); // 1
extern "C" void __construct_new_array(); // 1
extern "C" void __ptmf_scall(); // 1
extern "C" void _savegpr_22(); // 1
extern "C" void _savegpr_23(); // 1
extern "C" void _savegpr_24(); // 1
extern "C" void _savegpr_25(); // 1
extern "C" void _savegpr_26(); // 1
extern "C" void _savegpr_27(); // 1
extern "C" void _savegpr_28(); // 1
extern "C" void _savegpr_29(); // 1
extern "C" void _restgpr_22(); // 1
extern "C" void _restgpr_23(); // 1
extern "C" void _restgpr_24(); // 1
extern "C" void _restgpr_25(); // 1
extern "C" void _restgpr_26(); // 1
extern "C" void _restgpr_27(); // 1
extern "C" void _restgpr_28(); // 1
extern "C" void _restgpr_29(); // 1

extern "C" void SetOldShapeAngleY__9dBgW_BaseFs(); // 1
extern "C" void GetSpeedY__9dBgS_AcchFv(); // 1
extern "C" void GetWallAddY__9dBgS_AcchFR3Vec(); // 1
extern "C" void SetWallPolyIndex__9dBgS_AcchFii(); // 1
extern "C" void CalcMovePosWork__9dBgS_AcchFv(); // 1
extern "C" void ChkNoHorse__16dBgS_PolyPassChkFv(); // 1
extern "C" void __ct__9dBgW_BaseFv(); // 1
extern "C" void __dt__9dBgW_BaseFv(); // 1
extern "C" void CallRideCallBack__9dBgW_BaseFP10fopAc_ac_cP10fopAc_ac_c(); // 1
extern "C" void CallArrowStickCallBack__9dBgW_BaseFP10fopAc_ac_cP10fopAc_ac_cR4cXyz(); // 1
extern "C" void cM_atan2s__Fff(); // 1
extern "C" void cM_rndF__Ff(); // 1
extern "C" void SetPolyIndex__13cBgS_PolyInfoFi(); // 1
extern "C" void cBgW_CheckBGround__Ff(); // 1
extern "C" void cBgW_CheckBRoof__Ff(); // 1
extern "C" void cM2d_CrossCirLin__FR8cM2dGCirffffPfPf(); // 1
extern "C" void cM3d_Len2dSq__Fffff(); // 1
extern "C" void cM3d_Len2dSqPntAndSegLine__FffffffPfPfPf(); // 1
extern "C" void cM3d_CalcPla__FPC3VecPC3VecPC3VecP3VecPf(); // 1
extern "C" void cM3d_Cross_AabAab__FPC8cM3dGAabPC8cM3dGAab(); // 1
extern "C" void cM3d_Cross_AabCyl__FPC8cM3dGAabPC8cM3dGCyl(); // 1
extern "C" void cM3d_Cross_AabSph__FPC8cM3dGAabPC8cM3dGSph(); // 1
extern "C" void cM3d_Cross_MinMaxBoxLine__FPC3VecPC3VecPC3VecPC3Vec(); // 1
extern "C" void cM3d_CrossY_Tri__FRC3VecRC3VecRC3VecRC8cM3dGPlaPC3Vec(); // 1
extern "C" void cM3d_CrossY_Tri_Front__FRC3VecRC3VecRC3VecPC3Vec(); // 1
extern "C" void cM3d_Cross_LinTri__FPC8cM3dGLinPC8cM3dGTriP3Vecbb(); // 1
extern "C" void cM3d_Cross_SphTri__FPC8cM3dGSphPC8cM3dGTriP3Vec(); // 1
extern "C" void CrossY__8cM3dGAabCFPC4cXyz(); // 1
extern "C" void UnderPlaneYUnder__8cM3dGAabCFf(); // 1
extern "C" void TopPlaneYUnder__8cM3dGAabCFf(); // 1
extern "C" void ClearForMinMax__8cM3dGAabFv(); // 1
extern "C" void SetMinMax__8cM3dGAabFRC4cXyz(); // 1
extern "C" void SetMin__8cM3dGAabFRC4cXyz(); // 1
extern "C" void SetMax__8cM3dGAabFRC4cXyz(); // 1
extern "C" void SetEnd__8cM3dGLinFRC4cXyz(); // 1
extern "C" void getCrossY__8cM3dGPlaCFRC4cXyzPf(); // 1
extern "C" void setBg__8cM3dGTriFPC3VecPC3VecPC3VecPC8cM3dGPla(); // 1
extern "C" void* __nw__FUl(); // 1
extern "C" void* __nwa__FUl(); // 1
extern "C" void __dl__FPv(); // 1
extern "C" void PSMTXIdentity(); // 1
extern "C" void PSMTXCopy(); // 1
extern "C" void PSMTXMultVec(); // 1
extern "C" void PSVECAdd(); // 1
extern "C" void PSVECDotProduct(); // 1
extern "C" void __construct_new_array(); // 1
extern "C" void __ptmf_scall(); // 1
extern "C" void _savegpr_22(); // 1
extern "C" void _savegpr_23(); // 1
extern "C" void _savegpr_24(); // 1
extern "C" void _savegpr_25(); // 1
extern "C" void _savegpr_26(); // 1
extern "C" void _savegpr_27(); // 1
extern "C" void _savegpr_28(); // 1
extern "C" void _savegpr_29(); // 1
extern "C" void _restgpr_22(); // 1
extern "C" void _restgpr_23(); // 1
extern "C" void _restgpr_24(); // 1
extern "C" void _restgpr_25(); // 1
extern "C" void _restgpr_26(); // 1
extern "C" void _restgpr_27(); // 1
extern "C" void _restgpr_28(); // 1
extern "C" void _restgpr_29(); // 1
extern "C" extern void* __vt__8cM3dGPla[3];
extern "C" extern void* __vt__8cM3dGAab[3];
extern "C" extern u8 g_dComIfG_gameInfo[122384];
extern "C" extern u8 sincosTable___5JMath[65536];
extern "C" extern f32 G_CM3D_F_ABS_MIN[1 + 1 /* padding */];

// 
// Declarations:
// 

/* ############################################################################################## */
/* 803ABA80-803ABB84 0104+00 rc=3 efc=1 rfr=False None .data      __vt__4dBgW                                                  */
SECTION_DATA void* __vt__4dBgW[65] = {
	/* 0    */ (void*)NULL /* RTTI */,
	/* 1    */ (void*)NULL,
	/* 2    */ (void*)__dt__4dBgWFv,
	/* 3    */ (void*)ChkMemoryError__4cBgWFv,
	/* 4    */ (void*)ChkNotReady__4cBgWCFv,
	/* 5    */ (void*)ChkLock__4cBgWCFv,
	/* 6    */ (void*)ChkMoveBg__4cBgWCFv,
	/* 7    */ (void*)ChkMoveFlag__4dBgWCFv,
	/* 8    */ (void*)GetTriPla__4cBgWCFRC13cBgS_PolyInfo,
	/* 9    */ (void*)GetTriPnt__4cBgWCFRC13cBgS_PolyInfoP4cXyzP4cXyzP4cXyz,
	/* 10   */ (void*)GetBnd__4cBgWCFv,
	/* 11   */ (void*)GetGrpInf__4cBgWCFRC13cBgS_PolyInfo,
	/* 12   */ (void*)OffMoveFlag__4dBgWFv,
	/* 13   */ (void*)GetTopUnder__4cBgWCFPfPf,
	/* 14   */ (void*)SetOldShapeAngleY__9dBgW_BaseFs,
	/* 15   */ (void*)LineCheck__4cBgWFP11cBgS_LinChk,
	/* 16   */ (void*)GroundCross__4cBgWFP11cBgS_GndChk,
	/* 17   */ (void*)ShdwDraw__4cBgWFP13cBgS_ShdwDraw,
	/* 18   */ (void*)CaptPoly__4dBgWFR13dBgS_CaptPoly,
	/* 19   */ (void*)WallCorrect__4dBgWFP9dBgS_Acch,
	/* 20   */ (void*)WallCorrectSort__4dBgWFP9dBgS_Acch,
	/* 21   */ (void*)RoofChk__4dBgWFP12dBgS_RoofChk,
	/* 22   */ (void*)SplGrpChk__4dBgWFP14dBgS_SplGrpChk,
	/* 23   */ (void*)SphChk__4dBgWFP11dBgS_SphChkPv,
	/* 24   */ (void*)GetGrpRoomIndex__4cBgWCFRC13cBgS_PolyInfo,
	/* 25   */ (void*)GetExitId__4dBgWFRC13cBgS_PolyInfo,
	/* 26   */ (void*)GetPolyColor__4dBgWFRC13cBgS_PolyInfo,
	/* 27   */ (void*)GetHorseNoEntry__4dBgWFRC13cBgS_PolyInfo,
	/* 28   */ (void*)GetSpecialCode__4dBgWFRC13cBgS_PolyInfo,
	/* 29   */ (void*)GetSpecialCode__4dBgWFi,
	/* 30   */ (void*)GetMagnetCode__4dBgWFRC13cBgS_PolyInfo,
	/* 31   */ (void*)GetPolyObjThrough__4dBgWFi,
	/* 32   */ (void*)GetPolyCamThrough__4dBgWFi,
	/* 33   */ (void*)GetPolyLinkThrough__4dBgWFi,
	/* 34   */ (void*)GetPolyArrowThrough__4dBgWFi,
	/* 35   */ (void*)GetPolyHSStick__4dBgWFi,
	/* 36   */ (void*)GetPolyBoomerangThrough__4dBgWFi,
	/* 37   */ (void*)GetPolyRopeThrough__4dBgWFi,
	/* 38   */ (void*)GetPolyBombThrough__4dBgWFi,
	/* 39   */ (void*)GetShdwThrough__4dBgWFi,
	/* 40   */ (void*)GetUnderwaterRoofCode__4dBgWFi,
	/* 41   */ (void*)GetMonkeyBarsCode__4dBgWFRC13cBgS_PolyInfo,
	/* 42   */ (void*)GetLinkNo__4dBgWFRC13cBgS_PolyInfo,
	/* 43   */ (void*)GetWallCode__4dBgWFRC13cBgS_PolyInfo,
	/* 44   */ (void*)GetPolyAtt0__4dBgWFRC13cBgS_PolyInfo,
	/* 45   */ (void*)GetPolyAtt1__4dBgWFRC13cBgS_PolyInfo,
	/* 46   */ (void*)GetGroundCode__4dBgWFRC13cBgS_PolyInfo,
	/* 47   */ (void*)GetIronBallThrough__4dBgWFi,
	/* 48   */ (void*)GetAttackThrough__4dBgWFi,
	/* 49   */ (void*)GetCamMoveBG__4dBgWFRC13cBgS_PolyInfo,
	/* 50   */ (void*)GetRoomCamId__4dBgWFRC13cBgS_PolyInfo,
	/* 51   */ (void*)GetRoomPathId__4dBgWFRC13cBgS_PolyInfo,
	/* 52   */ (void*)GetRoomPathPntNo__4dBgWFRC13cBgS_PolyInfo,
	/* 53   */ (void*)GetPolyGrpRoomInfId__4dBgWFRC13cBgS_PolyInfo,
	/* 54   */ (void*)GetGrpSoundId__4dBgWFRC13cBgS_PolyInfo,
	/* 55   */ (void*)CrrPos__4dBgWFRC13cBgS_PolyInfoPvbP4cXyzP5csXyzP5csXyz,
	/* 56   */ (void*)TransPos__4dBgWFRC13cBgS_PolyInfoPvbP4cXyzP5csXyzP5csXyz,
	/* 57   */ (void*)MatrixCrrPos__4dBgWFRC13cBgS_PolyInfoPvbP4cXyzP5csXyzP5csXyz,
	/* 58   */ (void*)CallRideCallBack__4dBgWFP10fopAc_ac_cP10fopAc_ac_c,
	/* 59   */ (void*)CallArrowStickCallBack__4dBgWFP10fopAc_ac_cP10fopAc_ac_cR4cXyz,
	/* 60   */ (void*)CalcPlane__4cBgWFv,
	/* 61   */ (void*)ClassifyPlane__4cBgWFv,
	/* 62   */ (void*)ChkPolyThrough__4dBgWFiP16cBgS_PolyPassChk,
	/* 63   */ (void*)ChkShdwDrawThrough__4dBgWFiP16cBgS_PolyPassChk,
	/* 64   */ (void*)ChkGrpThrough__4dBgWFiP15cBgS_GrpPassChki,
};

/* 803ABB84-803ABB90 000C+00 rc=8 efc=5 rfr=False None .data      __vt__8cM3dGTri                                              */
SECTION_DATA void* __vt__8cM3dGTri[3] = {
	/* 0    */ (void*)NULL /* RTTI */,
	/* 1    */ (void*)NULL,
	/* 2    */ (void*)__dt__8cM3dGTriFv,
};

/* 803ABB90-803ABB9C 000C+00 rc=2 efc=0 rfr=False None .data      __vt__11cBgW_GrpElm                                          */
SECTION_DATA static void* __vt__11cBgW_GrpElm[3] = {
	/* 0    */ (void*)NULL /* RTTI */,
	/* 1    */ (void*)NULL,
	/* 2    */ (void*)__dt__11cBgW_GrpElmFv,
};

/* 803ABB9C-803ABBA8 000C+00 rc=2 efc=0 rfr=False None .data      __vt__11cBgW_TriElm                                          */
SECTION_DATA static void* __vt__11cBgW_TriElm[3] = {
	/* 0    */ (void*)NULL /* RTTI */,
	/* 1    */ (void*)NULL,
	/* 2    */ (void*)__dt__11cBgW_TriElmFv,
};

/* 803ABBA8-803ABCAC 0104+00 rc=2 efc=0 rfr=False None .data      __vt__4cBgW                                                  */
SECTION_DATA static void* __vt__4cBgW[65] = {
	/* 0    */ (void*)NULL /* RTTI */,
	/* 1    */ (void*)NULL,
	/* 2    */ (void*)__dt__4cBgWFv,
	/* 3    */ (void*)ChkMemoryError__4cBgWFv,
	/* 4    */ (void*)ChkNotReady__4cBgWCFv,
	/* 5    */ (void*)ChkLock__4cBgWCFv,
	/* 6    */ (void*)ChkMoveBg__4cBgWCFv,
	/* 7    */ (void*)NULL,
	/* 8    */ (void*)GetTriPla__4cBgWCFRC13cBgS_PolyInfo,
	/* 9    */ (void*)GetTriPnt__4cBgWCFRC13cBgS_PolyInfoP4cXyzP4cXyzP4cXyz,
	/* 10   */ (void*)GetBnd__4cBgWCFv,
	/* 11   */ (void*)GetGrpInf__4cBgWCFRC13cBgS_PolyInfo,
	/* 12   */ (void*)NULL,
	/* 13   */ (void*)GetTopUnder__4cBgWCFPfPf,
	/* 14   */ (void*)SetOldShapeAngleY__9dBgW_BaseFs,
	/* 15   */ (void*)LineCheck__4cBgWFP11cBgS_LinChk,
	/* 16   */ (void*)GroundCross__4cBgWFP11cBgS_GndChk,
	/* 17   */ (void*)ShdwDraw__4cBgWFP13cBgS_ShdwDraw,
	/* 18   */ (void*)NULL,
	/* 19   */ (void*)NULL,
	/* 20   */ (void*)NULL,
	/* 21   */ (void*)NULL,
	/* 22   */ (void*)NULL,
	/* 23   */ (void*)NULL,
	/* 24   */ (void*)GetGrpRoomIndex__4cBgWCFRC13cBgS_PolyInfo,
	/* 25   */ (void*)NULL,
	/* 26   */ (void*)NULL,
	/* 27   */ (void*)NULL,
	/* 28   */ (void*)NULL,
	/* 29   */ (void*)NULL,
	/* 30   */ (void*)NULL,
	/* 31   */ (void*)NULL,
	/* 32   */ (void*)NULL,
	/* 33   */ (void*)NULL,
	/* 34   */ (void*)NULL,
	/* 35   */ (void*)NULL,
	/* 36   */ (void*)NULL,
	/* 37   */ (void*)NULL,
	/* 38   */ (void*)NULL,
	/* 39   */ (void*)NULL,
	/* 40   */ (void*)NULL,
	/* 41   */ (void*)NULL,
	/* 42   */ (void*)NULL,
	/* 43   */ (void*)NULL,
	/* 44   */ (void*)NULL,
	/* 45   */ (void*)NULL,
	/* 46   */ (void*)NULL,
	/* 47   */ (void*)NULL,
	/* 48   */ (void*)NULL,
	/* 49   */ (void*)NULL,
	/* 50   */ (void*)NULL,
	/* 51   */ (void*)NULL,
	/* 52   */ (void*)NULL,
	/* 53   */ (void*)NULL,
	/* 54   */ (void*)NULL,
	/* 55   */ (void*)NULL,
	/* 56   */ (void*)NULL,
	/* 57   */ (void*)NULL,
	/* 58   */ (void*)CallRideCallBack__9dBgW_BaseFP10fopAc_ac_cP10fopAc_ac_c,
	/* 59   */ (void*)CallArrowStickCallBack__9dBgW_BaseFP10fopAc_ac_cP10fopAc_ac_cR4cXyz,
	/* 60   */ (void*)CalcPlane__4cBgWFv,
	/* 61   */ (void*)ClassifyPlane__4cBgWFv,
	/* 62   */ (void*)ChkPolyThrough__4cBgWFiP16cBgS_PolyPassChk,
	/* 63   */ (void*)ChkShdwDrawThrough__4cBgWFiP16cBgS_PolyPassChk,
	/* 64   */ (void*)ChkGrpThrough__4cBgWFiP15cBgS_GrpPassChki,
};

/* 803ABCAC-803ABCB8 000C+00 rc=2 efc=0 rfr=False None .data      __vt__13cBgW_NodeTree                                        */
SECTION_DATA static void* __vt__13cBgW_NodeTree[3] = {
	/* 0    */ (void*)NULL /* RTTI */,
	/* 1    */ (void*)NULL,
	/* 2    */ (void*)__dt__13cBgW_NodeTreeFv,
};

/* 803ABCB8-803ABCC8 000C+04 rc=2 efc=0 rfr=False None .data      __vt__11cBgW_RwgElm                                          */
SECTION_DATA static void* __vt__11cBgW_RwgElm[3 + 1 /* padding */] = {
	/* 0    */ (void*)NULL /* RTTI */,
	/* 1    */ (void*)NULL,
	/* 2    */ (void*)__dt__11cBgW_RwgElmFv,
	/* padding */
	NULL,
};

/* 800791C4-800791D4 0010+00 rc=1 efc=0 rfr=False None .text      __ct__11cBgW_RwgElmFv                                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm cBgW_RwgElm::cBgW_RwgElm() {
	nofralloc
#include "asm/d/bg/d_bg_w/__ct__11cBgW_RwgElmFv.s"
}
#pragma pop


/* 800791D4-8007921C 0048+00 rc=2 efc=0 rfr=False None .text      __dt__11cBgW_RwgElmFv                                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm cBgW_RwgElm::~cBgW_RwgElm() {
	nofralloc
#include "asm/d/bg/d_bg_w/__dt__11cBgW_RwgElmFv.s"
}
#pragma pop


/* 8007921C-80079238 001C+00 rc=1 efc=0 rfr=False None .text      __ct__13cBgW_NodeTreeFv                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm cBgW_NodeTree::cBgW_NodeTree() {
	nofralloc
#include "asm/d/bg/d_bg_w/__ct__13cBgW_NodeTreeFv.s"
}
#pragma pop


/* 80079238-80079294 005C+00 rc=2 efc=0 rfr=False None .text      __dt__13cBgW_NodeTreeFv                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm cBgW_NodeTree::~cBgW_NodeTree() {
	nofralloc
#include "asm/d/bg/d_bg_w/__dt__13cBgW_NodeTreeFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 804526F8-804526FC 0004+00 rc=6 efc=0 rfr=False None .sdata2    @3717                                                        */
SECTION_SDATA2 static u8 d_bg_d_bg_w__lit_3717[4] = {
	0x00, 0x00, 0x00, 0x00,
};

/* 80079294-8007933C 00A8+00 rc=1 efc=0 rfr=False None .text      __ct__4cBgWFv                                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm cBgW::cBgW() {
	nofralloc
#include "asm/d/bg/d_bg_w/__ct__4cBgWFv.s"
}
#pragma pop


/* 8007933C-800793A4 0068+00 rc=3 efc=1 rfr=False None .text      __dt__4cBgWFv                                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm cBgW::~cBgW() {
	nofralloc
#include "asm/d/bg/d_bg_w/__dt__4cBgWFv.s"
}
#pragma pop


/* 800793A4-800793C4 0020+00 rc=2 efc=0 rfr=False None .text      FreeArea__4cBgWFv                                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::FreeArea() {
	nofralloc
#include "asm/d/bg/d_bg_w/FreeArea__4cBgWFv.s"
}
#pragma pop


/* 800793C4-80079484 00C0+00 rc=2 efc=0 rfr=False None .text      GlobalVtx__4cBgWFv                                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::GlobalVtx() {
	nofralloc
#include "asm/d/bg/d_bg_w/GlobalVtx__4cBgWFv.s"
}
#pragma pop


/* 80079484-80079564 00E0+00 rc=1 efc=0 rfr=False None .text      SetVtx__4cBgWFv                                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::SetVtx() {
	nofralloc
#include "asm/d/bg/d_bg_w/SetVtx__4cBgWFv.s"
}
#pragma pop


/* 80079564-80079668 0104+00 rc=3 efc=1 rfr=False None .text      CalcPlane__4cBgWFv                                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::CalcPlane() {
	nofralloc
#include "asm/d/bg/d_bg_w/CalcPlane__4cBgWFv.s"
}
#pragma pop


/* 80079668-800796F8 0090+00 rc=1 efc=0 rfr=False None .text      SetTri__4cBgWFv                                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::SetTri() {
	nofralloc
#include "asm/d/bg/d_bg_w/SetTri__4cBgWFv.s"
}
#pragma pop


/* 800796F8-80079754 005C+00 rc=2 efc=0 rfr=False None .text      __dt__11cBgW_TriElmFv                                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm cBgW_TriElm::~cBgW_TriElm() {
	nofralloc
#include "asm/d/bg/d_bg_w/__dt__11cBgW_TriElmFv.s"
}
#pragma pop


/* 80079754-80079770 001C+00 rc=1 efc=0 rfr=False None .text      __ct__11cBgW_TriElmFv                                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm cBgW_TriElm::cBgW_TriElm() {
	nofralloc
#include "asm/d/bg/d_bg_w/__ct__11cBgW_TriElmFv.s"
}
#pragma pop


/* 80079770-800797BC 004C+00 rc=1 efc=0 rfr=False None .text      BlckConnect__4cBgWFPUsPii                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::BlckConnect(u16* field_0, int* field_1, int field_2) {
	nofralloc
#include "asm/d/bg/d_bg_w/BlckConnect__4cBgWFPUsPii.s"
}
#pragma pop


/* 800797BC-8007998C 01D0+00 rc=3 efc=1 rfr=False None .text      ClassifyPlane__4cBgWFv                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::ClassifyPlane() {
	nofralloc
#include "asm/d/bg/d_bg_w/ClassifyPlane__4cBgWFv.s"
}
#pragma pop


/* 8007998C-800799E0 0054+00 rc=1 efc=0 rfr=False None .text      MakeBlckTransMinMax__4cBgWFP4cXyzP4cXyz                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::MakeBlckTransMinMax(cXyz* field_0, cXyz* field_1) {
	nofralloc
#include "asm/d/bg/d_bg_w/MakeBlckTransMinMax__4cBgWFP4cXyzP4cXyz.s"
}
#pragma pop


/* 800799E0-80079A68 0088+00 rc=1 efc=0 rfr=False None .text      MakeBlckMinMax__4cBgWFiP4cXyzP4cXyz                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::MakeBlckMinMax(int field_0, cXyz* field_1, cXyz* field_2) {
	nofralloc
#include "asm/d/bg/d_bg_w/MakeBlckMinMax__4cBgWFiP4cXyzP4cXyz.s"
}
#pragma pop


/* ############################################################################################## */
/* 804526FC-80452700 0004+00 rc=1 efc=0 rfr=False None .sdata2    @3935                                                        */
SECTION_SDATA2 static f32 d_bg_d_bg_w__lit_3935 = 1000000000.0f;

/* 80452700-80452704 0004+00 rc=1 efc=0 rfr=False None .sdata2    @3936                                                        */
SECTION_SDATA2 static f32 d_bg_d_bg_w__lit_3936 = -1000000000.0f;

/* 80452704-80452708 0004+00 rc=5 efc=0 rfr=False None .sdata2    @3937                                                        */
SECTION_SDATA2 static f32 d_bg_d_bg_w__lit_3937 = 1.0f;

/* 80079A68-80079BDC 0174+00 rc=1 efc=0 rfr=False None .text      MakeBlckBnd__4cBgWFiP4cXyzP4cXyz                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::MakeBlckBnd(int field_0, cXyz* field_1, cXyz* field_2) {
	nofralloc
#include "asm/d/bg/d_bg_w/MakeBlckBnd__4cBgWFiP4cXyzP4cXyz.s"
}
#pragma pop


/* 80079BDC-80079CC4 00E8+00 rc=1 efc=0 rfr=False None .text      MakeNodeTreeRp__4cBgWFi                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::MakeNodeTreeRp(int field_0) {
	nofralloc
#include "asm/d/bg/d_bg_w/MakeNodeTreeRp__4cBgWFi.s"
}
#pragma pop


/* 80079CC4-80079DF0 012C+00 rc=1 efc=0 rfr=False None .text      MakeNodeTreeGrpRp__4cBgWFi                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::MakeNodeTreeGrpRp(int field_0) {
	nofralloc
#include "asm/d/bg/d_bg_w/MakeNodeTreeGrpRp__4cBgWFi.s"
}
#pragma pop


/* 80079DF0-80079EEC 00FC+00 rc=2 efc=0 rfr=False None .text      MakeNodeTree__4cBgWFv                                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::MakeNodeTree() {
	nofralloc
#include "asm/d/bg/d_bg_w/MakeNodeTree__4cBgWFv.s"
}
#pragma pop


/* 80079EEC-80079F38 004C+00 rc=3 efc=1 rfr=False None .text      ChkMemoryError__4cBgWFv                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::ChkMemoryError() {
	nofralloc
#include "asm/d/bg/d_bg_w/ChkMemoryError__4cBgWFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80452708-8045270C 0004+00 rc=1 efc=0 rfr=False None .sdata2    @4073                                                        */
SECTION_SDATA2 static f32 d_bg_d_bg_w__lit_4073 = 128.0f;

/* 80079F38-8007A184 024C+00 rc=4 efc=3 rfr=False None .text      Set__4cBgWFP6cBgD_tUlPA3_A4_f                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::Set(cBgD_t* field_0, u32 field_1, f32 (* field_2)[3][4]) {
	nofralloc
#include "asm/d/bg/d_bg_w/Set__4cBgWFP6cBgD_tUlPA3_A4_f.s"
}
#pragma pop


/* 8007A184-8007A1E4 0060+00 rc=2 efc=0 rfr=False None .text      __dt__11cBgW_GrpElmFv                                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm cBgW_GrpElm::~cBgW_GrpElm() {
	nofralloc
#include "asm/d/bg/d_bg_w/__dt__11cBgW_GrpElmFv.s"
}
#pragma pop


/* 8007A1E4-8007A200 001C+00 rc=1 efc=0 rfr=False None .text      __ct__11cBgW_GrpElmFv                                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm cBgW_GrpElm::cBgW_GrpElm() {
	nofralloc
#include "asm/d/bg/d_bg_w/__ct__11cBgW_GrpElmFv.s"
}
#pragma pop


/* 8007A200-8007A344 0144+00 rc=1 efc=0 rfr=False None .text      RwgLineCheck__4cBgWFUsP11cBgS_LinChk                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::RwgLineCheck(u16 field_0, cBgS_LinChk* field_1) {
	nofralloc
#include "asm/d/bg/d_bg_w/RwgLineCheck__4cBgWFUsP11cBgS_LinChk.s"
}
#pragma pop


/* 8007A344-8007A3A0 005C+00 rc=1 efc=0 rfr=False None .text      __dt__8cM3dGTriFv                                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm cM3dGTri::~cM3dGTri() {
	nofralloc
#include "asm/d/bg/d_bg_w/__dt__8cM3dGTriFv.s"
}
#pragma pop


/* 8007A3A0-8007A52C 018C+00 rc=1 efc=0 rfr=False None .text      LineCheckRp__4cBgWFP11cBgS_LinChki                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::LineCheckRp(cBgS_LinChk* field_0, int field_1) {
	nofralloc
#include "asm/d/bg/d_bg_w/LineCheckRp__4cBgWFP11cBgS_LinChki.s"
}
#pragma pop


/* 8007A52C-8007A658 012C+00 rc=1 efc=0 rfr=False None .text      LineCheckGrpRp__4cBgWFP11cBgS_LinChkii                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::LineCheckGrpRp(cBgS_LinChk* field_0, int field_1, int field_2) {
	nofralloc
#include "asm/d/bg/d_bg_w/LineCheckGrpRp__4cBgWFP11cBgS_LinChkii.s"
}
#pragma pop


/* 8007A658-8007A680 0028+00 rc=3 efc=1 rfr=False None .text      LineCheck__4cBgWFP11cBgS_LinChk                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::LineCheck(cBgS_LinChk* field_0) {
	nofralloc
#include "asm/d/bg/d_bg_w/LineCheck__4cBgWFP11cBgS_LinChk.s"
}
#pragma pop


/* 8007A680-8007A774 00F4+00 rc=2 efc=0 rfr=False None .text      RwgGroundCheckCommon__4cBgWFfUsP11cBgS_GndChk                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::RwgGroundCheckCommon(f32 field_0, u16 field_1, cBgS_GndChk* field_2) {
	nofralloc
#include "asm/d/bg/d_bg_w/RwgGroundCheckCommon__4cBgWFfUsP11cBgS_GndChk.s"
}
#pragma pop


/* 8007A774-8007A824 00B0+00 rc=1 efc=0 rfr=False None .text      RwgGroundCheckGnd__4cBgWFUsP11cBgS_GndChk                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::RwgGroundCheckGnd(u16 field_0, cBgS_GndChk* field_1) {
	nofralloc
#include "asm/d/bg/d_bg_w/RwgGroundCheckGnd__4cBgWFUsP11cBgS_GndChk.s"
}
#pragma pop


/* ############################################################################################## */
/* 8045270C-80452710 0004+00 rc=1 efc=0 rfr=False None .sdata2    @4271                                                        */
SECTION_SDATA2 static f32 d_bg_d_bg_w__lit_4271 = 0.014000000432133675f;

/* 8007A824-8007A8F4 00D0+00 rc=1 efc=0 rfr=False None .text      RwgGroundCheckWall__4cBgWFUsP11cBgS_GndChk                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::RwgGroundCheckWall(u16 field_0, cBgS_GndChk* field_1) {
	nofralloc
#include "asm/d/bg/d_bg_w/RwgGroundCheckWall__4cBgWFUsP11cBgS_GndChk.s"
}
#pragma pop


/* 8007A8F4-8007AA50 015C+00 rc=1 efc=0 rfr=False None .text      GroundCrossRp__4cBgWFP11cBgS_GndChki                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::GroundCrossRp(cBgS_GndChk* field_0, int field_1) {
	nofralloc
#include "asm/d/bg/d_bg_w/GroundCrossRp__4cBgWFP11cBgS_GndChki.s"
}
#pragma pop


/* 8007AA50-8007AB9C 014C+00 rc=1 efc=0 rfr=False None .text      GroundCrossGrpRp__4cBgWFP11cBgS_GndChkii                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::GroundCrossGrpRp(cBgS_GndChk* field_0, int field_1, int field_2) {
	nofralloc
#include "asm/d/bg/d_bg_w/GroundCrossGrpRp__4cBgWFP11cBgS_GndChkii.s"
}
#pragma pop


/* 8007AB9C-8007ABC4 0028+00 rc=3 efc=1 rfr=False None .text      GroundCross__4cBgWFP11cBgS_GndChk                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::GroundCross(cBgS_GndChk* field_0) {
	nofralloc
#include "asm/d/bg/d_bg_w/GroundCross__4cBgWFP11cBgS_GndChk.s"
}
#pragma pop


/* 8007ABC4-8007AC10 004C+00 rc=1 efc=0 rfr=False None .text      CopyOldMtx__4cBgWFv                                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::CopyOldMtx() {
	nofralloc
#include "asm/d/bg/d_bg_w/CopyOldMtx__4cBgWFv.s"
}
#pragma pop


/* 8007AC10-8007ADF0 01E0+00 rc=1 efc=0 rfr=False None .text      Move__4cBgWFv                                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::Move() {
	nofralloc
#include "asm/d/bg/d_bg_w/Move__4cBgWFv.s"
}
#pragma pop


/* 8007ADF0-8007AEA4 00B4+00 rc=1 efc=0 rfr=False None .text      RwgShdwDraw__4cBgWFiP13cBgS_ShdwDraw                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::RwgShdwDraw(int field_0, cBgS_ShdwDraw* field_1) {
	nofralloc
#include "asm/d/bg/d_bg_w/RwgShdwDraw__4cBgWFiP13cBgS_ShdwDraw.s"
}
#pragma pop


/* 8007AEA4-8007AFC0 011C+00 rc=1 efc=0 rfr=False None .text      ShdwDrawRp__4cBgWFP13cBgS_ShdwDrawi                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::ShdwDrawRp(cBgS_ShdwDraw* field_0, int field_1) {
	nofralloc
#include "asm/d/bg/d_bg_w/ShdwDrawRp__4cBgWFP13cBgS_ShdwDrawi.s"
}
#pragma pop


/* 8007AFC0-8007B084 00C4+00 rc=1 efc=0 rfr=False None .text      ShdwDrawGrpRp__4cBgWFP13cBgS_ShdwDrawi                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::ShdwDrawGrpRp(cBgS_ShdwDraw* field_0, int field_1) {
	nofralloc
#include "asm/d/bg/d_bg_w/ShdwDrawGrpRp__4cBgWFP13cBgS_ShdwDrawi.s"
}
#pragma pop


/* 8007B084-8007B0A8 0024+00 rc=3 efc=1 rfr=False None .text      ShdwDraw__4cBgWFP13cBgS_ShdwDraw                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::ShdwDraw(cBgS_ShdwDraw* field_0) {
	nofralloc
#include "asm/d/bg/d_bg_w/ShdwDraw__4cBgWFP13cBgS_ShdwDraw.s"
}
#pragma pop


/* 8007B0A8-8007B0B0 0008+00 rc=1 efc=0 rfr=False None .text      ChkPolyThrough__4cBgWFiP16cBgS_PolyPassChk                   */
bool cBgW::ChkPolyThrough(int field_0, cBgS_PolyPassChk* field_1) {
	return false;
}


/* 8007B0B0-8007B0DC 002C+00 rc=1 efc=0 rfr=False None .text      ChkShdwDrawThrough__4cBgWFiP16cBgS_PolyPassChk               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::ChkShdwDrawThrough(int field_0, cBgS_PolyPassChk* field_1) {
	nofralloc
#include "asm/d/bg/d_bg_w/ChkShdwDrawThrough__4cBgWFiP16cBgS_PolyPassChk.s"
}
#pragma pop


/* 8007B0DC-8007B0E4 0008+00 rc=1 efc=0 rfr=False None .text      ChkGrpThrough__4cBgWFiP15cBgS_GrpPassChki                    */
bool cBgW::ChkGrpThrough(int field_0, cBgS_GrpPassChk* field_1, int field_2) {
	return false;
}


/* 8007B0E4-8007B164 0080+00 rc=3 efc=1 rfr=False None .text      GetGrpRoomIndex__4cBgWCFRC13cBgS_PolyInfo                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::GetGrpRoomIndex(cBgS_PolyInfo const& field_0) const {
	nofralloc
#include "asm/d/bg/d_bg_w/GetGrpRoomIndex__4cBgWCFRC13cBgS_PolyInfo.s"
}
#pragma pop


/* 8007B164-8007B17C 0018+00 rc=3 efc=1 rfr=False None .text      GetBnd__4cBgWCFv                                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::GetBnd() const {
	nofralloc
#include "asm/d/bg/d_bg_w/GetBnd__4cBgWCFv.s"
}
#pragma pop


/* 8007B17C-8007B1B4 0038+00 rc=1 efc=1 rfr=False None .text      GetTrans__4cBgWCFP4cXyz                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::GetTrans(cXyz* field_0) const {
	nofralloc
#include "asm/d/bg/d_bg_w/GetTrans__4cBgWCFP4cXyz.s"
}
#pragma pop


/* 8007B1B4-8007B240 008C+00 rc=3 efc=1 rfr=False None .text      GetTriPnt__4cBgWCFRC13cBgS_PolyInfoP4cXyzP4cXyzP4cXyz        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::GetTriPnt(cBgS_PolyInfo const& field_0, cXyz* field_1, cXyz* field_2, cXyz* field_3) const {
	nofralloc
#include "asm/d/bg/d_bg_w/GetTriPnt__4cBgWCFRC13cBgS_PolyInfoP4cXyzP4cXyzP4cXyz.s"
}
#pragma pop


/* 8007B240-8007B270 0030+00 rc=3 efc=1 rfr=False None .text      GetTopUnder__4cBgWCFPfPf                                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::GetTopUnder(f32* field_0, f32* field_1) const {
	nofralloc
#include "asm/d/bg/d_bg_w/GetTopUnder__4cBgWCFPfPf.s"
}
#pragma pop


/* 8007B270-8007B2B0 0040+00 rc=3 efc=1 rfr=False None .text      GetTriPla__4cBgWCFRC13cBgS_PolyInfo                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::GetTriPla(cBgS_PolyInfo const& field_0) const {
	nofralloc
#include "asm/d/bg/d_bg_w/GetTriPla__4cBgWCFRC13cBgS_PolyInfo.s"
}
#pragma pop


/* 8007B2B0-8007B2F4 0044+00 rc=3 efc=1 rfr=False None .text      GetGrpInf__4cBgWCFRC13cBgS_PolyInfo                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::GetGrpInf(cBgS_PolyInfo const& field_0) const {
	nofralloc
#include "asm/d/bg/d_bg_w/GetGrpInf__4cBgWCFRC13cBgS_PolyInfo.s"
}
#pragma pop


/* 8007B2F4-8007B30C 0018+00 rc=5 efc=0 rfr=False None .text      GetPolyInfId__4cBgWCFi                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::GetPolyInfId(int field_0) const {
	nofralloc
#include "asm/d/bg/d_bg_w/GetPolyInfId__4cBgWCFi.s"
}
#pragma pop


/* 8007B30C-8007B360 0054+00 rc=6 efc=0 rfr=False None .text      GetPolyInf0__4cBgWCFiUlUl                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::GetPolyInf0(int field_0, u32 field_1, u32 field_2) const {
	nofralloc
#include "asm/d/bg/d_bg_w/GetPolyInf0__4cBgWCFiUlUl.s"
}
#pragma pop


/* 8007B360-8007B3AC 004C+00 rc=10 efc=0 rfr=False None .text      GetMaskPolyInf0_NoShift__4cBgWCFiUl                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::GetMaskPolyInf0_NoShift(int field_0, u32 field_1) const {
	nofralloc
#include "asm/d/bg/d_bg_w/GetMaskPolyInf0_NoShift__4cBgWCFiUl.s"
}
#pragma pop


/* 8007B3AC-8007B3D8 002C+00 rc=2 efc=1 rfr=False None .text      GetExitId__4dBgWFRC13cBgS_PolyInfo                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::GetExitId(cBgS_PolyInfo const& field_0) {
	nofralloc
#include "asm/d/bg/d_bg_w/GetExitId__4dBgWFRC13cBgS_PolyInfo.s"
}
#pragma pop


/* 8007B3D8-8007B404 002C+00 rc=2 efc=1 rfr=False None .text      GetPolyColor__4dBgWFRC13cBgS_PolyInfo                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::GetPolyColor(cBgS_PolyInfo const& field_0) {
	nofralloc
#include "asm/d/bg/d_bg_w/GetPolyColor__4dBgWFRC13cBgS_PolyInfo.s"
}
#pragma pop


/* 8007B404-8007B430 002C+00 rc=2 efc=1 rfr=False None .text      GetHorseNoEntry__4dBgWFRC13cBgS_PolyInfo                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::GetHorseNoEntry(cBgS_PolyInfo const& field_0) {
	nofralloc
#include "asm/d/bg/d_bg_w/GetHorseNoEntry__4dBgWFRC13cBgS_PolyInfo.s"
}
#pragma pop


/* 8007B430-8007B460 0030+00 rc=2 efc=1 rfr=False None .text      GetSpecialCode__4dBgWFRC13cBgS_PolyInfo                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::GetSpecialCode(cBgS_PolyInfo const& field_0) {
	nofralloc
#include "asm/d/bg/d_bg_w/GetSpecialCode__4dBgWFRC13cBgS_PolyInfo.s"
}
#pragma pop


/* 8007B460-8007B488 0028+00 rc=2 efc=1 rfr=False None .text      GetSpecialCode__4dBgWFi                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::GetSpecialCode(int field_0) {
	nofralloc
#include "asm/d/bg/d_bg_w/GetSpecialCode__4dBgWFi.s"
}
#pragma pop


/* 8007B488-8007B4B4 002C+00 rc=2 efc=1 rfr=False None .text      GetMagnetCode__4dBgWFRC13cBgS_PolyInfo                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::GetMagnetCode(cBgS_PolyInfo const& field_0) {
	nofralloc
#include "asm/d/bg/d_bg_w/GetMagnetCode__4dBgWFRC13cBgS_PolyInfo.s"
}
#pragma pop


/* 8007B4B4-8007B4E0 002C+00 rc=2 efc=1 rfr=False None .text      GetMonkeyBarsCode__4dBgWFRC13cBgS_PolyInfo                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::GetMonkeyBarsCode(cBgS_PolyInfo const& field_0) {
	nofralloc
#include "asm/d/bg/d_bg_w/GetMonkeyBarsCode__4dBgWFRC13cBgS_PolyInfo.s"
}
#pragma pop


/* 8007B4E0-8007B504 0024+00 rc=2 efc=1 rfr=False None .text      GetPolyObjThrough__4dBgWFi                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::GetPolyObjThrough(int field_0) {
	nofralloc
#include "asm/d/bg/d_bg_w/GetPolyObjThrough__4dBgWFi.s"
}
#pragma pop


/* 8007B504-8007B52C 0028+00 rc=2 efc=1 rfr=False None .text      GetPolyCamThrough__4dBgWFi                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::GetPolyCamThrough(int field_0) {
	nofralloc
#include "asm/d/bg/d_bg_w/GetPolyCamThrough__4dBgWFi.s"
}
#pragma pop


/* 8007B52C-8007B550 0024+00 rc=2 efc=1 rfr=False None .text      GetPolyLinkThrough__4dBgWFi                                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::GetPolyLinkThrough(int field_0) {
	nofralloc
#include "asm/d/bg/d_bg_w/GetPolyLinkThrough__4dBgWFi.s"
}
#pragma pop


/* 8007B550-8007B574 0024+00 rc=2 efc=1 rfr=False None .text      GetPolyArrowThrough__4dBgWFi                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::GetPolyArrowThrough(int field_0) {
	nofralloc
#include "asm/d/bg/d_bg_w/GetPolyArrowThrough__4dBgWFi.s"
}
#pragma pop


/* 8007B574-8007B598 0024+00 rc=2 efc=1 rfr=False None .text      GetPolyHSStick__4dBgWFi                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::GetPolyHSStick(int field_0) {
	nofralloc
#include "asm/d/bg/d_bg_w/GetPolyHSStick__4dBgWFi.s"
}
#pragma pop


/* 8007B598-8007B5BC 0024+00 rc=2 efc=1 rfr=False None .text      GetPolyBoomerangThrough__4dBgWFi                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::GetPolyBoomerangThrough(int field_0) {
	nofralloc
#include "asm/d/bg/d_bg_w/GetPolyBoomerangThrough__4dBgWFi.s"
}
#pragma pop


/* 8007B5BC-8007B5E0 0024+00 rc=2 efc=1 rfr=False None .text      GetPolyRopeThrough__4dBgWFi                                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::GetPolyRopeThrough(int field_0) {
	nofralloc
#include "asm/d/bg/d_bg_w/GetPolyRopeThrough__4dBgWFi.s"
}
#pragma pop


/* 8007B5E0-8007B604 0024+00 rc=2 efc=1 rfr=False None .text      GetPolyBombThrough__4dBgWFi                                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::GetPolyBombThrough(int field_0) {
	nofralloc
#include "asm/d/bg/d_bg_w/GetPolyBombThrough__4dBgWFi.s"
}
#pragma pop


/* 8007B604-8007B630 002C+00 rc=2 efc=1 rfr=False None .text      GetShdwThrough__4dBgWFi                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::GetShdwThrough(int field_0) {
	nofralloc
#include "asm/d/bg/d_bg_w/GetShdwThrough__4dBgWFi.s"
}
#pragma pop


/* 8007B630-8007B654 0024+00 rc=2 efc=1 rfr=False None .text      GetUnderwaterRoofCode__4dBgWFi                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::GetUnderwaterRoofCode(int field_0) {
	nofralloc
#include "asm/d/bg/d_bg_w/GetUnderwaterRoofCode__4dBgWFi.s"
}
#pragma pop


/* 8007B654-8007B6AC 0058+00 rc=6 efc=0 rfr=False None .text      GetPolyInf1__4cBgWCFiUlUl                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::GetPolyInf1(int field_0, u32 field_1, u32 field_2) const {
	nofralloc
#include "asm/d/bg/d_bg_w/GetPolyInf1__4cBgWCFiUlUl.s"
}
#pragma pop


/* 8007B6AC-8007B6D8 002C+00 rc=2 efc=1 rfr=False None .text      GetLinkNo__4dBgWFRC13cBgS_PolyInfo                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::GetLinkNo(cBgS_PolyInfo const& field_0) {
	nofralloc
#include "asm/d/bg/d_bg_w/GetLinkNo__4dBgWFRC13cBgS_PolyInfo.s"
}
#pragma pop


/* 8007B6D8-8007B704 002C+00 rc=2 efc=1 rfr=False None .text      GetWallCode__4dBgWFRC13cBgS_PolyInfo                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::GetWallCode(cBgS_PolyInfo const& field_0) {
	nofralloc
#include "asm/d/bg/d_bg_w/GetWallCode__4dBgWFRC13cBgS_PolyInfo.s"
}
#pragma pop


/* 8007B704-8007B734 0030+00 rc=2 efc=1 rfr=False None .text      GetPolyAtt0__4dBgWFRC13cBgS_PolyInfo                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::GetPolyAtt0(cBgS_PolyInfo const& field_0) {
	nofralloc
#include "asm/d/bg/d_bg_w/GetPolyAtt0__4dBgWFRC13cBgS_PolyInfo.s"
}
#pragma pop


/* 8007B734-8007B760 002C+00 rc=2 efc=1 rfr=False None .text      GetPolyAtt1__4dBgWFRC13cBgS_PolyInfo                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::GetPolyAtt1(cBgS_PolyInfo const& field_0) {
	nofralloc
#include "asm/d/bg/d_bg_w/GetPolyAtt1__4dBgWFRC13cBgS_PolyInfo.s"
}
#pragma pop


/* 8007B760-8007B78C 002C+00 rc=2 efc=1 rfr=False None .text      GetGroundCode__4dBgWFRC13cBgS_PolyInfo                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::GetGroundCode(cBgS_PolyInfo const& field_0) {
	nofralloc
#include "asm/d/bg/d_bg_w/GetGroundCode__4dBgWFRC13cBgS_PolyInfo.s"
}
#pragma pop


/* 8007B78C-8007B7DC 0050+00 rc=2 efc=0 rfr=False None .text      GetMaskPolyInf1_NoShift__4cBgWCFiUl                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::GetMaskPolyInf1_NoShift(int field_0, u32 field_1) const {
	nofralloc
#include "asm/d/bg/d_bg_w/GetMaskPolyInf1_NoShift__4cBgWCFiUl.s"
}
#pragma pop


/* 8007B7DC-8007B800 0024+00 rc=2 efc=1 rfr=False None .text      GetIronBallThrough__4dBgWFi                                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::GetIronBallThrough(int field_0) {
	nofralloc
#include "asm/d/bg/d_bg_w/GetIronBallThrough__4dBgWFi.s"
}
#pragma pop


/* 8007B800-8007B824 0024+00 rc=2 efc=1 rfr=False None .text      GetAttackThrough__4dBgWFi                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::GetAttackThrough(int field_0) {
	nofralloc
#include "asm/d/bg/d_bg_w/GetAttackThrough__4dBgWFi.s"
}
#pragma pop


/* 8007B824-8007B87C 0058+00 rc=4 efc=0 rfr=False None .text      GetPolyInf2__4cBgWCFiUlUl                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::GetPolyInf2(int field_0, u32 field_1, u32 field_2) const {
	nofralloc
#include "asm/d/bg/d_bg_w/GetPolyInf2__4cBgWCFiUlUl.s"
}
#pragma pop


/* 8007B87C-8007B8A8 002C+00 rc=2 efc=1 rfr=False None .text      GetCamMoveBG__4dBgWFRC13cBgS_PolyInfo                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::GetCamMoveBG(cBgS_PolyInfo const& field_0) {
	nofralloc
#include "asm/d/bg/d_bg_w/GetCamMoveBG__4dBgWFRC13cBgS_PolyInfo.s"
}
#pragma pop


/* 8007B8A8-8007B8D8 0030+00 rc=2 efc=1 rfr=False None .text      GetRoomCamId__4dBgWFRC13cBgS_PolyInfo                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::GetRoomCamId(cBgS_PolyInfo const& field_0) {
	nofralloc
#include "asm/d/bg/d_bg_w/GetRoomCamId__4dBgWFRC13cBgS_PolyInfo.s"
}
#pragma pop


/* 8007B8D8-8007B904 002C+00 rc=2 efc=1 rfr=False None .text      GetRoomPathId__4dBgWFRC13cBgS_PolyInfo                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::GetRoomPathId(cBgS_PolyInfo const& field_0) {
	nofralloc
#include "asm/d/bg/d_bg_w/GetRoomPathId__4dBgWFRC13cBgS_PolyInfo.s"
}
#pragma pop


/* 8007B904-8007B930 002C+00 rc=2 efc=1 rfr=False None .text      GetRoomPathPntNo__4dBgWFRC13cBgS_PolyInfo                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::GetRoomPathPntNo(cBgS_PolyInfo const& field_0) {
	nofralloc
#include "asm/d/bg/d_bg_w/GetRoomPathPntNo__4dBgWFRC13cBgS_PolyInfo.s"
}
#pragma pop


/* 8007B930-8007B948 0018+00 rc=2 efc=0 rfr=False None .text      GetTriGrp__4cBgWCFi                                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::GetTriGrp(int field_0) const {
	nofralloc
#include "asm/d/bg/d_bg_w/GetTriGrp__4cBgWCFi.s"
}
#pragma pop


/* 8007B948-8007B958 0010+00 rc=3 efc=1 rfr=False None .text      ChkNotReady__4cBgWCFv                                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::ChkNotReady() const {
	nofralloc
#include "asm/d/bg/d_bg_w/ChkNotReady__4cBgWCFv.s"
}
#pragma pop


/* 8007B958-8007B964 000C+00 rc=3 efc=1 rfr=False None .text      ChkLock__4cBgWCFv                                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::ChkLock() const {
	nofralloc
#include "asm/d/bg/d_bg_w/ChkLock__4cBgWCFv.s"
}
#pragma pop


/* 8007B964-8007B970 000C+00 rc=3 efc=1 rfr=False None .text      ChkMoveBg__4cBgWCFv                                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void cBgW::ChkMoveBg() const {
	nofralloc
#include "asm/d/bg/d_bg_w/ChkMoveBg__4cBgWCFv.s"
}
#pragma pop


/* 8007B970-8007B9C0 0050+00 rc=3 efc=2 rfr=False None .text      __ct__4dBgWFv                                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm dBgW::dBgW() {
	nofralloc
#include "asm/d/bg/d_bg_w/__ct__4dBgWFv.s"
}
#pragma pop


/* 8007B9C0-8007B9EC 002C+00 rc=2 efc=2 rfr=False None .text      Move__4dBgWFv                                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::Move() {
	nofralloc
#include "asm/d/bg/d_bg_w/Move__4dBgWFv.s"
}
#pragma pop


/* 8007B9EC-8007BA40 0054+00 rc=2 efc=0 rfr=False None .text      positionWallCorrect__4dBgWFP9dBgS_AcchfR8cM3dGPlaP4cXyzf     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::positionWallCorrect(dBgS_Acch* field_0, f32 field_1, cM3dGPla& field_2, cXyz* field_3, f32 field_4) {
	nofralloc
#include "asm/d/bg/d_bg_w/positionWallCorrect__4dBgWFP9dBgS_AcchfR8cM3dGPlaP4cXyzf.s"
}
#pragma pop


/* ############################################################################################## */
/* 80452710-80452718 0004+04 rc=2 efc=0 rfr=False None .sdata2    @4962                                                        */
SECTION_SDATA2 static f32 lit_4962[1 + 1 /* padding */] = {
	1.0f / 125.0f,
	/* padding */
	0.0f,
};

/* 8007BA40-8007C234 07F4+00 rc=1 efc=0 rfr=False None .text      RwgWallCorrect__4dBgWFP9dBgS_AcchUs                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::RwgWallCorrect(dBgS_Acch* field_0, u16 field_1) {
	nofralloc
#include "asm/d/bg/d_bg_w/RwgWallCorrect__4dBgWFP9dBgS_AcchUs.s"
}
#pragma pop


/* 8007C234-8007C360 012C+00 rc=1 efc=0 rfr=False None .text      WallCorrectRp__4dBgWFP9dBgS_Acchi                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::WallCorrectRp(dBgS_Acch* field_0, int field_1) {
	nofralloc
#include "asm/d/bg/d_bg_w/WallCorrectRp__4dBgWFP9dBgS_Acchi.s"
}
#pragma pop


/* 8007C360-8007C484 0124+00 rc=1 efc=0 rfr=False None .text      WallCorrectGrpRp__4dBgWFP9dBgS_Acchii                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::WallCorrectGrpRp(dBgS_Acch* field_0, int field_1, int field_2) {
	nofralloc
#include "asm/d/bg/d_bg_w/WallCorrectGrpRp__4dBgWFP9dBgS_Acchii.s"
}
#pragma pop


/* 8007C484-8007C4AC 0028+00 rc=2 efc=1 rfr=False None .text      WallCorrect__4dBgWFP9dBgS_Acch                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::WallCorrect(dBgS_Acch* field_0) {
	nofralloc
#include "asm/d/bg/d_bg_w/WallCorrect__4dBgWFP9dBgS_Acch.s"
}
#pragma pop


/* ############################################################################################## */
/* 80424B80-80424F70 03F0+00 rc=1 efc=0 rfr=False None .bss       l_wcsbuf                                                     */
static u8 d_bg_d_bg_w__l_wcsbuf[1008];

/* 80450F80-80450F84 0004+00 rc=2 efc=0 rfr=False None .sbss      l_start                                                      */
static u8 l_start[4];

/* 80450F84-80450F88 0004+00 rc=2 efc=0 rfr=False None .sbss      l_wcsbuf_num                                                 */
static u8 l_wcsbuf_num[4];

/* 8007C4AC-8007C714 0268+00 rc=1 efc=0 rfr=False None .text      RwgWallCorrectSort__4dBgWFP9dBgS_AcchUs                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::RwgWallCorrectSort(dBgS_Acch* field_0, u16 field_1) {
	nofralloc
#include "asm/d/bg/d_bg_w/RwgWallCorrectSort__4dBgWFP9dBgS_AcchUs.s"
}
#pragma pop


/* 8007C714-8007C808 00F4+00 rc=1 efc=0 rfr=False None .text      WallCorrectRpSort__4dBgWFP9dBgS_Acchi                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::WallCorrectRpSort(dBgS_Acch* field_0, int field_1) {
	nofralloc
#include "asm/d/bg/d_bg_w/WallCorrectRpSort__4dBgWFP9dBgS_Acchi.s"
}
#pragma pop


/* 8007C808-8007C910 0108+00 rc=1 efc=0 rfr=False None .text      WallCorrectGrpRpSort__4dBgWFP9dBgS_Acchii                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::WallCorrectGrpRpSort(dBgS_Acch* field_0, int field_1, int field_2) {
	nofralloc
#include "asm/d/bg/d_bg_w/WallCorrectGrpRpSort__4dBgWFP9dBgS_Acchii.s"
}
#pragma pop


/* 8007C910-8007D0DC 07CC+00 rc=2 efc=1 rfr=False None .text      WallCorrectSort__4dBgWFP9dBgS_Acch                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::WallCorrectSort(dBgS_Acch* field_0) {
	nofralloc
#include "asm/d/bg/d_bg_w/WallCorrectSort__4dBgWFP9dBgS_Acch.s"
}
#pragma pop


/* 8007D0DC-8007D208 012C+00 rc=1 efc=0 rfr=False None .text      RwgRoofChk__4dBgWFUsP12dBgS_RoofChk                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::RwgRoofChk(u16 field_0, dBgS_RoofChk* field_1) {
	nofralloc
#include "asm/d/bg/d_bg_w/RwgRoofChk__4dBgWFUsP12dBgS_RoofChk.s"
}
#pragma pop


/* 8007D208-8007D330 0128+00 rc=1 efc=0 rfr=False None .text      RoofChkRp__4dBgWFP12dBgS_RoofChki                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::RoofChkRp(dBgS_RoofChk* field_0, int field_1) {
	nofralloc
#include "asm/d/bg/d_bg_w/RoofChkRp__4dBgWFP12dBgS_RoofChki.s"
}
#pragma pop


/* 8007D330-8007D470 0140+00 rc=1 efc=0 rfr=False None .text      RoofChkGrpRp__4dBgWFP12dBgS_RoofChkii                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::RoofChkGrpRp(dBgS_RoofChk* field_0, int field_1, int field_2) {
	nofralloc
#include "asm/d/bg/d_bg_w/RoofChkGrpRp__4dBgWFP12dBgS_RoofChkii.s"
}
#pragma pop


/* 8007D470-8007D498 0028+00 rc=2 efc=1 rfr=False None .text      RoofChk__4dBgWFP12dBgS_RoofChk                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::RoofChk(dBgS_RoofChk* field_0) {
	nofralloc
#include "asm/d/bg/d_bg_w/RoofChk__4dBgWFP12dBgS_RoofChk.s"
}
#pragma pop


/* 8007D498-8007D5C4 012C+00 rc=1 efc=0 rfr=False None .text      RwgSplGrpChk__4dBgWFUsP14dBgS_SplGrpChk                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::RwgSplGrpChk(u16 field_0, dBgS_SplGrpChk* field_1) {
	nofralloc
#include "asm/d/bg/d_bg_w/RwgSplGrpChk__4dBgWFUsP14dBgS_SplGrpChk.s"
}
#pragma pop


/* 8007D5C4-8007D6F0 012C+00 rc=1 efc=0 rfr=False None .text      SplGrpChkRp__4dBgWFP14dBgS_SplGrpChki                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::SplGrpChkRp(dBgS_SplGrpChk* field_0, int field_1) {
	nofralloc
#include "asm/d/bg/d_bg_w/SplGrpChkRp__4dBgWFP14dBgS_SplGrpChki.s"
}
#pragma pop


/* 8007D6F0-8007D830 0140+00 rc=1 efc=0 rfr=False None .text      SplGrpChkGrpRp__4dBgWFP14dBgS_SplGrpChkii                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::SplGrpChkGrpRp(dBgS_SplGrpChk* field_0, int field_1, int field_2) {
	nofralloc
#include "asm/d/bg/d_bg_w/SplGrpChkGrpRp__4dBgWFP14dBgS_SplGrpChkii.s"
}
#pragma pop


/* 8007D830-8007D858 0028+00 rc=2 efc=1 rfr=False None .text      SplGrpChk__4dBgWFP14dBgS_SplGrpChk                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::SplGrpChk(dBgS_SplGrpChk* field_0) {
	nofralloc
#include "asm/d/bg/d_bg_w/SplGrpChk__4dBgWFP14dBgS_SplGrpChk.s"
}
#pragma pop


/* 8007D858-8007D8E8 0090+00 rc=1 efc=0 rfr=False None .text      RwgCaptPoly__4dBgWFiR13dBgS_CaptPoly                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::RwgCaptPoly(int field_0, dBgS_CaptPoly& field_1) {
	nofralloc
#include "asm/d/bg/d_bg_w/RwgCaptPoly__4dBgWFiR13dBgS_CaptPoly.s"
}
#pragma pop


/* 8007D8E8-8007DA04 011C+00 rc=1 efc=0 rfr=False None .text      CaptPolyRp__4dBgWFR13dBgS_CaptPolyi                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::CaptPolyRp(dBgS_CaptPoly& field_0, int field_1) {
	nofralloc
#include "asm/d/bg/d_bg_w/CaptPolyRp__4dBgWFR13dBgS_CaptPolyi.s"
}
#pragma pop


/* 8007DA04-8007DAF8 00F4+00 rc=1 efc=0 rfr=False None .text      CaptPolyGrpRp__4dBgWFR13dBgS_CaptPolyii                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::CaptPolyGrpRp(dBgS_CaptPoly& field_0, int field_1, int field_2) {
	nofralloc
#include "asm/d/bg/d_bg_w/CaptPolyGrpRp__4dBgWFR13dBgS_CaptPolyii.s"
}
#pragma pop


/* 8007DAF8-8007DB20 0028+00 rc=2 efc=1 rfr=False None .text      CaptPoly__4dBgWFR13dBgS_CaptPoly                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::CaptPoly(dBgS_CaptPoly& field_0) {
	nofralloc
#include "asm/d/bg/d_bg_w/CaptPoly__4dBgWFR13dBgS_CaptPoly.s"
}
#pragma pop


/* 8007DB20-8007DC70 0150+00 rc=1 efc=0 rfr=False None .text      RwgSphChk__4dBgWFUsP11dBgS_SphChkPv                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::RwgSphChk(u16 field_0, dBgS_SphChk* field_1, void* field_2) {
	nofralloc
#include "asm/d/bg/d_bg_w/RwgSphChk__4dBgWFUsP11dBgS_SphChkPv.s"
}
#pragma pop


/* 8007DC70-8007DDE0 0170+00 rc=1 efc=0 rfr=False None .text      SphChkRp__4dBgWFP11dBgS_SphChkPvi                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::SphChkRp(dBgS_SphChk* field_0, void* field_1, int field_2) {
	nofralloc
#include "asm/d/bg/d_bg_w/SphChkRp__4dBgWFP11dBgS_SphChkPvi.s"
}
#pragma pop


/* 8007DDE0-8007DF00 0120+00 rc=1 efc=0 rfr=False None .text      SphChkGrpRp__4dBgWFP11dBgS_SphChkPvii                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::SphChkGrpRp(dBgS_SphChk* field_0, void* field_1, int field_2, int field_3) {
	nofralloc
#include "asm/d/bg/d_bg_w/SphChkGrpRp__4dBgWFP11dBgS_SphChkPvii.s"
}
#pragma pop


/* 8007DF00-8007DF28 0028+00 rc=2 efc=1 rfr=False None .text      SphChk__4dBgWFP11dBgS_SphChkPv                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::SphChk(dBgS_SphChk* field_0, void* field_1) {
	nofralloc
#include "asm/d/bg/d_bg_w/SphChk__4dBgWFP11dBgS_SphChkPv.s"
}
#pragma pop


/* 8007DF28-8007DF58 0030+00 rc=2 efc=1 rfr=False None .text      GetPolyGrpRoomInfId__4dBgWFRC13cBgS_PolyInfo                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::GetPolyGrpRoomInfId(cBgS_PolyInfo const& field_0) {
	nofralloc
#include "asm/d/bg/d_bg_w/GetPolyGrpRoomInfId__4dBgWFRC13cBgS_PolyInfo.s"
}
#pragma pop


/* 8007DF58-8007DF88 0030+00 rc=2 efc=1 rfr=False None .text      GetGrpSoundId__4dBgWFRC13cBgS_PolyInfo                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::GetGrpSoundId(cBgS_PolyInfo const& field_0) {
	nofralloc
#include "asm/d/bg/d_bg_w/GetGrpSoundId__4dBgWFRC13cBgS_PolyInfo.s"
}
#pragma pop


/* 8007DF88-8007DFC4 003C+00 rc=1 efc=0 rfr=False None .text      CrrPos__4dBgWFRC13cBgS_PolyInfoPvbP4cXyzP5csXyzP5csXyz       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::CrrPos(cBgS_PolyInfo const& field_0, void* field_1, bool field_2, cXyz* field_3, csXyz* field_4, csXyz* field_5) {
	nofralloc
#include "asm/d/bg/d_bg_w/CrrPos__4dBgWFRC13cBgS_PolyInfoPvbP4cXyzP5csXyzP5csXyz.s"
}
#pragma pop


/* 8007DFC4-8007E000 003C+00 rc=1 efc=0 rfr=False None .text      TransPos__4dBgWFRC13cBgS_PolyInfoPvbP4cXyzP5csXyzP5csXyz     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::TransPos(cBgS_PolyInfo const& field_0, void* field_1, bool field_2, cXyz* field_3, csXyz* field_4, csXyz* field_5) {
	nofralloc
#include "asm/d/bg/d_bg_w/TransPos__4dBgWFRC13cBgS_PolyInfoPvbP4cXyzP5csXyzP5csXyz.s"
}
#pragma pop


/* 8007E000-8007E02C 002C+00 rc=1 efc=0 rfr=False None .text      MatrixCrrPos__4dBgWFRC13cBgS_PolyInfoPvbP4cXyzP5csXyzP5csXyz */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::MatrixCrrPos(cBgS_PolyInfo const& field_0, void* field_1, bool field_2, cXyz* field_3, csXyz* field_4, csXyz* field_5) {
	nofralloc
#include "asm/d/bg/d_bg_w/MatrixCrrPos__4dBgWFRC13cBgS_PolyInfoPvbP4cXyzP5csXyzP5csXyz.s"
}
#pragma pop


/* 8007E02C-8007E360 0334+00 rc=2 efc=1 rfr=False None .text      ChkPolyThrough__4dBgWFiP16cBgS_PolyPassChk                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::ChkPolyThrough(int field_0, cBgS_PolyPassChk* field_1) {
	nofralloc
#include "asm/d/bg/d_bg_w/ChkPolyThrough__4dBgWFiP16cBgS_PolyPassChk.s"
}
#pragma pop


/* 8007E360-8007E3D8 0078+00 rc=2 efc=1 rfr=False None .text      ChkShdwDrawThrough__4dBgWFiP16cBgS_PolyPassChk               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::ChkShdwDrawThrough(int field_0, cBgS_PolyPassChk* field_1) {
	nofralloc
#include "asm/d/bg/d_bg_w/ChkShdwDrawThrough__4dBgWFiP16cBgS_PolyPassChk.s"
}
#pragma pop


/* 8007E3D8-8007E444 006C+00 rc=2 efc=1 rfr=False None .text      ChkGrpThrough__4dBgWFiP15cBgS_GrpPassChki                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::ChkGrpThrough(int field_0, cBgS_GrpPassChk* field_1, int field_2) {
	nofralloc
#include "asm/d/bg/d_bg_w/ChkGrpThrough__4dBgWFiP15cBgS_GrpPassChki.s"
}
#pragma pop


/* 8007E444-8007E474 0030+00 rc=2 efc=1 rfr=False None .text      CallRideCallBack__4dBgWFP10fopAc_ac_cP10fopAc_ac_c           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::CallRideCallBack(fopAc_ac_c* field_0, fopAc_ac_c* field_1) {
	nofralloc
#include "asm/d/bg/d_bg_w/CallRideCallBack__4dBgWFP10fopAc_ac_cP10fopAc_ac_c.s"
}
#pragma pop


/* 8007E474-8007E4A4 0030+00 rc=2 efc=1 rfr=False None .text      CallArrowStickCallBack__4dBgWFP10fopAc_ac_cP10fopAc_ac_cR4cXyz */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::CallArrowStickCallBack(fopAc_ac_c* field_0, fopAc_ac_c* field_1, cXyz& field_2) {
	nofralloc
#include "asm/d/bg/d_bg_w/CallArrowStickCallBack__4dBgWFP10fopAc_ac_cP10fopAc_ac_cR4cXyz.s"
}
#pragma pop


/* 8007E4A4-8007E4B4 0010+00 rc=2 efc=1 rfr=False None .text      OffMoveFlag__4dBgWFv                                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::OffMoveFlag() {
	nofralloc
#include "asm/d/bg/d_bg_w/OffMoveFlag__4dBgWFv.s"
}
#pragma pop


/* 8007E4B4-8007E4C0 000C+00 rc=2 efc=1 rfr=False None .text      ChkMoveFlag__4dBgWCFv                                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW::ChkMoveFlag() const {
	nofralloc
#include "asm/d/bg/d_bg_w/ChkMoveFlag__4dBgWCFv.s"
}
#pragma pop


/* 8007E4C0-8007E548 0088+00 rc=0 efc=0 rfr=False None .text      dBgW_NewSet__FP6cBgD_tUlPA3_A4_f                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dBgW_NewSet(cBgD_t* field_0, u32 field_1, f32 (* field_2)[3][4]) {
	nofralloc
#include "asm/d/bg/d_bg_w/dBgW_NewSet__FP6cBgD_tUlPA3_A4_f.s"
}
#pragma pop


/* 8007E548-8007E5A8 0060+00 rc=1 efc=0 rfr=False None .text      __dt__4dBgWFv                                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm dBgW::~dBgW() {
	nofralloc
#include "asm/d/bg/d_bg_w/__dt__4dBgWFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80450F88-80450F90 0008+00 rc=4 efc=4 rfr=False None .sbss      None                                                         */
u8 struct_80450F88[8];

