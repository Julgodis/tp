// 
// Generated By: dol2asm
// Translation Unit: d/meter/d_meter2_info
// 

#include "dolphin/types.h"

// 
// Types:
// 

// build dMeter2Info_c (dMeter2Info_c) False/False
// build cXyz (cXyz) False/False
/* top-level dependencies (begin cXyz) */
/* top-level dependencies (end cXyz) */
struct cXyz {
};

// build JMSMesgEntry_c (JMSMesgEntry_c) False/False
/* top-level dependencies (begin JMSMesgEntry_c) */
/* top-level dependencies (end JMSMesgEntry_c) */
struct JMSMesgEntry_c {
};

// build J2DPicture (J2DPicture) False/False
/* top-level dependencies (begin J2DPicture) */
/* top-level dependencies (end J2DPicture) */
struct J2DPicture {
};

// build J2DTextBox (J2DTextBox) False/False
/* top-level dependencies (begin J2DTextBox) */
/* top-level dependencies (end J2DTextBox) */
struct J2DTextBox {
	/* 8021C7F4 */ void getFont() const;
};

// build JUTFont (JUTFont) False/False
/* top-level dependencies (begin JUTFont) */
/* top-level dependencies (end JUTFont) */
struct JUTFont {
};

/* top-level dependencies (begin dMeter2Info_c) */
// outer dependency: cXyz
// outer dependency: JMSMesgEntry_c
// outer dependency: J2DPicture
// outer dependency: J2DTextBox
// outer dependency: JUTFont
/* top-level dependencies (end dMeter2Info_c) */
struct dMeter2Info_c {
	// J2DPicture
	// cXyz
	// JMSMesgEntry_c
	// J2DTextBox
	// JUTFont
	/* 8021BDDC */ dMeter2Info_c();
	/* 8021BE20 */ ~dMeter2Info_c();
	/* 8021BE68 */ void init();
	/* 8021C0E0 */ void setFloatingMessage(u16, s16, bool);
	/* 8021C11C */ void setFloatingFlow(u16, s16, bool);
	/* 8021C1DC */ void isFloatingMessageVisible();
	/* 8021C1F0 */ void decFloatingMessageTimer();
	/* 8021C218 */ void resetFloatingMessage();
	/* 8021C238 */ void decMsgKeyWaitTimer();
	/* 8021C250 */ void getString(u32, char*, JMSMesgEntry_c*);
	/* 8021C370 */ void getStringKana(u32, char*, JMSMesgEntry_c*);
	/* 8021C544 */ void getStringKanji(u32, char*, JMSMesgEntry_c*);
	/* 8021C6A4 */ void getStringLength(J2DTextBox*, char*);
	/* 8021C7FC */ void getStringLength(JUTFont*, f32, f32, char*);
	/* 8021C934 */ void onDirectUseItem(int);
	/* 8021C950 */ void isDirectUseItem(int);
	/* 8021C970 */ void setMeterString(s32);
	/* 8021C9DC */ void resetWarpStatus();
	/* 8021CA04 */ void warpInProc();
	/* 8021CA70 */ void warpOutProc();
	/* 8021CC00 */ void resetMeterString();
	/* 8021CC0C */ void setWarpInfo(char const*, cXyz const&, s16, u8, u8, u8);
	/* 8021CC80 */ void getItemType(u8);
	/* 8021CF08 */ void readItemTexture(u8, void*, J2DPicture*, void*, J2DPicture*, void*, J2DPicture*, void*, J2DPicture*, int);
	/* 8021D36C */ void setItemColor(u8, J2DPicture*, J2DPicture*, J2DPicture*, J2DPicture*);
	/* 8021D44C */ void get2ndTexture(u8);
	/* 8021D4B8 */ void get3rdTexture(u8);
	/* 8021D4FC */ void get4thTexture(u8);
	/* 8021D524 */ void set1stColor(u8, J2DPicture*);
	/* 8021D644 */ void set2ndColor(u8, J2DPicture*);
	/* 8021D764 */ void set3rdColor(u8, J2DPicture*);
	/* 8021DB64 */ void set4thColor(u8, J2DPicture*);
	/* 8021DCC4 */ void setHotSpringTimer(u8);
	/* 8021DCE0 */ void decHotSpringTimer();
	/* 8021DD5C */ void changeWater(u8);
	/* 8021DE18 */ void setMiniGameItem(u8);
	/* 8021E0C4 */ void resetMiniGameItem(bool);
	/* 8021E268 */ void setMiniGameCount(s8);
	/* 8021E290 */ void setSaveStageName(char const*);
};

// build JMSMesgEntry_c (JMSMesgEntry_c) True/True
// build J2DTextBox (J2DTextBox) True/True
// build JUTFont (JUTFont) True/True
// build cXyz (cXyz) True/True
// build J2DPicture (J2DPicture) True/True
// build ResTIMG (ResTIMG) False/False
/* top-level dependencies (begin ResTIMG) */
/* top-level dependencies (end ResTIMG) */
struct ResTIMG {
};

// build dSv_player_status_a_c (dSv_player_status_a_c) False/False
/* top-level dependencies (begin dSv_player_status_a_c) */
/* top-level dependencies (end dSv_player_status_a_c) */
struct dSv_player_status_a_c {
	/* 80032A5C */ void getSelectItemIndex(int) const;
};

// build dSv_player_item_c (dSv_player_item_c) False/False
/* top-level dependencies (begin dSv_player_item_c) */
/* top-level dependencies (end dSv_player_item_c) */
struct dSv_player_item_c {
	/* 80032FB8 */ void setItem(int, u8);
	/* 80033030 */ void getItem(int, bool) const;
};

// build dSv_player_get_item_c (dSv_player_get_item_c) False/False
/* top-level dependencies (begin dSv_player_get_item_c) */
/* top-level dependencies (end dSv_player_get_item_c) */
struct dSv_player_get_item_c {
	/* 80033E94 */ void offFirstBit(u8);
};

// build dSv_player_item_record_c (dSv_player_item_record_c) False/False
/* top-level dependencies (begin dSv_player_item_record_c) */
/* top-level dependencies (end dSv_player_item_record_c) */
struct dSv_player_item_record_c {
	/* 80033F6C */ void setBombNum(u8, u8);
	/* 80033F7C */ void getBombNum(u8) const;
};

// build dSv_light_drop_c (dSv_light_drop_c) False/False
/* top-level dependencies (begin dSv_light_drop_c) */
/* top-level dependencies (end dSv_light_drop_c) */
struct dSv_light_drop_c {
	/* 8003439C */ void isLightDropGetFlag(u8) const;
};

// build dSv_letter_info_c (dSv_letter_info_c) False/False
/* top-level dependencies (begin dSv_letter_info_c) */
/* top-level dependencies (end dSv_letter_info_c) */
struct dSv_letter_info_c {
	/* 80034428 */ void onLetterGetFlag(int);
	/* 8003444C */ void isLetterGetFlag(int) const;
};

// build dSv_event_c (dSv_event_c) False/False
/* top-level dependencies (begin dSv_event_c) */
/* top-level dependencies (end dSv_event_c) */
struct dSv_event_c {
	/* 800349BC */ void isEventBit(u16) const;
};

// build csXyz (csXyz) False/False
/* top-level dependencies (begin csXyz) */
/* top-level dependencies (end csXyz) */
struct csXyz {
	/* 802673F4 */ csXyz(s16, s16, s16);
};

// build dMeterMap_c (dMeterMap_c) False/False
/* top-level dependencies (begin dMeterMap_c) */
/* top-level dependencies (end dMeterMap_c) */
struct dMeterMap_c {
	/* 8020D900 */ void isMapOpenCheck();
};

// build dMsgObject_c (dMsgObject_c) False/False
/* top-level dependencies (begin dMsgObject_c) */
/* top-level dependencies (end dMsgObject_c) */
struct dMsgObject_c {
	/* 802384C4 */ void setLetterNameID(u16);
};

// build dMsgFlow_c (dMsgFlow_c) False/False
// build fopAc_ac_c (fopAc_ac_c) False/False
/* top-level dependencies (begin fopAc_ac_c) */
/* top-level dependencies (end fopAc_ac_c) */
struct fopAc_ac_c {
};

/* top-level dependencies (begin dMsgFlow_c) */
// outer dependency: fopAc_ac_c
/* top-level dependencies (end dMsgFlow_c) */
struct dMsgFlow_c {
	// fopAc_ac_c
	/* 80249F00 */ dMsgFlow_c();
	/* 80249F48 */ ~dMsgFlow_c();
	/* 80249F90 */ void init(fopAc_ac_c*, int, int, fopAc_ac_c**);
	/* 8024A2D8 */ void doFlow(fopAc_ac_c*, fopAc_ac_c**, int);
	/* 8024A538 */ void getMsgNo();
};

// build fopAc_ac_c (fopAc_ac_c) True/True
// build JKRArchive (JKRArchive) False/False
/* top-level dependencies (begin JKRArchive) */
/* top-level dependencies (end JKRArchive) */
struct JKRArchive {
	/* 802D5B38 */ void getGlbResource(u32, char const*, JKRArchive*);
	/* 802D5ECC */ void readIdxResource(void*, u32, u32);
};

// 
// Forward References:
// 

void dMeter2Info_getNowLifeGauge();
void dMeter2Info_getNumberTextureName(int);
void dMeter2Info_getPlusTextureName();
void dMeter2Info_getPixel(f32, f32, f32, f32, f32, f32, ResTIMG const*);
void dMeter2Info_setCloth(u8, bool);
void dMeter2Info_setSword(u8, bool);
void dMeter2Info_setShield(u8, bool);
bool dMeter2Info_is2DActiveTouchArea();
void dMeter2Info_isMapOpenCheck();
void dMeter2Info_isItemOpenCheck();
void dMeter2Info_getRecieveLetterNum();
void dMeter2Info_getNewLetterNum();
void dMeter2Info_setNewLetterSender();
void dMeter2Info_recieveLetter();
void dMeter2Info_set2DVibration();
void dMeter2Info_set2DVibrationM();
extern "C" void __sinit_d_meter2_info_cpp();

extern "C" void __ct__13dMeter2Info_cFv();
extern "C" void __dt__13dMeter2Info_cFv();
extern "C" void init__13dMeter2Info_cFv();
extern "C" void setFloatingMessage__13dMeter2Info_cFUssb();
extern "C" void setFloatingFlow__13dMeter2Info_cFUssb();
extern "C" void isFloatingMessageVisible__13dMeter2Info_cFv();
extern "C" void decFloatingMessageTimer__13dMeter2Info_cFv();
extern "C" void resetFloatingMessage__13dMeter2Info_cFv();
extern "C" void decMsgKeyWaitTimer__13dMeter2Info_cFv();
extern "C" void getString__13dMeter2Info_cFUlPcP14JMSMesgEntry_c();
extern "C" void getStringKana__13dMeter2Info_cFUlPcP14JMSMesgEntry_c();
extern "C" void getStringKanji__13dMeter2Info_cFUlPcP14JMSMesgEntry_c();
extern "C" void getStringLength__13dMeter2Info_cFP10J2DTextBoxPc();
extern "C" void getFont__10J2DTextBoxCFv();
extern "C" void getStringLength__13dMeter2Info_cFP7JUTFontffPc();
extern "C" void onDirectUseItem__13dMeter2Info_cFi();
extern "C" void isDirectUseItem__13dMeter2Info_cFi();
extern "C" void setMeterString__13dMeter2Info_cFl();
extern "C" void resetWarpStatus__13dMeter2Info_cFv();
extern "C" void warpInProc__13dMeter2Info_cFv();
extern "C" void warpOutProc__13dMeter2Info_cFv();
extern "C" void resetMeterString__13dMeter2Info_cFv();
extern "C" void setWarpInfo__13dMeter2Info_cFPCcRC4cXyzsUcUcUc();
extern "C" void getItemType__13dMeter2Info_cFUc();
extern "C" void readItemTexture__13dMeter2Info_cFUcPvP10J2DPicturePvP10J2DPicturePvP10J2DPicturePvP10J2DPicturei();
extern "C" void setItemColor__13dMeter2Info_cFUcP10J2DPictureP10J2DPictureP10J2DPictureP10J2DPicture();
extern "C" void get2ndTexture__13dMeter2Info_cFUc();
extern "C" void get3rdTexture__13dMeter2Info_cFUc();
extern "C" void get4thTexture__13dMeter2Info_cFUc();
extern "C" void set1stColor__13dMeter2Info_cFUcP10J2DPicture();
extern "C" void set2ndColor__13dMeter2Info_cFUcP10J2DPicture();
extern "C" void set3rdColor__13dMeter2Info_cFUcP10J2DPicture();
extern "C" void set4thColor__13dMeter2Info_cFUcP10J2DPicture();
extern "C" void setHotSpringTimer__13dMeter2Info_cFUc();
extern "C" void decHotSpringTimer__13dMeter2Info_cFv();
extern "C" void changeWater__13dMeter2Info_cFUc();
extern "C" void setMiniGameItem__13dMeter2Info_cFUc();
extern "C" void resetMiniGameItem__13dMeter2Info_cFb();
extern "C" void setMiniGameCount__13dMeter2Info_cFSc();
extern "C" void setSaveStageName__13dMeter2Info_cFPCc();
extern "C" void dMeter2Info_getNowLifeGauge__Fv();
extern "C" void dMeter2Info_getNumberTextureName__Fi();
extern "C" void dMeter2Info_getPlusTextureName__Fv();
extern "C" void dMeter2Info_getPixel__FffffffPC7ResTIMG();
extern "C" void dMeter2Info_setCloth__FUcb();
extern "C" void dMeter2Info_setSword__FUcb();
extern "C" void dMeter2Info_setShield__FUcb();
extern "C" bool dMeter2Info_is2DActiveTouchArea__Fv();
extern "C" void dMeter2Info_isMapOpenCheck__Fv();
extern "C" void dMeter2Info_isItemOpenCheck__Fv();
extern "C" void dMeter2Info_getRecieveLetterNum__Fv();
extern "C" void dMeter2Info_getNewLetterNum__Fv();
extern "C" void dMeter2Info_setNewLetterSender__Fv();
extern "C" void dMeter2Info_recieveLetter__Fv();
extern "C" void dMeter2Info_set2DVibration__Fv();
extern "C" void dMeter2Info_set2DVibrationM__Fv();
extern "C" void __sinit_d_meter2_info_cpp();
SECTION_RODATA extern const u8 data_80398A78[148];
SECTION_RODATA extern const u8 data_80398B0C[148];
SECTION_RODATA extern const u8 data_80398BA0[148];
SECTION_RODATA extern const u8 data_80398C34[148];
SECTION_RODATA extern const u8 data_80398CC8[148];
SECTION_RODATA extern const u8 data_80398D5C[148];
SECTION_RODATA extern const u8 data_80398DF0[148];
SECTION_RODATA extern const u8 data_80398E84[148];
SECTION_RODATA extern const u8 data_80398F18[148];
SECTION_RODATA extern const u8 data_80398FAC[148];
SECTION_RODATA extern const u8 data_80399040[148];
SECTION_RODATA extern const u8 data_803990D4[148];
SECTION_RODATA extern const u8 d_meter_d_meter2_info__stringBase0[464];
SECTION_DATA extern void*d_meter_d_meter2_info__lit_4572[37];
SECTION_DATA extern u8 data_803BF7F4[40];
SECTION_DATA extern u8 letter_data__12dMenu_Letter[512];
SECTION_DATA extern void*const __vt__13dMeter2Info_c[3];
SECTION_BSS extern u8 d_meter_d_meter2_info__lit_3846[12 + 4 /* padding */];
SECTION_BSS extern u8 g_meter2_info[248];
SECTION_SBSS extern u8 data_804510B8[4];
SECTION_SBSS extern u8 data_804510BC[4];
SECTION_SDATA2 extern u8 d_meter_d_meter2_info__lit_3916[4];
SECTION_SDATA2 extern f32 d_meter_d_meter2_info__lit_3917;
SECTION_SDATA2 extern f32 d_meter_d_meter2_info__lit_3918;
SECTION_SDATA2 extern f32 d_meter_d_meter2_info__lit_3919;
SECTION_SDATA2 extern f32 d_meter_d_meter2_info__lit_3920;
SECTION_SDATA2 extern f32 d_meter_d_meter2_info__lit_3921;
SECTION_SDATA2 extern f32 d_meter_d_meter2_info__lit_3922;
SECTION_SDATA2 extern f64 d_meter_d_meter2_info__lit_4108;
SECTION_SDATA2 extern f64 lit_5206;

// 
// External References:
// 

SECTION_INIT void memcpy();
void dComIfGs_setSelectItemIndex(int, u8);
void dComIfGs_setMixItemIndex(int, u8);
void dComIfGs_getMixItemIndex(int);
void dComIfGp_setSelectItem(int);
void dComIfGs_setSelectEquipClothes(u8);
void dComIfGs_setSelectEquipSword(u8);
void dComIfGs_setSelectEquipShield(u8);
void dComIfGs_setWarpItemData(char const*, cXyz, s16, s8, u8, u8);
void dComIfGs_setWarpMarkFlag(u8);
void daNpcF_getPlayerInfoFromPlayerList(int, int, cXyz&, csXyz&);
void operator delete(void*);
extern "C" void DCStoreRangeNoSync();
extern "C" void __register_global_object();
extern "C" void __cvt_fp2unsigned();
extern "C" void _savegpr_19();
extern "C" void _savegpr_26();
extern "C" void _savegpr_27();
extern "C" void _savegpr_28();
extern "C" void _savegpr_29();
extern "C" void _restgpr_19();
extern "C" void _restgpr_26();
extern "C" void _restgpr_27();
extern "C" void _restgpr_28();
extern "C" void _restgpr_29();
extern "C" void strcmp();
extern "C" void strcpy();

SECTION_INIT void memcpy();
extern "C" void dComIfGs_setSelectItemIndex__FiUc();
extern "C" void dComIfGs_setMixItemIndex__FiUc();
extern "C" void dComIfGs_getMixItemIndex__Fi();
extern "C" void dComIfGp_setSelectItem__Fi();
extern "C" void dComIfGs_setSelectEquipClothes__FUc();
extern "C" void dComIfGs_setSelectEquipSword__FUc();
extern "C" void dComIfGs_setSelectEquipShield__FUc();
extern "C" void dComIfGs_setWarpItemData__FPCc4cXyzsScUcUc();
extern "C" void dComIfGs_setWarpMarkFlag__FUc();
extern "C" void getSelectItemIndex__21dSv_player_status_a_cCFi();
extern "C" void setItem__17dSv_player_item_cFiUc();
extern "C" void getItem__17dSv_player_item_cCFib();
extern "C" void offFirstBit__21dSv_player_get_item_cFUc();
extern "C" void setBombNum__24dSv_player_item_record_cFUcUc();
extern "C" void getBombNum__24dSv_player_item_record_cCFUc();
extern "C" void isLightDropGetFlag__16dSv_light_drop_cCFUc();
extern "C" void onLetterGetFlag__17dSv_letter_info_cFi();
extern "C" void isLetterGetFlag__17dSv_letter_info_cCFi();
extern "C" void isEventBit__11dSv_event_cCFUs();
extern "C" void daNpcF_getPlayerInfoFromPlayerList__FiiR4cXyzR5csXyz();
extern "C" void isMapOpenCheck__11dMeterMap_cFv();
extern "C" void setLetterNameID__12dMsgObject_cFUs();
extern "C" void __ct__10dMsgFlow_cFv();
extern "C" void __dt__10dMsgFlow_cFv();
extern "C" void init__10dMsgFlow_cFP10fopAc_ac_ciiPP10fopAc_ac_c();
extern "C" void doFlow__10dMsgFlow_cFP10fopAc_ac_cPP10fopAc_ac_ci();
extern "C" void getMsgNo__10dMsgFlow_cFv();
extern "C" void __ct__5csXyzFsss();
extern "C" void __dl__FPv();
extern "C" void getGlbResource__10JKRArchiveFUlPCcP10JKRArchive();
extern "C" void readIdxResource__10JKRArchiveFPvUlUl();
extern "C" void DCStoreRangeNoSync();
extern "C" void __register_global_object();
extern "C" void __cvt_fp2unsigned();
extern "C" void _savegpr_19();
extern "C" void _savegpr_26();
extern "C" void _savegpr_27();
extern "C" void _savegpr_28();
extern "C" void _savegpr_29();
extern "C" void _restgpr_19();
extern "C" void _restgpr_26();
extern "C" void _restgpr_27();
extern "C" void _restgpr_28();
extern "C" void _restgpr_29();
extern "C" void strcmp();
extern "C" void strcpy();
SECTION_DATA extern u8 saveBitLabels__16dSv_event_flag_c[1644 + 4 /* padding */];
SECTION_DATA extern void*item_resource__10dItem_data[1530];
SECTION_BSS extern u8 g_dComIfG_gameInfo[122384];

// 
// Declarations:
// 

/* ############################################################################################## */
/* 803BF760-803BF7F4 0094+00 rc=1 efc=0 .data      @4572                                                        */
void* d_meter_d_meter2_info__lit_4572[37] = {
	(void*)(((char*)get2ndTexture__13dMeter2Info_cFUc)+0x64),
	(void*)(((char*)get2ndTexture__13dMeter2Info_cFUc)+0x24),
	(void*)(((char*)get2ndTexture__13dMeter2Info_cFUc)+0x24),
	(void*)(((char*)get2ndTexture__13dMeter2Info_cFUc)+0x24),
	(void*)(((char*)get2ndTexture__13dMeter2Info_cFUc)+0x24),
	(void*)(((char*)get2ndTexture__13dMeter2Info_cFUc)+0x24),
	(void*)(((char*)get2ndTexture__13dMeter2Info_cFUc)+0x24),
	(void*)(((char*)get2ndTexture__13dMeter2Info_cFUc)+0x24),
	(void*)(((char*)get2ndTexture__13dMeter2Info_cFUc)+0x2C),
	(void*)(((char*)get2ndTexture__13dMeter2Info_cFUc)+0x2C),
	(void*)(((char*)get2ndTexture__13dMeter2Info_cFUc)+0x2C),
	(void*)(((char*)get2ndTexture__13dMeter2Info_cFUc)+0x2C),
	(void*)(((char*)get2ndTexture__13dMeter2Info_cFUc)+0x2C),
	(void*)(((char*)get2ndTexture__13dMeter2Info_cFUc)+0x2C),
	(void*)(((char*)get2ndTexture__13dMeter2Info_cFUc)+0x2C),
	(void*)(((char*)get2ndTexture__13dMeter2Info_cFUc)+0x2C),
	(void*)(((char*)get2ndTexture__13dMeter2Info_cFUc)+0x2C),
	(void*)(((char*)get2ndTexture__13dMeter2Info_cFUc)+0x2C),
	(void*)(((char*)get2ndTexture__13dMeter2Info_cFUc)+0x2C),
	(void*)(((char*)get2ndTexture__13dMeter2Info_cFUc)+0x2C),
	(void*)(((char*)get2ndTexture__13dMeter2Info_cFUc)+0x2C),
	(void*)(((char*)get2ndTexture__13dMeter2Info_cFUc)+0x2C),
	(void*)(((char*)get2ndTexture__13dMeter2Info_cFUc)+0x2C),
	(void*)(((char*)get2ndTexture__13dMeter2Info_cFUc)+0x2C),
	(void*)(((char*)get2ndTexture__13dMeter2Info_cFUc)+0x2C),
	(void*)(((char*)get2ndTexture__13dMeter2Info_cFUc)+0x2C),
	(void*)(((char*)get2ndTexture__13dMeter2Info_cFUc)+0x2C),
	(void*)(((char*)get2ndTexture__13dMeter2Info_cFUc)+0x34),
	(void*)(((char*)get2ndTexture__13dMeter2Info_cFUc)+0x3C),
	(void*)(((char*)get2ndTexture__13dMeter2Info_cFUc)+0x44),
	(void*)(((char*)get2ndTexture__13dMeter2Info_cFUc)+0x4C),
	(void*)(((char*)get2ndTexture__13dMeter2Info_cFUc)+0x2C),
	(void*)(((char*)get2ndTexture__13dMeter2Info_cFUc)+0x64),
	(void*)(((char*)get2ndTexture__13dMeter2Info_cFUc)+0x54),
	(void*)(((char*)get2ndTexture__13dMeter2Info_cFUc)+0x54),
	(void*)(((char*)get2ndTexture__13dMeter2Info_cFUc)+0x54),
	(void*)(((char*)get2ndTexture__13dMeter2Info_cFUc)+0x5C),
};

/* 803BF7F4-803BF81C 0028+00 rc=1 efc=0 .data      tex_name$5183                                                */
u8 data_803BF7F4[40] = {
	0x80, 0x39, 0x91, 0x82, 0x80, 0x39, 0x91, 0xAB, 0x80, 0x39, 0x91, 0xD4, 0x80, 0x39, 0x91, 0xFD,
	0x80, 0x39, 0x92, 0x26, 0x80, 0x39, 0x92, 0x4F, 0x80, 0x39, 0x92, 0x78, 0x80, 0x39, 0x92, 0xA1,
	0x80, 0x39, 0x92, 0xCA, 0x80, 0x39, 0x92, 0xF3,
};

/* 803BF81C-803BFA1C 0200+00 rc=9 efc=6 .data      letter_data__12dMenu_Letter                                  */
u8 letter_data__12dMenu_Letter[512] = {
	0x09, 0xC5, 0x0A, 0x29, 0x0A, 0x8D, 0x01, 0x0B, 0x09, 0xC6, 0x0A, 0x2A, 0x0A, 0x8E, 0x02, 0x37,
	0x09, 0xC7, 0x0A, 0x2B, 0x0A, 0x8F, 0x02, 0x36, 0x09, 0xC8, 0x0A, 0x2C, 0x0A, 0x90, 0x00, 0x37,
	0x09, 0xC9, 0x0A, 0x2D, 0x0A, 0x91, 0x00, 0x39, 0x09, 0xCA, 0x0A, 0x2E, 0x0A, 0x92, 0x00, 0x67,
	0x09, 0xCB, 0x0A, 0x2F, 0x0A, 0x93, 0x01, 0x09, 0x09, 0xCC, 0x0A, 0x30, 0x0A, 0x94, 0x00, 0x4D,
	0x09, 0xCD, 0x0A, 0x31, 0x0A, 0x95, 0x01, 0x19, 0x09, 0xCE, 0x0A, 0x32, 0x0A, 0x96, 0x01, 0x08,
	0x09, 0xCF, 0x0A, 0x33, 0x0A, 0x97, 0x01, 0x0C, 0x09, 0xD4, 0x0A, 0x38, 0x0A, 0x9E, 0x01, 0x0C,
	0x09, 0xD1, 0x0A, 0x35, 0x0A, 0x9B, 0x00, 0xB6, 0x09, 0xD2, 0x0A, 0x36, 0x0A, 0x9C, 0x00, 0x67,
	0x09, 0xD5, 0x0A, 0x39, 0x0A, 0xA0, 0x03, 0x1C, 0x09, 0xD6, 0x0A, 0x3A, 0x0A, 0xA1, 0x01, 0x0A,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 803BFA1C-803BFA28 000C+00 rc=2 efc=0 .data      __vt__13dMeter2Info_c                                        */
void* const __vt__13dMeter2Info_c[3] = {
	NULL, /* RTTI */
	NULL,
	(void*)__dt__13dMeter2Info_cFv,
};

/* 8021BDDC-8021BE20 0044+00 rc=1 efc=0 .text      __ct__13dMeter2Info_cFv                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm dMeter2Info_c::dMeter2Info_c() {
	nofralloc
#include "asm/d/meter/d_meter2_info/__ct__13dMeter2Info_cFv.s"
}
#pragma pop


/* 8021BE20-8021BE68 0048+00 rc=2 efc=0 .text      __dt__13dMeter2Info_cFv                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm dMeter2Info_c::~dMeter2Info_c() {
	nofralloc
#include "asm/d/meter/d_meter2_info/__dt__13dMeter2Info_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80398A78-80398B0C 0094+00 rc=2 efc=0 .rodata    black_color$4634                                             */
SECTION_RODATA const u8 data_80398A78[148] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0xA0, 0x60, 0x00, 0x00,
	0xA0, 0x00, 0x00, 0x00, 0x40, 0x00, 0x60, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x40, 0x40, 0x40, 0x00,
	0x6E, 0x6E, 0x64, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x00,
	0xAF, 0x9B, 0x6E, 0x00, 0xAA, 0x9B, 0x6E, 0x00, 0x55, 0x37, 0x14, 0x00, 0x6E, 0x6E, 0x6E, 0x00,
	0x6E, 0x6E, 0x6E, 0x00, 0xFF, 0x58, 0x00, 0x00, 0x6C, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x55, 0x37, 0x14, 0x00,
	0x00, 0x00, 0x22, 0x00, 0x2B, 0x18, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x46, 0x41, 0x00,
	0x46, 0x46, 0x41, 0x00, 0x46, 0x46, 0x41, 0x00, 0x46, 0x46, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
};

/* 80398B0C-80398BA0 0094+00 rc=0 efc=0 .rodata    white_color$4635                                             */
SECTION_RODATA const u8 data_80398B0C[148] = {
	0xFF, 0xFF, 0xFF, 0xFF, 0x60, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF,
	0xFF, 0x80, 0x80, 0xFF, 0xBE, 0x40, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0xFF, 0xC0, 0xC0, 0xC0, 0xFF,
	0xF5, 0xF5, 0xFF, 0xFF, 0xFF, 0xD2, 0xAA, 0xFF, 0xEF, 0xF5, 0xC9, 0xFF, 0xB0, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xD7, 0xFF, 0xF5, 0xF5, 0xFF, 0xFF,
	0xF5, 0xF5, 0xFF, 0xFF, 0xFF, 0xFF, 0xC2, 0xFF, 0xFF, 0x9D, 0x00, 0xFF, 0xC8, 0xC8, 0xC8, 0xFF,
	0xFF, 0xD2, 0xAA, 0xFF, 0xB0, 0xFF, 0xFF, 0xFF, 0xEF, 0xF5, 0xC9, 0xFF, 0xFF, 0xFF, 0xD7, 0xFF,
	0xD7, 0xCF, 0xF5, 0xFF, 0xFF, 0xFF, 0x33, 0xFF, 0xC8, 0xC8, 0xC8, 0xFF, 0xF5, 0xF5, 0xFF, 0xFF,
	0xF5, 0xF5, 0xFF, 0xFF, 0xF5, 0xF5, 0xFF, 0xFF, 0xF5, 0xF5, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF,
};

/* 80398BA0-80398C34 0094+00 rc=0 efc=0 .rodata    vertex_color_lu$4636                                         */
SECTION_RODATA const u8 data_80398BA0[148] = {
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0x78, 0xAF, 0xFF, 0x5C, 0xB4, 0x16, 0xFF, 0xA4, 0xFF, 0x00, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0x78, 0xAF, 0xFF, 0xA4, 0xFF, 0x00, 0xFF, 0x5C, 0xB4, 0x16, 0xFF, 0xFF, 0xFF, 0x00, 0xFF,
	0xC9, 0xB4, 0xFF, 0xFF, 0x3C, 0x0A, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
	0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xA0, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF,
};

/* 80398C34-80398CC8 0094+00 rc=0 efc=0 .rodata    vertex_color_ru$4637                                         */
SECTION_RODATA const u8 data_80398C34[148] = {
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x73, 0xFF, 0xFF, 0xFF, 0x2A, 0xFF, 0x98, 0xFF, 0x00, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0x73, 0xFF, 0x98, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x2A, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0x39, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
	0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xA0, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF,
};

/* 80398CC8-80398D5C 0094+00 rc=0 efc=0 .rodata    vertex_color_ld$4638                                         */
SECTION_RODATA const u8 data_80398CC8[148] = {
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0x78, 0x6E, 0x3C, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0x3C, 0x32, 0x50, 0xFF, 0x00, 0x00, 0x74, 0xFF,
	0xFA, 0xC8, 0x9B, 0xFF, 0xFA, 0xC8, 0x9B, 0xFF, 0x46, 0x87, 0x00, 0xFF, 0x5A, 0xB4, 0xB4, 0xFF,
	0x5A, 0xB4, 0xB4, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF,
	0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x74, 0xFF, 0x3C, 0x32, 0x50, 0xFF, 0x46, 0x87, 0x00, 0xFF,
	0x3C, 0x32, 0x50, 0x49, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF,
	0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xE0, 0x00, 0xE0, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF,
};

/* 80398D5C-80398DF0 0094+00 rc=0 efc=0 .rodata    vertex_color_rd$4639                                         */
SECTION_RODATA const u8 data_80398D5C[148] = {
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0x78, 0x6E, 0x3C, 0xFF, 0xFF, 0x96, 0x00, 0xFF, 0x55, 0x42, 0x00, 0xFF, 0x61, 0x48, 0xFF, 0xFF,
	0xFF, 0xFF, 0xAA, 0xFF, 0xFF, 0xFF, 0xAA, 0xFF, 0xAF, 0x91, 0x23, 0xFF, 0xE6, 0xFA, 0xFF, 0xFF,
	0xE6, 0xFA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF,
	0xFF, 0x96, 0x00, 0xFF, 0x61, 0x48, 0xFF, 0xFF, 0x55, 0x42, 0x00, 0xFF, 0xAF, 0x91, 0x23, 0xFF,
	0x3C, 0x09, 0x4E, 0xFF, 0xBA, 0x98, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF,
	0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xE0, 0x00, 0xE0, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF,
};

/* 80398DF0-80398E84 0094+00 rc=0 efc=0 .rodata    black_color$4675                                             */
SECTION_RODATA const u8 data_80398DF0[148] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0xD4, 0x00,
	0xE6, 0x1E, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
};

/* 80398E84-80398F18 0094+00 rc=0 efc=0 .rodata    white_color$4676                                             */
SECTION_RODATA const u8 data_80398E84[148] = {
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF5, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xC8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF,
};

/* 80398F18-80398FAC 0094+00 rc=0 efc=0 .rodata    vertex_color_lu$4677                                         */
SECTION_RODATA const u8 data_80398F18[148] = {
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF,
};

/* 80398FAC-80399040 0094+00 rc=0 efc=0 .rodata    vertex_color_ru$4678                                         */
SECTION_RODATA const u8 data_80398FAC[148] = {
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x58,
	0xFF, 0xFF, 0xFF, 0x58, 0xFF, 0xFF, 0xFF, 0x58, 0xFF, 0xFF, 0xFF, 0x58, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF,
};

/* 80399040-803990D4 0094+00 rc=0 efc=0 .rodata    vertex_color_ld$4679                                         */
SECTION_RODATA const u8 data_80399040[148] = {
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF,
};

/* 803990D4-80399168 0094+00 rc=0 efc=0 .rodata    vertex_color_rd$4680                                         */
SECTION_RODATA const u8 data_803990D4[148] = {
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xCD, 0xFF, 0xFF, 0xFF, 0xCD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF,
};

/* 80399168-80399338 01D0+00 rc=6 efc=0 .rodata    @stringBase0                                                 */
#pragma push
#pragma force_active on
#pragma section ".dead"
SECTION_DEAD char* const stringBase_80399168 = "";
SECTION_DEAD char* const stringBase_80399169 = "zel_00.bmg";
SECTION_DEAD char* const stringBase_80399174 = "D_MN01";
SECTION_DEAD char* const stringBase_8039917B = "D_MN07";
SECTION_DEAD char* const stringBase_80399182 = 
    "im_font_number_32_32_ganshinkyo_0_02.bti";
SECTION_DEAD char* const stringBase_803991AB = 
    "im_font_number_32_32_ganshinkyo_1_02.bti";
SECTION_DEAD char* const stringBase_803991D4 = 
    "im_font_number_32_32_ganshinkyo_2_02.bti";
SECTION_DEAD char* const stringBase_803991FD = 
    "im_font_number_32_32_ganshinkyo_3_02.bti";
SECTION_DEAD char* const stringBase_80399226 = 
    "im_font_number_32_32_ganshinkyo_4_03.bti";
SECTION_DEAD char* const stringBase_8039924F = 
    "im_font_number_32_32_ganshinkyo_5_02.bti";
SECTION_DEAD char* const stringBase_80399278 = 
    "im_font_number_32_32_ganshinkyo_6_02.bti";
SECTION_DEAD char* const stringBase_803992A1 = 
    "im_font_number_32_32_ganshinkyo_7_02.bti";
SECTION_DEAD char* const stringBase_803992CA = 
    "im_font_number_32_32_ganshinkyo_8_02.bti";
SECTION_DEAD char* const stringBase_803992F3 = 
    "im_font_number_32_32_ganshinkyo_9_02.bti";
SECTION_DEAD char* const stringBase_8039931C = "im_plus_metal_24ｘ24_00.bti";
#pragma pop

/* 80454998-8045499C 0004+00 rc=4 efc=0 .sdata2    @3916                                                        */
u8 d_meter_d_meter2_info__lit_3916[4] = {
	0x00, 0x00, 0x00, 0x00,
};

/* 8045499C-804549A0 0004+00 rc=1 efc=0 .sdata2    @3917                                                        */
f32 d_meter_d_meter2_info__lit_3917 = 1.0f;

/* 804549A0-804549A4 0004+00 rc=1 efc=0 .sdata2    @3918                                                        */
f32 d_meter_d_meter2_info__lit_3918 = 30.0f;

/* 804549A4-804549A8 0004+00 rc=1 efc=0 .sdata2    @3919                                                        */
f32 d_meter_d_meter2_info__lit_3919 = 304.0f;

/* 804549A8-804549AC 0004+00 rc=1 efc=0 .sdata2    @3920                                                        */
f32 d_meter_d_meter2_info__lit_3920 = 224.0f;

/* 804549AC-804549B0 0004+00 rc=1 efc=0 .sdata2    @3921                                                        */
f32 d_meter_d_meter2_info__lit_3921 = 608.0f;

/* 804549B0-804549B8 0004+04 rc=1 efc=0 .sdata2    @3922                                                        */
f32 d_meter_d_meter2_info__lit_3922 = 448.0f;
/* padding 4 bytes */

/* 8021BE68-8021C0E0 0278+00 rc=2 efc=1 .text      init__13dMeter2Info_cFv                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::init() {
	nofralloc
#include "asm/d/meter/d_meter2_info/init__13dMeter2Info_cFv.s"
}
#pragma pop


/* 8021C0E0-8021C11C 003C+00 rc=1 efc=1 .text      setFloatingMessage__13dMeter2Info_cFUssb                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::setFloatingMessage(u16 field_0, s16 field_1, bool field_2) {
	nofralloc
#include "asm/d/meter/d_meter2_info/setFloatingMessage__13dMeter2Info_cFUssb.s"
}
#pragma pop


/* 8021C11C-8021C1DC 00C0+00 rc=0 efc=0 .text      setFloatingFlow__13dMeter2Info_cFUssb                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::setFloatingFlow(u16 field_0, s16 field_1, bool field_2) {
	nofralloc
#include "asm/d/meter/d_meter2_info/setFloatingFlow__13dMeter2Info_cFUssb.s"
}
#pragma pop


/* 8021C1DC-8021C1F0 0014+00 rc=4 efc=4 .text      isFloatingMessageVisible__13dMeter2Info_cFv                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::isFloatingMessageVisible() {
	nofralloc
#include "asm/d/meter/d_meter2_info/isFloatingMessageVisible__13dMeter2Info_cFv.s"
}
#pragma pop


/* 8021C1F0-8021C218 0028+00 rc=1 efc=1 .text      decFloatingMessageTimer__13dMeter2Info_cFv                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::decFloatingMessageTimer() {
	nofralloc
#include "asm/d/meter/d_meter2_info/decFloatingMessageTimer__13dMeter2Info_cFv.s"
}
#pragma pop


/* 8021C218-8021C238 0020+00 rc=3 efc=3 .text      resetFloatingMessage__13dMeter2Info_cFv                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::resetFloatingMessage() {
	nofralloc
#include "asm/d/meter/d_meter2_info/resetFloatingMessage__13dMeter2Info_cFv.s"
}
#pragma pop


/* 8021C238-8021C250 0018+00 rc=2 efc=2 .text      decMsgKeyWaitTimer__13dMeter2Info_cFv                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::decMsgKeyWaitTimer() {
	nofralloc
#include "asm/d/meter/d_meter2_info/decMsgKeyWaitTimer__13dMeter2Info_cFv.s"
}
#pragma pop


/* 8021C250-8021C370 0120+00 rc=16 efc=16 .text      getString__13dMeter2Info_cFUlPcP14JMSMesgEntry_c             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::getString(u32 field_0, char* field_1, JMSMesgEntry_c* field_2) {
	nofralloc
#include "asm/d/meter/d_meter2_info/getString__13dMeter2Info_cFUlPcP14JMSMesgEntry_c.s"
}
#pragma pop


/* 8021C370-8021C544 01D4+00 rc=1 efc=1 .text      getStringKana__13dMeter2Info_cFUlPcP14JMSMesgEntry_c         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::getStringKana(u32 field_0, char* field_1, JMSMesgEntry_c* field_2) {
	nofralloc
#include "asm/d/meter/d_meter2_info/getStringKana__13dMeter2Info_cFUlPcP14JMSMesgEntry_c.s"
}
#pragma pop


/* 8021C544-8021C6A4 0160+00 rc=32 efc=32 .text      getStringKanji__13dMeter2Info_cFUlPcP14JMSMesgEntry_c        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::getStringKanji(u32 field_0, char* field_1, JMSMesgEntry_c* field_2) {
	nofralloc
#include "asm/d/meter/d_meter2_info/getStringKanji__13dMeter2Info_cFUlPcP14JMSMesgEntry_c.s"
}
#pragma pop


/* ############################################################################################## */
/* 804549B8-804549C0 0008+00 rc=2 efc=0 .sdata2    @4108                                                        */
f64 d_meter_d_meter2_info__lit_4108 = 4503601774854144.0 /* cast s32 to float */;

/* 8021C6A4-8021C7F4 0150+00 rc=1 efc=1 .text      getStringLength__13dMeter2Info_cFP10J2DTextBoxPc             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::getStringLength(J2DTextBox* field_0, char* field_1) {
	nofralloc
#include "asm/d/meter/d_meter2_info/getStringLength__13dMeter2Info_cFP10J2DTextBoxPc.s"
}
#pragma pop


/* 8021C7F4-8021C7FC 0008+00 rc=1 efc=1 .text      getFont__10J2DTextBoxCFv                                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTextBox::getFont() const {
	nofralloc
#include "asm/d/meter/d_meter2_info/getFont__10J2DTextBoxCFv.s"
}
#pragma pop


/* 8021C7FC-8021C934 0138+00 rc=3 efc=3 .text      getStringLength__13dMeter2Info_cFP7JUTFontffPc               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::getStringLength(JUTFont* field_0, f32 field_1, f32 field_2, char* field_3) {
	nofralloc
#include "asm/d/meter/d_meter2_info/getStringLength__13dMeter2Info_cFP7JUTFontffPc.s"
}
#pragma pop


/* 8021C934-8021C950 001C+00 rc=2 efc=2 .text      onDirectUseItem__13dMeter2Info_cFi                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::onDirectUseItem(int field_0) {
	nofralloc
#include "asm/d/meter/d_meter2_info/onDirectUseItem__13dMeter2Info_cFi.s"
}
#pragma pop


/* 8021C950-8021C970 0020+00 rc=4 efc=4 .text      isDirectUseItem__13dMeter2Info_cFi                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::isDirectUseItem(int field_0) {
	nofralloc
#include "asm/d/meter/d_meter2_info/isDirectUseItem__13dMeter2Info_cFi.s"
}
#pragma pop


/* ############################################################################################## */
/* 80430178-80430188 000C+04 rc=1 efc=0 .bss       @3846                                                        */
u8 d_meter_d_meter2_info__lit_3846[12 + 4 /* padding */];

/* 80430188-80430280 00F8+00 rc=271 efc=267 .bss       g_meter2_info                                                */
u8 g_meter2_info[248];

/* 8021C970-8021C9DC 006C+00 rc=0 efc=0 .text      setMeterString__13dMeter2Info_cFl                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::setMeterString(s32 field_0) {
	nofralloc
#include "asm/d/meter/d_meter2_info/setMeterString__13dMeter2Info_cFl.s"
}
#pragma pop


/* 8021C9DC-8021CA04 0028+00 rc=4 efc=3 .text      resetWarpStatus__13dMeter2Info_cFv                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::resetWarpStatus() {
	nofralloc
#include "asm/d/meter/d_meter2_info/resetWarpStatus__13dMeter2Info_cFv.s"
}
#pragma pop


/* 8021CA04-8021CA70 006C+00 rc=2 efc=2 .text      warpInProc__13dMeter2Info_cFv                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::warpInProc() {
	nofralloc
#include "asm/d/meter/d_meter2_info/warpInProc__13dMeter2Info_cFv.s"
}
#pragma pop


/* 8021CA70-8021CC00 0190+00 rc=1 efc=1 .text      warpOutProc__13dMeter2Info_cFv                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::warpOutProc() {
	nofralloc
#include "asm/d/meter/d_meter2_info/warpOutProc__13dMeter2Info_cFv.s"
}
#pragma pop


/* 8021CC00-8021CC0C 000C+00 rc=1 efc=1 .text      resetMeterString__13dMeter2Info_cFv                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::resetMeterString() {
	nofralloc
#include "asm/d/meter/d_meter2_info/resetMeterString__13dMeter2Info_cFv.s"
}
#pragma pop


/* 8021CC0C-8021CC80 0074+00 rc=2 efc=1 .text      setWarpInfo__13dMeter2Info_cFPCcRC4cXyzsUcUcUc               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::setWarpInfo(char const* field_0, cXyz const& field_1, s16 field_2, u8 field_3, u8 field_4, u8 field_5) {
	nofralloc
#include "asm/d/meter/d_meter2_info/setWarpInfo__13dMeter2Info_cFPCcRC4cXyzsUcUcUc.s"
}
#pragma pop


/* 8021CC80-8021CF08 0288+00 rc=2 efc=0 .text      getItemType__13dMeter2Info_cFUc                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::getItemType(u8 field_0) {
	nofralloc
#include "asm/d/meter/d_meter2_info/getItemType__13dMeter2Info_cFUc.s"
}
#pragma pop


/* 8021CF08-8021D36C 0464+00 rc=9 efc=9 .text      readItemTexture__13dMeter2Info_cFUcPvP10J2DPicturePvP10J2DPicturePvP10J2DPicturePvP10J2DPicturei */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::readItemTexture(u8 field_0, void* field_1, J2DPicture* field_2, void* field_3, J2DPicture* field_4, void* field_5, J2DPicture* field_6, void* field_7, J2DPicture* field_8, int field_9) {
	nofralloc
#include "asm/d/meter/d_meter2_info/func_8021CF08.s"
}
#pragma pop


/* 8021D36C-8021D44C 00E0+00 rc=2 efc=2 .text      setItemColor__13dMeter2Info_cFUcP10J2DPictureP10J2DPictureP10J2DPictureP10J2DPicture */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::setItemColor(u8 field_0, J2DPicture* field_1, J2DPicture* field_2, J2DPicture* field_3, J2DPicture* field_4) {
	nofralloc
#include "asm/d/meter/d_meter2_info/setItemColor__13dMeter2Info_cFUcP10J2DPictureP10J2DPictureP10J2DPictureP10J2DPicture.s"
}
#pragma pop


/* 8021D44C-8021D4B8 006C+00 rc=2 efc=0 .text      get2ndTexture__13dMeter2Info_cFUc                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::get2ndTexture(u8 field_0) {
	nofralloc
#include "asm/d/meter/d_meter2_info/get2ndTexture__13dMeter2Info_cFUc.s"
}
#pragma pop


/* 8021D4B8-8021D4FC 0044+00 rc=1 efc=0 .text      get3rdTexture__13dMeter2Info_cFUc                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::get3rdTexture(u8 field_0) {
	nofralloc
#include "asm/d/meter/d_meter2_info/get3rdTexture__13dMeter2Info_cFUc.s"
}
#pragma pop


/* 8021D4FC-8021D524 0028+00 rc=1 efc=0 .text      get4thTexture__13dMeter2Info_cFUc                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::get4thTexture(u8 field_0) {
	nofralloc
#include "asm/d/meter/d_meter2_info/get4thTexture__13dMeter2Info_cFUc.s"
}
#pragma pop


/* 8021D524-8021D644 0120+00 rc=2 efc=0 .text      set1stColor__13dMeter2Info_cFUcP10J2DPicture                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::set1stColor(u8 field_0, J2DPicture* field_1) {
	nofralloc
#include "asm/d/meter/d_meter2_info/set1stColor__13dMeter2Info_cFUcP10J2DPicture.s"
}
#pragma pop


/* 8021D644-8021D764 0120+00 rc=2 efc=0 .text      set2ndColor__13dMeter2Info_cFUcP10J2DPicture                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::set2ndColor(u8 field_0, J2DPicture* field_1) {
	nofralloc
#include "asm/d/meter/d_meter2_info/set2ndColor__13dMeter2Info_cFUcP10J2DPicture.s"
}
#pragma pop


/* 8021D764-8021DB64 0400+00 rc=2 efc=0 .text      set3rdColor__13dMeter2Info_cFUcP10J2DPicture                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::set3rdColor(u8 field_0, J2DPicture* field_1) {
	nofralloc
#include "asm/d/meter/d_meter2_info/set3rdColor__13dMeter2Info_cFUcP10J2DPicture.s"
}
#pragma pop


/* 8021DB64-8021DCC4 0160+00 rc=2 efc=0 .text      set4thColor__13dMeter2Info_cFUcP10J2DPicture                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::set4thColor(u8 field_0, J2DPicture* field_1) {
	nofralloc
#include "asm/d/meter/d_meter2_info/set4thColor__13dMeter2Info_cFUcP10J2DPicture.s"
}
#pragma pop


/* 8021DCC4-8021DCE0 001C+00 rc=2 efc=2 .text      setHotSpringTimer__13dMeter2Info_cFUc                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::setHotSpringTimer(u8 field_0) {
	nofralloc
#include "asm/d/meter/d_meter2_info/setHotSpringTimer__13dMeter2Info_cFUc.s"
}
#pragma pop


/* 8021DCE0-8021DD5C 007C+00 rc=1 efc=1 .text      decHotSpringTimer__13dMeter2Info_cFv                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::decHotSpringTimer() {
	nofralloc
#include "asm/d/meter/d_meter2_info/decHotSpringTimer__13dMeter2Info_cFv.s"
}
#pragma pop


/* 8021DD5C-8021DE18 00BC+00 rc=3 efc=1 .text      changeWater__13dMeter2Info_cFUc                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::changeWater(u8 field_0) {
	nofralloc
#include "asm/d/meter/d_meter2_info/changeWater__13dMeter2Info_cFUc.s"
}
#pragma pop


/* 8021DE18-8021E0C4 02AC+00 rc=3 efc=3 .text      setMiniGameItem__13dMeter2Info_cFUc                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::setMiniGameItem(u8 field_0) {
	nofralloc
#include "asm/d/meter/d_meter2_info/setMiniGameItem__13dMeter2Info_cFUc.s"
}
#pragma pop


/* 8021E0C4-8021E268 01A4+00 rc=3 efc=3 .text      resetMiniGameItem__13dMeter2Info_cFb                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::resetMiniGameItem(bool field_0) {
	nofralloc
#include "asm/d/meter/d_meter2_info/resetMiniGameItem__13dMeter2Info_cFb.s"
}
#pragma pop


/* 8021E268-8021E290 0028+00 rc=0 efc=0 .text      setMiniGameCount__13dMeter2Info_cFSc                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::setMiniGameCount(s8 field_0) {
	nofralloc
#include "asm/d/meter/d_meter2_info/setMiniGameCount__13dMeter2Info_cFSc.s"
}
#pragma pop


/* 8021E290-8021E2B4 0024+00 rc=3 efc=2 .text      setSaveStageName__13dMeter2Info_cFPCc                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::setSaveStageName(char const* field_0) {
	nofralloc
#include "asm/d/meter/d_meter2_info/setSaveStageName__13dMeter2Info_cFPCc.s"
}
#pragma pop


/* 8021E2B4-8021E2C8 0014+00 rc=0 efc=0 .text      dMeter2Info_getNowLifeGauge__Fv                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_getNowLifeGauge() {
	nofralloc
#include "asm/d/meter/d_meter2_info/dMeter2Info_getNowLifeGauge__Fv.s"
}
#pragma pop


/* 8021E2C8-8021E2DC 0014+00 rc=11 efc=11 .text      dMeter2Info_getNumberTextureName__Fi                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_getNumberTextureName(int field_0) {
	nofralloc
#include "asm/d/meter/d_meter2_info/dMeter2Info_getNumberTextureName__Fi.s"
}
#pragma pop


/* ############################################################################################## */
/* 804510B8-804510BC 0004+00 rc=1 efc=0 .sbss      tex_name$5188                                                */
u8 data_804510B8[4];

/* 804510BC-804510C0 0004+00 rc=1 efc=0 .sbss      None                                                         */
u8 data_804510BC[4];

/* 8021E2DC-8021E308 002C+00 rc=0 efc=0 .text      dMeter2Info_getPlusTextureName__Fv                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_getPlusTextureName() {
	nofralloc
#include "asm/d/meter/d_meter2_info/dMeter2Info_getPlusTextureName__Fv.s"
}
#pragma pop


/* ############################################################################################## */
/* 804549C0-804549C8 0008+00 rc=1 efc=0 .sdata2    @5206                                                        */
f64 lit_5206 = 4503599627370496.0 /* cast u32 to float */;

/* 8021E308-8021E4B0 01A8+00 rc=3 efc=3 .text      dMeter2Info_getPixel__FffffffPC7ResTIMG                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_getPixel(f32 field_0, f32 field_1, f32 field_2, f32 field_3, f32 field_4, f32 field_5, ResTIMG const* field_6) {
	nofralloc
#include "asm/d/meter/d_meter2_info/dMeter2Info_getPixel__FffffffPC7ResTIMG.s"
}
#pragma pop


/* 8021E4B0-8021E530 0080+00 rc=2 efc=2 .text      dMeter2Info_setCloth__FUcb                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_setCloth(u8 field_0, bool field_1) {
	nofralloc
#include "asm/d/meter/d_meter2_info/dMeter2Info_setCloth__FUcb.s"
}
#pragma pop


/* 8021E530-8021E5D4 00A4+00 rc=3 efc=3 .text      dMeter2Info_setSword__FUcb                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_setSword(u8 field_0, bool field_1) {
	nofralloc
#include "asm/d/meter/d_meter2_info/dMeter2Info_setSword__FUcb.s"
}
#pragma pop


/* 8021E5D4-8021E660 008C+00 rc=3 efc=3 .text      dMeter2Info_setShield__FUcb                                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_setShield(u8 field_0, bool field_1) {
	nofralloc
#include "asm/d/meter/d_meter2_info/dMeter2Info_setShield__FUcb.s"
}
#pragma pop


/* 8021E660-8021E668 0008+00 rc=1 efc=1 .text      dMeter2Info_is2DActiveTouchArea__Fv                          */
bool dMeter2Info_is2DActiveTouchArea() {
	return false;
}


/* 8021E668-8021E688 0020+00 rc=1 efc=1 .text      dMeter2Info_isMapOpenCheck__Fv                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_isMapOpenCheck() {
	nofralloc
#include "asm/d/meter/d_meter2_info/dMeter2Info_isMapOpenCheck__Fv.s"
}
#pragma pop


/* 8021E688-8021E6E4 005C+00 rc=2 efc=2 .text      dMeter2Info_isItemOpenCheck__Fv                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_isItemOpenCheck() {
	nofralloc
#include "asm/d/meter/d_meter2_info/dMeter2Info_isItemOpenCheck__Fv.s"
}
#pragma pop


/* 8021E6E4-8021E754 0070+00 rc=3 efc=2 .text      dMeter2Info_getRecieveLetterNum__Fv                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_getRecieveLetterNum() {
	nofralloc
#include "asm/d/meter/d_meter2_info/dMeter2Info_getRecieveLetterNum__Fv.s"
}
#pragma pop


/* 8021E754-8021E804 00B0+00 rc=4 efc=4 .text      dMeter2Info_getNewLetterNum__Fv                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_getNewLetterNum() {
	nofralloc
#include "asm/d/meter/d_meter2_info/dMeter2Info_getNewLetterNum__Fv.s"
}
#pragma pop


/* 8021E804-8021E8DC 00D8+00 rc=1 efc=1 .text      dMeter2Info_setNewLetterSender__Fv                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_setNewLetterSender() {
	nofralloc
#include "asm/d/meter/d_meter2_info/dMeter2Info_setNewLetterSender__Fv.s"
}
#pragma pop


/* 8021E8DC-8021E9D0 00F4+00 rc=1 efc=1 .text      dMeter2Info_recieveLetter__Fv                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_recieveLetter() {
	nofralloc
#include "asm/d/meter/d_meter2_info/dMeter2Info_recieveLetter__Fv.s"
}
#pragma pop


/* 8021E9D0-8021E9D4 0004+00 rc=33 efc=33 .text      dMeter2Info_set2DVibration__Fv                               */
void dMeter2Info_set2DVibration() {
	/* empty function */
}


/* 8021E9D4-8021E9D8 0004+00 rc=12 efc=12 .text      dMeter2Info_set2DVibrationM__Fv                              */
void dMeter2Info_set2DVibrationM() {
	/* empty function */
}


/* 8021E9D8-8021EA14 003C+00 rc=1 efc=1 .text      __sinit_d_meter2_info_cpp                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void __sinit_d_meter2_info_cpp() {
	nofralloc
#include "asm/d/meter/d_meter2_info/__sinit_d_meter2_info_cpp.s"
}
#pragma pop


