// 
// Generated By: dol2asm
// Translation Unit: m_Do/m_Do_Reset
// 

#include "dolphin/types.h"

// 
// Types:
// 

struct mDoRst {
	/* 800157F4 */ void getResetData();
};

struct JASTaskThread {
	/* 8028FE88 */ void pause(bool);
};

struct JASDvd {
	/* 8028FEFC */ void getThreadPointer();
};

struct Z2AudioMgr {
	/* 802CDA6C */ void hasReset() const;
};

struct JUTVideo {
	/* 802E4CAC */ void destroyManager();
};

struct JUTXfb {
	/* 802E5214 */ void clearIndex();
};

// 
// Forward References:
// 

void my_OSCancelAlarmAll(); // 2
void destroyVideo(); // 2
void mDoRst_reset(int, u32, int); // 2
void mDoRst_resetCallBack(int, void*); // 2

extern "C" void my_OSCancelAlarmAll__Fv(); // 1
extern "C" void destroyVideo__Fv(); // 1
extern "C" void mDoRst_reset__FiUli(); // 1
extern "C" void mDoRst_resetCallBack__FiPv(); // 1
extern "C" void getResetData__6mDoRstFv(); // 1
SECTION_RODATA extern const char* const m_Do_m_Do_Reset__stringBase0;
SECTION_SBSS extern u8 mResetData__6mDoRst[4 + 4 /* padding */];
extern u8 struct_80450C80[8];
SECTION_SBSS extern u8 data_80450C88[8];

// 
// External References:
// 

extern "C" void OSAttention(); // 1
void mDoDvdErr_ThdCleanup(); // 2
void cAPICPad_recalibrate(); // 2
extern "C" void LCDisable(); // 1
extern "C" void OSDisableInterrupts(); // 1
extern "C" void OSRestoreInterrupts(); // 1
extern "C" void OSSetSaveRegion(); // 1
extern "C" void OSResetSystem(); // 1
extern "C" void OSGetCurrentThread(); // 1
extern "C" void OSCancelThread(); // 1
extern "C" void OSDetachThread(); // 1
extern "C" void OSSuspendThread(); // 1
extern "C" void DVDGetDriveStatus(); // 1
extern "C" void DVDCheckDisk(); // 1
extern "C" void VIWaitForRetrace(); // 1
extern "C" void VIFlush(); // 1
extern "C" void VISetBlack(); // 1
extern "C" void GXSetCurrentGXThread(); // 1
extern "C" void GXGetCurrentGXThread(); // 1
extern "C" void GXFlush(); // 1
extern "C" void GXAbortFrame(); // 1
extern "C" void GXDrawDone(); // 1
extern "C" void GXSetDrawDoneCallback(); // 1
extern "C" void _savegpr_27(); // 1

extern "C" void OSAttention(); // 1
extern "C" void mDoDvdErr_ThdCleanup__Fv(); // 1
extern "C" void cAPICPad_recalibrate__Fv(); // 1
extern "C" void pause__13JASTaskThreadFb(); // 1
extern "C" void getThreadPointer__6JASDvdFv(); // 1
extern "C" void hasReset__10Z2AudioMgrCFv(); // 1
extern "C" void destroyManager__8JUTVideoFv(); // 1
extern "C" void clearIndex__6JUTXfbFv(); // 1
extern "C" void LCDisable(); // 1
extern "C" void OSDisableInterrupts(); // 1
extern "C" void OSRestoreInterrupts(); // 1
extern "C" void OSSetSaveRegion(); // 1
extern "C" void OSResetSystem(); // 1
extern "C" void OSGetCurrentThread(); // 1
extern "C" void OSCancelThread(); // 1
extern "C" void OSDetachThread(); // 1
extern "C" void OSSuspendThread(); // 1
extern "C" void DVDGetDriveStatus(); // 1
extern "C" void DVDCheckDisk(); // 1
extern "C" void VIWaitForRetrace(); // 1
extern "C" void VIFlush(); // 1
extern "C" void VISetBlack(); // 1
extern "C" void GXSetCurrentGXThread(); // 1
extern "C" void GXGetCurrentGXThread(); // 1
extern "C" void GXFlush(); // 1
extern "C" void GXAbortFrame(); // 1
extern "C" void GXDrawDone(); // 1
extern "C" void GXSetDrawDoneCallback(); // 1
extern "C" void _savegpr_27(); // 1
SECTION_BSS extern u8 g_mDoMemCd_control[8192];
SECTION_SBSS extern u8 mAudioMgrPtr__10Z2AudioMgr[4 + 4 /* padding */];
SECTION_SBSS extern u8 sCallback__Q210JUTGamePad13C3ButtonReset[4];
SECTION_SBSS extern u8 sCallbackArg__Q210JUTGamePad13C3ButtonReset[4 + 4 /* padding */];
SECTION_SBSS extern u8 sManager__6JUTXfb[4 + 4 /* padding */];

// 
// Declarations:
// 

/* 800155D8-800155DC 0004+00 rc=0 efc=0 .text      my_OSCancelAlarmAll__Fv                                      */
void my_OSCancelAlarmAll() {
	/* empty function */
}


/* 800155DC-80015614 0038+00 rc=0 efc=0 .text      destroyVideo__Fv                                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void destroyVideo() {
	nofralloc
#include "asm/m_Do/m_Do_Reset/destroyVideo__Fv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80374198-803741A8 0010+00 rc=0 efc=0 .rodata    @stringBase0                                                 */
#pragma push
#pragma force_active on
#pragma section ".dead"
const char* const stringBase_80374198 = "DVD_STATE_BUSY\n";
#pragma pop

/* 80450C78-80450C80 0004+04 rc=0 efc=0 .sbss      mResetData__6mDoRst                                          */
u8 mResetData__6mDoRst[4 + 4 /* padding */];

/* 80015614-8001574C 0138+00 rc=0 efc=0 .text      mDoRst_reset__FiUli                                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void mDoRst_reset(int field_0, u32 field_1, int field_2) {
	nofralloc
#include "asm/m_Do/m_Do_Reset/mDoRst_reset__FiUli.s"
}
#pragma pop


/* 8001574C-800157F4 00A8+00 rc=0 efc=0 .text      mDoRst_resetCallBack__FiPv                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void mDoRst_resetCallBack(int field_0, void* field_1) {
	nofralloc
#include "asm/m_Do/m_Do_Reset/mDoRst_resetCallBack__FiPv.s"
}
#pragma pop


/* 800157F4-800157FC 0008+00 rc=0 efc=0 .text      getResetData__6mDoRstFv                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void mDoRst::getResetData() {
	nofralloc
#include "asm/m_Do/m_Do_Reset/getResetData__6mDoRstFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80450C80-80450C88 0008+00 rc=0 efc=0 None       None                                                         */
u8 struct_80450C80[8];

/* 80450C88-80450C90 0008+00 rc=0 efc=0 .sbss      None                                                         */
u8 data_80450C88[8];

