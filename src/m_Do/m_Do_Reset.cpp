// 
// Generated By: dol2asm
// Translation Unit: m_Do/m_Do_Reset
// 

#include "dolphin/types.h"

// 
// Types:
// 

// build mDoRst (mDoRst) False/False
/* top-level dependencies (begin mDoRst) */
/* top-level dependencies (end mDoRst) */
struct mDoRst {
	/* 800157F4 */ void getResetData();
};

// build JASTaskThread (JASTaskThread) False/False
/* top-level dependencies (begin JASTaskThread) */
/* top-level dependencies (end JASTaskThread) */
struct JASTaskThread {
	/* 8028FE88 */ void pause(bool);
};

// build JASDvd (JASDvd) False/False
/* top-level dependencies (begin JASDvd) */
/* top-level dependencies (end JASDvd) */
struct JASDvd {
	/* 8028FEFC */ void getThreadPointer();
};

// build Z2AudioMgr (Z2AudioMgr) False/False
/* top-level dependencies (begin Z2AudioMgr) */
/* top-level dependencies (end Z2AudioMgr) */
struct Z2AudioMgr {
	/* 802CDA6C */ void hasReset() const;
};

// build JUTVideo (JUTVideo) False/False
/* top-level dependencies (begin JUTVideo) */
/* top-level dependencies (end JUTVideo) */
struct JUTVideo {
	/* 802E4CAC */ void destroyManager();
};

// build JUTXfb (JUTXfb) False/False
/* top-level dependencies (begin JUTXfb) */
/* top-level dependencies (end JUTXfb) */
struct JUTXfb {
	/* 802E5214 */ void clearIndex();
};

// 
// Forward References:
// 

static void my_OSCancelAlarmAll();
static void destroyVideo();
void mDoRst_reset(int, u32, int);
void mDoRst_resetCallBack(int, void*);

extern "C" static void my_OSCancelAlarmAll__Fv();
extern "C" static void destroyVideo__Fv();
extern "C" void mDoRst_reset__FiUli();
extern "C" void mDoRst_resetCallBack__FiPv();
extern "C" void getResetData__6mDoRstFv();
SECTION_RODATA extern const u8 m_Do_m_Do_Reset__stringBase0[16];
SECTION_SBSS extern u8 mResetData__6mDoRst[4 + 4 /* padding */];
SECTION_SBSS extern u8 struct_80450C80[8];
SECTION_SBSS extern u8 data_80450C88[8];

// 
// External References:
// 

extern "C" void OSAttention();
void mDoDvdErr_ThdCleanup();
void cAPICPad_recalibrate();
extern "C" void LCDisable();
extern "C" void OSDisableInterrupts();
extern "C" void OSRestoreInterrupts();
extern "C" void OSSetSaveRegion();
extern "C" void OSResetSystem();
extern "C" void OSGetCurrentThread();
extern "C" void OSCancelThread();
extern "C" void OSDetachThread();
extern "C" void OSSuspendThread();
extern "C" void DVDGetDriveStatus();
extern "C" void DVDCheckDisk();
extern "C" void VIWaitForRetrace();
extern "C" void VIFlush();
extern "C" void VISetBlack();
extern "C" void GXSetCurrentGXThread();
extern "C" void GXGetCurrentGXThread();
extern "C" void GXFlush();
extern "C" void GXAbortFrame();
extern "C" void GXDrawDone();
extern "C" void GXSetDrawDoneCallback();
extern "C" void _savegpr_27();

extern "C" void OSAttention();
extern "C" void mDoDvdErr_ThdCleanup__Fv();
extern "C" void cAPICPad_recalibrate__Fv();
extern "C" void pause__13JASTaskThreadFb();
extern "C" void getThreadPointer__6JASDvdFv();
extern "C" void hasReset__10Z2AudioMgrCFv();
extern "C" void destroyManager__8JUTVideoFv();
extern "C" void clearIndex__6JUTXfbFv();
extern "C" void LCDisable();
extern "C" void OSDisableInterrupts();
extern "C" void OSRestoreInterrupts();
extern "C" void OSSetSaveRegion();
extern "C" void OSResetSystem();
extern "C" void OSGetCurrentThread();
extern "C" void OSCancelThread();
extern "C" void OSDetachThread();
extern "C" void OSSuspendThread();
extern "C" void DVDGetDriveStatus();
extern "C" void DVDCheckDisk();
extern "C" void VIWaitForRetrace();
extern "C" void VIFlush();
extern "C" void VISetBlack();
extern "C" void GXSetCurrentGXThread();
extern "C" void GXGetCurrentGXThread();
extern "C" void GXFlush();
extern "C" void GXAbortFrame();
extern "C" void GXDrawDone();
extern "C" void GXSetDrawDoneCallback();
extern "C" void _savegpr_27();
SECTION_BSS extern u8 g_mDoMemCd_control[8192];
SECTION_SBSS extern u8 struct_80450BB8[4];
SECTION_SBSS extern u8 mAudioMgrPtr__10Z2AudioMgr[4 + 4 /* padding */];
SECTION_SBSS extern u8 sCallback__Q210JUTGamePad13C3ButtonReset[4];
SECTION_SBSS extern u8 sCallbackArg__Q210JUTGamePad13C3ButtonReset[4 + 4 /* padding */];
SECTION_SBSS extern u8 struct_80451500[4];
SECTION_SBSS extern u8 sManager__6JUTXfb[4 + 4 /* padding */];

// 
// Declarations:
// 

/* 800155D8-800155DC 0004+00 rc=1 efc=0 .text      my_OSCancelAlarmAll__Fv                                      */
static void my_OSCancelAlarmAll() {
	/* empty function */
}


/* 800155DC-80015614 0038+00 rc=1 efc=0 .text      destroyVideo__Fv                                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm static void destroyVideo() {
	nofralloc
#include "asm/m_Do/m_Do_Reset/destroyVideo__Fv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80374198-803741A8 0010+00 rc=1 efc=0 .rodata    @stringBase0                                                 */
#pragma push
#pragma force_active on
#pragma section ".dead"
SECTION_DEAD char* const stringBase_80374198 = "DVD_STATE_BUSY\n";
#pragma pop

/* 80450C78-80450C80 0004+04 rc=45 efc=42 .sbss      mResetData__6mDoRst                                          */
u8 mResetData__6mDoRst[4 + 4 /* padding */];

/* 80015614-8001574C 0138+00 rc=3 efc=3 .text      mDoRst_reset__FiUli                                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void mDoRst_reset(int field_0, u32 field_1, int field_2) {
	nofralloc
#include "asm/m_Do/m_Do_Reset/mDoRst_reset__FiUli.s"
}
#pragma pop


/* 8001574C-800157F4 00A8+00 rc=3 efc=3 .text      mDoRst_resetCallBack__FiPv                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void mDoRst_resetCallBack(int field_0, void* field_1) {
	nofralloc
#include "asm/m_Do/m_Do_Reset/mDoRst_resetCallBack__FiPv.s"
}
#pragma pop


/* 800157F4-800157FC 0008+00 rc=1 efc=0 .text      getResetData__6mDoRstFv                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void mDoRst::getResetData() {
	nofralloc
#include "asm/m_Do/m_Do_Reset/getResetData__6mDoRstFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80450C80-80450C88 0008+00 rc=6 efc=6 .sbss      None                                                         */
u8 struct_80450C80[8];
/* 80450C80 0001 data_80450C80 */
/* 80450C81 0007 data_80450C81 */

/* 80450C88-80450C90 0008+00 rc=2 efc=2 .sbss      None                                                         */
u8 data_80450C88[8];

