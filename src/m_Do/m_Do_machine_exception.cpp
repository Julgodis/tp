// 
// Generated By: dol2asm
// Translation Unit: m_Do/m_Do_machine_exception
// 

#include "dolphin/types.h"

// 
// Types:
// 

// build JUTConsole (['JUTConsole']) False/False
/* top-level dependencies (begin ['JUTConsole']) */
/* top-level dependencies (end ['JUTConsole']) */
struct JUTConsole {
	/* 802E7C38 */ void print(char const*);
	/* 802E7F7C */ void dumpToTerminal(u32);
};

// build dRes_control_c (['dRes_control_c']) False/False
/* top-level dependencies (begin ['dRes_control_c']) */
/* top-level dependencies (end ['dRes_control_c']) */
struct dRes_control_c {
	/* 8003C638 */ void dump();
};

// build DynamicModuleControlBase (['DynamicModuleControlBase']) False/False
/* top-level dependencies (begin ['DynamicModuleControlBase']) */
/* top-level dependencies (end ['DynamicModuleControlBase']) */
struct DynamicModuleControlBase {
	/* 80262470 */ void dump();
};

// build JKRHeap (['JKRHeap']) False/False
/* top-level dependencies (begin ['JKRHeap']) */
/* top-level dependencies (end ['JKRHeap']) */
struct JKRHeap {
	/* 802CE72C */ void getFreeSize();
	/* 802CE784 */ void getTotalFreeSize();
};

// build JKRAramHeap (['JKRAramHeap']) False/False
/* top-level dependencies (begin ['JKRAramHeap']) */
/* top-level dependencies (end ['JKRAramHeap']) */
struct JKRAramHeap {
	/* 802D3218 */ void dump();
};

// 
// Forward References:
// 

static void print_f(char const*, ...);
static void print(char const*);
static void dispHeapInfo();
static void dispGameInfo();
static void dispDateInfo();
static void dispConsoleToTerminal();
void exception_addition(JUTConsole*);

extern "C" static void print_f__FPCce();
extern "C" static void print__FPCc();
extern "C" static void dispHeapInfo__Fv();
extern "C" static void dispGameInfo__Fv();
extern "C" static void dispDateInfo__Fv();
extern "C" static void dispConsoleToTerminal__Fv();
extern "C" void exception_addition__FP10JUTConsole();
SECTION_RODATA extern const u8 m_Do_m_Do_machine_exception__stringBase0[480];

// 
// External References:
// 

extern "C" void JUTConsole_print_f_va_();
extern "C" void OSTicksToCalendarTime();
extern "C" void _savegpr_23();
extern "C" void _restgpr_23();

extern "C" void dump__14dRes_control_cFv();
extern "C" void dump__24DynamicModuleControlBaseFv();
extern "C" void getFreeSize__7JKRHeapFv();
extern "C" void getTotalFreeSize__7JKRHeapFv();
extern "C" void dump__11JKRAramHeapFv();
extern "C" void print__10JUTConsoleFPCc();
extern "C" void JUTConsole_print_f_va_();
extern "C" void dumpToTerminal__10JUTConsoleFUi();
extern "C" void OSTicksToCalendarTime();
extern "C" void _savegpr_23();
extern "C" void _restgpr_23();
SECTION_DATA extern u8 COPYDATE_STRING__7mDoMain[18 + 2 /* padding */];
SECTION_BSS extern u8 g_dComIfG_gameInfo[122384];
SECTION_SBSS extern u8 sPowerOnTime__7mDoMain[4];
SECTION_SBSS extern u8 data_80450B0C[4];
SECTION_SBSS extern u8 sHungUpTime__7mDoMain[4];
SECTION_SBSS extern u8 data_80450B14[4];
SECTION_SBSS extern u8 gameHeap[4];
SECTION_SBSS extern u8 zeldaHeap[4];
SECTION_SBSS extern u8 archiveHeap[4];
SECTION_SBSS extern u8 sConsole[4 + 16 /* padding */];
SECTION_SBSS extern u8 systemConsole__9JFWSystem[4];
SECTION_SBSS extern u8 sAramObject__7JKRAram[4];

// 
// Declarations:
// 

/* 80017D7C-80017E08 008C+00 rc=3 efc=0 .text      print_f__FPCce                                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm static void print_f(char const* field_0, ...) {
	nofralloc
#include "asm/m_Do/m_Do_machine_exception/print_f__FPCce.s"
}
#pragma pop


/* 80017E08-80017E30 0028+00 rc=2 efc=0 .text      print__FPCc                                                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm static void print(char const* field_0) {
	nofralloc
#include "asm/m_Do/m_Do_machine_exception/print__FPCc.s"
}
#pragma pop


/* ############################################################################################## */
/* 80374460-80374640 01DF+01 rc=3 efc=0 .rodata    @stringBase0                                                 */
#pragma push
#pragma force_active on
#pragma section ".dead"
SECTION_DEAD char* const stringBase_80374460 = 
    "--------------------------------------\n";
SECTION_DEAD char* const stringBase_80374488 = 
    "-- Heap Free / TotalFree (KB) --\n";
SECTION_DEAD char* const stringBase_803744AA = "  Zelda %5d / %5d\n";
SECTION_DEAD char* const stringBase_803744BD = "   Game %5d / %5d\n";
SECTION_DEAD char* const stringBase_803744D0 = "Archive %5d / %5d\n";
SECTION_DEAD char* const stringBase_803744E3 = 
    "--------------------------------\n";
SECTION_DEAD char* const stringBase_80374505 = "Start StageName:RoomNo [%s:%d]\n";
SECTION_DEAD char* const stringBase_80374525 = 
    "------------- Date Infomation ---------\n";
SECTION_DEAD char* const stringBase_8037454E = " FINAL VERSION\n";
SECTION_DEAD char* const stringBase_8037455E = "COMPILE USER: FINAL\n";
SECTION_DEAD char* const stringBase_80374573 = "COPYDATE   : %17s\n";
SECTION_DEAD char* const stringBase_80374586 = 
    "PowerOnTime: %04d/%2d/%2d %2d:%2d:%2d`%03d\"%03d\n";
SECTION_DEAD char* const stringBase_803745B7 = 
    "HungUpTime : %04d/%2d/%2d %2d:%2d:%2d`%03d\"%03d\n";
SECTION_DEAD char* const stringBase_803745E8 = 
    "PlayTime   : %4d days, %2d:%2d:%2d`%03d\"%03d\n";
SECTION_DEAD char* const stringBase_80374616 = 
    "---------------------------------------\n";
/* @stringBase0 padding */
SECTION_DEAD char* const pad_8037463F = "";
#pragma pop

/* 80017E30-80017F8C 015C+00 rc=1 efc=0 .text      dispHeapInfo__Fv                                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm static void dispHeapInfo() {
	nofralloc
#include "asm/m_Do/m_Do_machine_exception/dispHeapInfo__Fv.s"
}
#pragma pop


/* 80017F8C-80017FD0 0044+00 rc=1 efc=0 .text      dispGameInfo__Fv                                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm static void dispGameInfo() {
	nofralloc
#include "asm/m_Do/m_Do_machine_exception/dispGameInfo__Fv.s"
}
#pragma pop


/* 80017FD0-80018124 0154+00 rc=1 efc=0 .text      dispDateInfo__Fv                                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm static void dispDateInfo() {
	nofralloc
#include "asm/m_Do/m_Do_machine_exception/dispDateInfo__Fv.s"
}
#pragma pop


/* 80018124-8001814C 0028+00 rc=1 efc=0 .text      dispConsoleToTerminal__Fv                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm static void dispConsoleToTerminal() {
	nofralloc
#include "asm/m_Do/m_Do_machine_exception/dispConsoleToTerminal__Fv.s"
}
#pragma pop


/* 8001814C-8001817C 0030+00 rc=1 efc=1 .text      exception_addition__FP10JUTConsole                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void exception_addition(JUTConsole* field_0) {
	nofralloc
#include "asm/m_Do/m_Do_machine_exception/exception_addition__FP10JUTConsole.s"
}
#pragma pop


