// 
// Generated By: dol2asm
// Translation Unit: m_Do/m_Do_machine
// 

#include "dol2asm.h"
#include "dolphin/types.h"
#include "m_Do/m_Do_machine.h"

// 
// Types:
// 

struct JKRHeap {
	/* 802CE438 */ void becomeCurrentHeap();
	/* 802CE72C */ void getFreeSize();
	/* 802CE784 */ void getTotalFreeSize();
	/* 802CEB78 */ void setErrorFlag(bool);
	/* 802CEB88 */ void setErrorHandler(void (*)(void*, u32, int));
};

struct OSContext {
};

struct mDoDvdThd {
	/* 80015858 */ void create(s32);
};

struct mDoMemCd_Ctrl_c {
	/* 80016730 */ void ThdInit();
};

struct JUTConsole {
	/* 802E7BB8 */ void print_f(char const*, ...);
	/* 802E7C38 */ void print(char const*);
	/* 802E80A8 */ void scroll(int);
	/* 802E8184 */ void getUsedLine() const;
	/* 802E81A8 */ void getLineOffset() const;
};

struct cMl {
	/* 80263220 */ void init(JKRHeap*);
};

struct JFWSystem {
	/* 80271CD0 */ void firstInit();
	/* 80271D18 */ void init();
};

struct OSThread {
};

struct JKRThread {
	/* 802D16B8 */ JKRThread(OSThread*, int);
};

struct JKRThreadSwitch {
	/* 802D1A14 */ void createManager(JKRHeap*);
};

struct JKRAramStream {
	/* 802D4034 */ void setTransBuffer(u8*, u32, JKRHeap*);
};

struct JUTFont {
};

struct JUTDbPrint {
	/* 802E0190 */ void start(JUTFont*, JKRHeap*);
};

struct JUTGamePad {
	struct EPadPort {
	};

	/* 802E06DC */ JUTGamePad(JUTGamePad::EPadPort);
	/* 802E07B0 */ ~JUTGamePad();
};

struct JUTException {
	/* 802E2F18 */ void isEnablePad() const;
	/* 802E2F54 */ void readPad(u32*, u32*);
	/* 802E3980 */ void waitTime(s32);
	/* 802E3AEC */ void setPreUserCallback(void (*)(u16, OSContext*, u32, u32));
	/* 802E3AFC */ void setPostUserCallback(void (*)(u16, OSContext*, u32, u32));
	/* 802E3B0C */ void appendMapFile(char const*);
};

struct JUTAssertion {
	/* 802E4C34 */ void setVisible(bool);
};

struct JUTVideo {
	/* 802E4CAC */ void destroyManager();
};

struct JUTConsoleManager {
	/* 802E8450 */ void drawDirect(bool) const;
	/* 802E84C4 */ void setDirectConsole(JUTConsole*);
};

// 
// Forward References:
// 

static void myGetHeapTypeByString(JKRHeap*); // 2
static void myMemoryErrorRoutine(void*, u32, int); // 2
static void myHeapCheckRecursive(JKRHeap*); // 2
void mDoMch_HeapCheckAll(); // 2
static void developKeyCheck(u32, u32); // 2
static void mDoMch_IsProgressiveMode(); // 2
static void exceptionReadPad(u32*, u32*); // 2
static void exceptionRestart(); // 2
static void myExceptionCallback(u16, OSContext*, u32, u32); // 2
static void fault_callback_scroll(u16, OSContext*, u32, u32); // 2
static void my_PrintHeap(char const*, u32); // 2
static void my_SysPrintHeap(char const*, void*, u32); // 2
void mDoMch_Create(); // 2

extern "C" static void myGetHeapTypeByString__FP7JKRHeap(); // 1
extern "C" static void myMemoryErrorRoutine__FPvUli(); // 1
extern "C" static void myHeapCheckRecursive__FP7JKRHeap(); // 1
extern "C" void mDoMch_HeapCheckAll__Fv(); // 1
extern "C" static void developKeyCheck__FUlUl(); // 1
extern "C" static void mDoMch_IsProgressiveMode__Fv(); // 1
extern "C" static void exceptionReadPad__FPUlPUl(); // 1
extern "C" static void exceptionRestart__Fv(); // 1
extern "C" static void myExceptionCallback__FUsP9OSContextUlUl(); // 1
extern "C" static void fault_callback_scroll__FUsP9OSContextUlUl(); // 1
extern "C" static void my_PrintHeap__FPCcUl(); // 1
extern "C" static void my_SysPrintHeap__FPCcPvUl(); // 1
extern "C" void mDoMch_Create__Fv(); // 1
extern "C" extern char const* const m_Do_m_Do_machine__stringBase0;
extern "C" extern u8 g_ntscZeldaProg[60];
extern "C" extern void* mRenderModeObj__15mDoMch_render_c[1 + 1 /* padding */];

// 
// External References:
// 

void mDoExt_createAssertHeap(JKRHeap*); // 2
void mDoExt_createDbPrintHeap(u32, JKRHeap*); // 2
void mDoExt_getDbPrintHeap(); // 2
void mDoExt_createGameHeap(u32, JKRHeap*); // 2
void mDoExt_getGameHeap(); // 2
void mDoExt_createZeldaHeap(u32, JKRHeap*); // 2
void mDoExt_getZeldaHeap(); // 2
void mDoExt_createCommandHeap(u32, JKRHeap*); // 2
void mDoExt_getCommandHeap(); // 2
void mDoExt_createArchiveHeap(u32, JKRHeap*); // 2
void mDoExt_getArchiveHeap(); // 2
void mDoExt_createJ2dHeap(u32, JKRHeap*); // 2
void mDoExt_getJ2dHeap(); // 2
void mDoRst_reset(int, u32, int); // 2
void mDoDvdErr_ThdInit(); // 2
void exception_addition(JUTConsole*); // 2
void cAPICPad_recalibrate(); // 2
void cM_initRnd(int, int, int); // 2
void* operator new(u32); // 2

extern "C" void OSReportDisable(); // 1
extern "C" void OSReportEnable(); // 1
extern "C" void OSReport(); // 1
extern "C" void OSReport_Error(); // 1
extern "C" void OSReport_System(); // 1
extern "C" void mDoExt_createAssertHeap__FP7JKRHeap(); // 1
extern "C" void mDoExt_createDbPrintHeap__FUlP7JKRHeap(); // 1
extern "C" void mDoExt_getDbPrintHeap__Fv(); // 1
extern "C" void mDoExt_createGameHeap__FUlP7JKRHeap(); // 1
extern "C" void mDoExt_getGameHeap__Fv(); // 1
extern "C" void mDoExt_createZeldaHeap__FUlP7JKRHeap(); // 1
extern "C" void mDoExt_getZeldaHeap__Fv(); // 1
extern "C" void mDoExt_createCommandHeap__FUlP7JKRHeap(); // 1
extern "C" void mDoExt_getCommandHeap__Fv(); // 1
extern "C" void mDoExt_createArchiveHeap__FUlP7JKRHeap(); // 1
extern "C" void mDoExt_getArchiveHeap__Fv(); // 1
extern "C" void mDoExt_createJ2dHeap__FUlP7JKRHeap(); // 1
extern "C" void mDoExt_getJ2dHeap__Fv(); // 1
extern "C" void mDoRst_reset__FiUli(); // 1
extern "C" void create__9mDoDvdThdFl(); // 1
extern "C" void mDoDvdErr_ThdInit__Fv(); // 1
extern "C" void ThdInit__15mDoMemCd_Ctrl_cFv(); // 1
extern "C" void exception_addition__FP10JUTConsole(); // 1
extern "C" void init__3cMlFP7JKRHeap(); // 1
extern "C" void cAPICPad_recalibrate__Fv(); // 1
extern "C" void cM_initRnd__Fiii(); // 1
extern "C" void firstInit__9JFWSystemFv(); // 1
extern "C" void init__9JFWSystemFv(); // 1
extern "C" void becomeCurrentHeap__7JKRHeapFv(); // 1
extern "C" void getFreeSize__7JKRHeapFv(); // 1
extern "C" void getTotalFreeSize__7JKRHeapFv(); // 1
extern "C" void setErrorFlag__7JKRHeapFb(); // 1
extern "C" void setErrorHandler__7JKRHeapFPFPvUli_v(); // 1
extern "C" void* __nw__FUl(); // 1
extern "C" void __ct__9JKRThreadFP8OSThreadi(); // 1
extern "C" void createManager__15JKRThreadSwitchFP7JKRHeap(); // 1
extern "C" void setTransBuffer__13JKRAramStreamFPUcUlP7JKRHeap(); // 1
extern "C" void start__10JUTDbPrintFP7JUTFontP7JKRHeap(); // 1
extern "C" void __ct__10JUTGamePadFQ210JUTGamePad8EPadPort(); // 1
extern "C" void __dt__10JUTGamePadFv(); // 1
extern "C" void isEnablePad__12JUTExceptionCFv(); // 1
extern "C" void readPad__12JUTExceptionFPUlPUl(); // 1
extern "C" void waitTime__12JUTExceptionFl(); // 1
extern "C" void setPreUserCallback__12JUTExceptionFPFUsP9OSContextUlUl_v(); // 1
extern "C" void setPostUserCallback__12JUTExceptionFPFUsP9OSContextUlUl_v(); // 1
extern "C" void appendMapFile__12JUTExceptionFPCc(); // 1
extern "C" void setVisible__12JUTAssertionFb(); // 1
extern "C" void destroyManager__8JUTVideoFv(); // 1
extern "C" void print_f__10JUTConsoleFPCce(); // 1
extern "C" void print__10JUTConsoleFPCc(); // 1
extern "C" void scroll__10JUTConsoleFi(); // 1
extern "C" void getUsedLine__10JUTConsoleCFv(); // 1
extern "C" void getLineOffset__10JUTConsoleCFv(); // 1
extern "C" void drawDirect__17JUTConsoleManagerCFb(); // 1
extern "C" void setDirectConsole__17JUTConsoleManagerFP10JUTConsole(); // 1
extern "C" void PPCHalt(); // 1
extern "C" void OSGetConsoleType(); // 1
extern "C" void OSGetArenaHi(); // 1
extern "C" void OSGetArenaLo(); // 1
extern "C" void OSSetArenaHi(); // 1
extern "C" void OSEnableInterrupts(); // 1
extern "C" void OSResetSystem(); // 1
extern "C" void OSGetResetCode(); // 1
extern "C" void OSGetProgressiveMode(); // 1
extern "C" void OSSetProgressiveMode(); // 1
extern "C" void OSGetCurrentThread(); // 1
extern "C" void OSGetThreadPriority(); // 1
extern "C" void OSGetTime(); // 1
extern "C" void DVDChangeDir(); // 1
extern "C" void VIFlush(); // 1
extern "C" void VISetBlack(); // 1
extern "C" void VIGetRetraceCount(); // 1
extern "C" void VIGetDTVStatus(); // 1
extern "C" void GXSetDrawDoneCallback(); // 1
extern "C" void _savegpr_28(); // 1
extern "C" void _restgpr_28(); // 1
extern "C" extern u8 g_mDoMemCd_control[8192];
extern "C" extern u32 data_80450580;
extern "C" extern u32 memMargin__7mDoMain;
extern "C" extern u32 maxStdHeaps__Q29JFWSystem11CSetUpParam;
extern "C" extern u32 sysHeapSize__Q29JFWSystem11CSetUpParam;
extern "C" extern u32 fifoBufSize__Q29JFWSystem11CSetUpParam;
extern "C" extern u32 aramAudioBufSize__Q29JFWSystem11CSetUpParam;
extern "C" extern u32 aramGraphBufSize__Q29JFWSystem11CSetUpParam;
extern "C" extern void* renderMode__Q29JFWSystem11CSetUpParam;
extern "C" extern u8 data_804508B0[8];
extern "C" extern u32 sSZSBufferSize__7JKRAram[1 + 1 /* padding */];
extern "C" extern u32 sSZSBufferSize__12JKRDvdRipper;
extern "C" extern u32 sSZSBufferSize__16JKRDvdAramRipper;
extern "C" extern u8 sHungUpTime__7mDoMain[4];
extern "C" extern u8 data_80450B14[4];
extern "C" extern u8 gameHeap[4];
extern "C" extern u8 zeldaHeap[4];
extern "C" extern u8 commandHeap[4];
extern "C" extern u8 archiveHeap[4];
extern "C" extern u8 mResetData__6mDoRst[4 + 4 /* padding */];
extern "C" extern u8 systemHeap__9JFWSystem[4];
extern "C" extern u8 systemConsole__9JFWSystem[4];
extern "C" extern u8 sSystemHeap__7JKRHeap[4];
extern "C" extern u8 sRootHeap__7JKRHeap[4];
extern "C" extern u8 sDebugPrint__10JUTDbPrint[4 + 4 /* padding */];
extern "C" extern u8 struct_80451500[4];
extern "C" extern u8 sErrorManager__12JUTException[4];
extern "C" extern u8 sConsole__12JUTException[4];
extern "C" extern u8 sManager__17JUTConsoleManager[4];

// 
// Declarations:
// 

/* ############################################################################################## */
/* 80373DE8-803740C0 02D8+00 s=7 e=0 z=0  None .rodata    @stringBase0                                                 */
#pragma push
#pragma force_active on
#pragma section ".dead"
SECTION_DEAD char const* const stringBase_80373DE8 = "SystemHeap";
SECTION_DEAD char const* const stringBase_80373DF3 = "ZeldaHeap";
SECTION_DEAD char const* const stringBase_80373DFD = "GameHeap";
SECTION_DEAD char const* const stringBase_80373E06 = "ArchiveHeap";
SECTION_DEAD char const* const stringBase_80373E12 = "CommandHeap";
SECTION_DEAD char const* const stringBase_80373E1E = "DbPrintHeap";
SECTION_DEAD char const* const stringBase_80373E2A = "J2dHeap";
SECTION_DEAD char const* const stringBase_80373E32 = "ASTH";
SECTION_DEAD char const* const stringBase_80373E37 = "EXPH";
SECTION_DEAD char const* const stringBase_80373E3C = "SLID";
SECTION_DEAD char const* const stringBase_80373E41 = "STDH";
SECTION_DEAD char const* const stringBase_80373E46 = "UNIT";
SECTION_DEAD char const* const stringBase_80373E4B = "(Null)";
SECTION_DEAD char const* const stringBase_80373E52 = 
    "エラー: メモリを確保できません %d(0x%x)バイト、 %d バイトアライメント from "
    "%08x\n";
SECTION_DEAD char const* const stringBase_80373EA3 = 
    "FreeSize=%08x TotalFreeSize=%08x HeapType=%08x(%"
    "c%c%c%c) HeapSize=%08x %s\n";
SECTION_DEAD char const* const stringBase_80373EEE = "error in %08x(%s)\n";
SECTION_DEAD char const* const stringBase_80373F01 = "振動停止＆原点復帰\n";
SECTION_DEAD char const* const stringBase_80373F15 = "例外マネージャがありません\n";
SECTION_DEAD char const* const stringBase_80373F31 = "キー入力を受け付けています\n";
SECTION_DEAD char const* const stringBase_80373F4D = "JUTAssertionを可視化しました\n";
SECTION_DEAD char const* const stringBase_80373F6B = "3秒間停止\n";
SECTION_DEAD char const* const stringBase_80373F76 = "/map/Final/Release";
SECTION_DEAD char const* const stringBase_80373F89 = "(SRR0-3):%08X %08X %08X %08X\n";
SECTION_DEAD char const* const stringBase_80373FA7 = 
    "PUSH START BUTTON TO ADDITIONAL INFOMATION\n";
SECTION_DEAD char const* const stringBase_80373FD3 = 
    "--------------------------------------\n";
SECTION_DEAD char const* const stringBase_80373FFB = """\x1B""[32m%-24s = size=%d KB\n""\x1B""[m";
SECTION_DEAD char const* const stringBase_80374017 = 
    """\x1B""[32m%-24s = %08x-%08x size=%d KB\n""\x1B""[m";
SECTION_DEAD char const* const stringBase_8037403D = "アリーナ";
SECTION_DEAD char const* const stringBase_80374046 = "システムヒープ";
SECTION_DEAD char const* const stringBase_80374055 = "コマンドヒープ";
SECTION_DEAD char const* const stringBase_80374064 = "アーカイブヒープ";
SECTION_DEAD char const* const stringBase_80374075 = "Ｊ２Ｄ用ヒープ";
SECTION_DEAD char const* const stringBase_80374084 = "ゲームヒープ";
SECTION_DEAD char const* const stringBase_80374091 = "ゼルダヒープ";
SECTION_DEAD char const* const stringBase_8037409E = 
    "/map/Final/Release/frameworkF.map";
#pragma pop

/* 80450BF0-80450BF4 0004+00 s=1 e=0 z=0  None .sbss      None                                                         */
static u8 data_80450BF0[4];

/* 80450BF4-80450BF8 0004+00 s=1 e=0 z=0  None .sbss      solidHeapErrors                                              */
static u8 solidHeapErrors[4];

/* 80450BF8-80450BFC 0004+00 s=1 e=0 z=0  None .sbss      gameHeapErrors                                               */
static u8 gameHeapErrors[4];

/* 80450BFC-80450C00 0004+00 s=1 e=0 z=0  None .sbss      zeldaHeapErrors                                              */
static u8 zeldaHeapErrors[4];

/* 80450C00-80450C04 0004+00 s=1 e=0 z=0  None .sbss      commandHeapErrors                                            */
static u8 commandHeapErrors[4];

/* 80450C04-80450C08 0004+00 s=1 e=0 z=0  None .sbss      archiveHeapErrors                                            */
static u8 archiveHeapErrors[4];

/* 80450C08-80450C0C 0004+00 s=1 e=0 z=0  None .sbss      unknownHeapErrors                                            */
static u8 unknownHeapErrors[4];

/* 80450C0C-80450C10 0004+00 s=1 e=0 z=0  None .sbss      heapErrors                                                   */
static u8 heapErrors[4];

/* 80450C10-80450C18 0008+00 s=2 e=0 z=0  None .sbss      None                                                         */
static u8 struct_80450C10[8];

/* 8000B1EC-8000B3EC 0200+00 s=2 e=0 z=0  None .text      myGetHeapTypeByString__FP7JKRHeap                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm static void myGetHeapTypeByString(JKRHeap* param_0) {
	nofralloc
#include "asm/m_Do/m_Do_machine/myGetHeapTypeByString__FP7JKRHeap.s"
}
#pragma pop


/* 8000B3EC-8000B5C8 01DC+00 s=1 e=0 z=0  None .text      myMemoryErrorRoutine__FPvUli                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm static void myMemoryErrorRoutine(void* param_0, u32 param_1, int param_2) {
	nofralloc
#include "asm/m_Do/m_Do_machine/myMemoryErrorRoutine__FPvUli.s"
}
#pragma pop


/* 8000B5C8-8000B668 00A0+00 s=1 e=0 z=0  None .text      myHeapCheckRecursive__FP7JKRHeap                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm static void myHeapCheckRecursive(JKRHeap* param_0) {
	nofralloc
#include "asm/m_Do/m_Do_machine/myHeapCheckRecursive__FP7JKRHeap.s"
}
#pragma pop


/* 8000B668-8000B68C 0024+00 s=0 e=2 z=0  None .text      mDoMch_HeapCheckAll__Fv                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void mDoMch_HeapCheckAll() {
	nofralloc
#include "asm/m_Do/m_Do_machine/mDoMch_HeapCheckAll__Fv.s"
}
#pragma pop


/* 8000B68C-8000B73C 00B0+00 s=1 e=0 z=0  None .text      developKeyCheck__FUlUl                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm static void developKeyCheck(u32 param_0, u32 param_1) {
	nofralloc
#include "asm/m_Do/m_Do_machine/developKeyCheck__FUlUl.s"
}
#pragma pop


/* 8000B73C-8000B768 002C+00 s=1 e=0 z=0  None .text      mDoMch_IsProgressiveMode__Fv                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm static void mDoMch_IsProgressiveMode() {
	nofralloc
#include "asm/m_Do/m_Do_machine/mDoMch_IsProgressiveMode__Fv.s"
}
#pragma pop


/* 8000B768-8000B798 0030+00 s=2 e=0 z=0  None .text      exceptionReadPad__FPUlPUl                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm static void exceptionReadPad(u32* param_0, u32* param_1) {
	nofralloc
#include "asm/m_Do/m_Do_machine/exceptionReadPad__FPUlPUl.s"
}
#pragma pop


/* 8000B798-8000B7C8 0030+00 s=1 e=0 z=0  None .text      exceptionRestart__Fv                                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm static void exceptionRestart() {
	nofralloc
#include "asm/m_Do/m_Do_machine/exceptionRestart__Fv.s"
}
#pragma pop


/* 8000B7C8-8000B95C 0194+00 s=1 e=0 z=0  None .text      myExceptionCallback__FUsP9OSContextUlUl                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm static void myExceptionCallback(u16 param_0, OSContext* param_1, u32 param_2, u32 param_3) {
	nofralloc
#include "asm/m_Do/m_Do_machine/myExceptionCallback__FUsP9OSContextUlUl.s"
}
#pragma pop


/* ############################################################################################## */
/* 80451B00-80451B04 0004+00 s=1 e=0 z=0  None .sdata2    @3940                                                        */
SECTION_SDATA2 static u32 lit_3940 = 0x41000000;

/* 80451B04-80451B08 0004+00 s=1 e=0 z=0  None .sdata2    @3941                                                        */
SECTION_SDATA2 static u32 lit_3941 = 0x40C00000;

/* 8000B95C-8000BCF4 0398+00 s=1 e=0 z=0  None .text      fault_callback_scroll__FUsP9OSContextUlUl                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm static void fault_callback_scroll(u16 param_0, OSContext* param_1, u32 param_2, u32 param_3) {
	nofralloc
#include "asm/m_Do/m_Do_machine/fault_callback_scroll__FUsP9OSContextUlUl.s"
}
#pragma pop


/* 8000BCF4-8000BCF8 0004+00 s=1 e=0 z=0  None .text      my_PrintHeap__FPCcUl                                         */
static void my_PrintHeap(char const* param_0, u32 param_1) {
	/* empty function */
}


/* 8000BCF8-8000BD44 004C+00 s=1 e=0 z=0  None .text      my_SysPrintHeap__FPCcPvUl                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm static void my_SysPrintHeap(char const* param_0, void* param_1, u32 param_2) {
	nofralloc
#include "asm/m_Do/m_Do_machine/my_SysPrintHeap__FPCcPvUl.s"
}
#pragma pop


/* ############################################################################################## */
/* 803A2F60-803A2F9C 003C+00 s=1 e=0 z=0  None .data      g_ntscZeldaIntDf                                             */
SECTION_DATA static u8 g_ntscZeldaIntDf[60] = {
	0x00, 0x00, 0x00, 0x00, 0x02, 0x60, 0x01, 0xC0, 0x01, 0xC0, 0x00, 0x1B, 0x00, 0x10, 0x02, 0x9A,
	0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
	0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
	0x06, 0x06, 0x08, 0x08, 0x0A, 0x0C, 0x0A, 0x08, 0x08, 0x00, 0x00, 0x00,
};

/* 803A2F9C-803A2FD8 003C+00 s=1 e=1 z=0  None .data      g_ntscZeldaProg                                              */
SECTION_DATA u8 g_ntscZeldaProg[60] = {
	0x00, 0x00, 0x00, 0x02, 0x02, 0x60, 0x01, 0xC0, 0x01, 0xC0, 0x00, 0x1B, 0x00, 0x10, 0x02, 0x9A,
	0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
	0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
	0x06, 0x06, 0x00, 0x00, 0x15, 0x16, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 804505A0-804505A8 0004+04 s=1 e=3 z=0  None .sdata     mRenderModeObj__15mDoMch_render_c                            */
SECTION_SDATA void* mRenderModeObj__15mDoMch_render_c[1 + 1 /* padding */] = {
	(void*)&g_ntscZeldaIntDf,
	/* padding */
	NULL,
};

/* 8000BD44-8000C0CC 0388+00 s=0 e=2 z=0  None .text      mDoMch_Create__Fv                                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void mDoMch_Create() {
	nofralloc
#include "asm/m_Do/m_Do_machine/mDoMch_Create__Fv.s"
}
#pragma pop


